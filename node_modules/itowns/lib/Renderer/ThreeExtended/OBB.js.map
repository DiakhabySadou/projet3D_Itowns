{"version":3,"sources":["../../../src/Renderer/ThreeExtended/OBB.js"],"names":["THREE","OBB","min","max","lookAt","translate","Object3D","call","box3D","Box3","natBox","clone","translateX","x","translateY","y","translateZ","z","oPosition","Vector3","update","position","prototype","constructor","updateMinMax","copy","updateMatrixWorld","pointsWorld","_cPointsWorld","_points","updateZ","addHeight","minz","maxz","depth","Math","abs","nHalfSize","translaZ","Vector2","points","set","m","matrixWorld","i","length","applyMatrix4","isSphereAboveXYBox","sphere","localSpherePosition","worldToLocal","distance","sqrt","radius","tmp","epsg4978","cardinals","normal","maxV","minV","cardinal3D","transformNormalToZ","Quaternion","alignTileOnWorldXY","tangentPlaneAtOrigin","Plane","zUp","push","EPSG_4326_Radians","extentToOBB","extent","minHeight","maxHeight","_crs","Error","center","bboxDimension","dimensions","RADIAN","phiStart","west","phiLength","thetaStart","south","thetaLength","_values","cardinalsXYZ","centersLongitude","longitude","cardinal","as","xyz","cardinalsXYZToOBB","centerLongitude","isEllipsoid","halfMaxHeight","normalize","setFromUnitVectors","setFromAxisAngle","rotateTile","multiply","point5InPlaneX","vec","projectPoint","d","distanceTo","sub","applyQuaternion","halfLength","halfWidth","delta","obb"],"mappings":"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","file":"OBB.js","sourcesContent":["import * as THREE from 'three';\nimport Coordinates, { C, UNIT } from '../../Core/Geographic/Coordinates';\n\nfunction OBB(min, max, lookAt, translate) {\n    THREE.Object3D.call(this);\n    this.box3D = new THREE.Box3(min, max);\n\n    this.natBox = this.box3D.clone();\n\n    if (lookAt) {\n        this.lookAt(lookAt);\n    }\n\n\n    if (translate) {\n        this.translateX(translate.x);\n        this.translateY(translate.y);\n        this.translateZ(translate.z);\n    }\n\n    this.oPosition = new THREE.Vector3();\n\n    this.update();\n\n    this.oPosition = this.position.clone();\n    this.z = { min: 0, max: 0 };\n}\n\nOBB.prototype = Object.create(THREE.Object3D.prototype);\nOBB.prototype.constructor = OBB;\n\nOBB.prototype.updateMinMax = function updateMinMax(min, max) {\n    this.box3D.min.copy(min);\n    this.box3D.max.copy(max);\n    this.natBox.copy(this.box3D);\n    this.update();\n    this.oPosition.copy(this.position);\n};\n\nOBB.prototype.update = function update() {\n    this.updateMatrixWorld(true);\n\n    this.pointsWorld = this._cPointsWorld(this._points());\n};\n\nOBB.prototype.updateZ = function updateZ(min, max) {\n    this.z = { min, max };\n    return this.addHeight(min, max);\n};\n\nOBB.prototype.addHeight = function addHeight(minz, maxz) {\n    var depth = Math.abs(this.natBox.min.z - this.natBox.max.z);\n    //\n    this.box3D.min.z = this.natBox.min.z + minz;\n    this.box3D.max.z = this.natBox.max.z + maxz;\n\n    // TODO à vérifier --->\n\n    var nHalfSize = Math.abs(this.box3D.min.z - this.box3D.max.z) * 0.5;\n    var translaZ = this.box3D.min.z + nHalfSize;\n    this.box3D.min.z = -nHalfSize;\n    this.box3D.max.z = nHalfSize;\n\n    this.position.copy(this.oPosition);\n\n    this.translateZ(translaZ);\n\n    this.update();\n\n    return new THREE.Vector2(nHalfSize - depth * 0.5, translaZ);\n\n    // TODO <---- à vérifier\n};\n\nOBB.prototype._points = function _points() {\n    var points = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n    ];\n\n    points[0].set(this.box3D.max.x, this.box3D.max.y, this.box3D.max.z);\n    points[1].set(this.box3D.min.x, this.box3D.max.y, this.box3D.max.z);\n    points[2].set(this.box3D.min.x, this.box3D.min.y, this.box3D.max.z);\n    points[3].set(this.box3D.max.x, this.box3D.min.y, this.box3D.max.z);\n    points[4].set(this.box3D.max.x, this.box3D.max.y, this.box3D.min.z);\n    points[5].set(this.box3D.min.x, this.box3D.max.y, this.box3D.min.z);\n    points[6].set(this.box3D.min.x, this.box3D.min.y, this.box3D.min.z);\n    points[7].set(this.box3D.max.x, this.box3D.min.y, this.box3D.min.z);\n\n    return points;\n};\n\nOBB.prototype._cPointsWorld = function _cPointsWorld(points) {\n    var m = this.matrixWorld;\n\n    for (var i = 0, max = points.length; i < max; i++) {\n        points[i].applyMatrix4(m);\n    }\n\n    return points;\n};\n\n/**\n * Determines if the sphere is above the XY space of the box\n *\n * @param      {Sphere}   sphere  The sphere\n * @return     {boolean}  True if sphere is above the XY space of the box, False otherwise.\n */\nOBB.prototype.isSphereAboveXYBox = function isSphereAboveXYBox(sphere) {\n    const localSpherePosition = this.worldToLocal(sphere.position);\n    // get obb closest point to sphere center by clamping\n    const x = Math.max(this.box3D.min.x, Math.min(localSpherePosition.x, this.box3D.max.x));\n    const y = Math.max(this.box3D.min.y, Math.min(localSpherePosition.y, this.box3D.max.y));\n\n    // this is the same as isPointInsideSphere.position\n    const distance = Math.sqrt((x - localSpherePosition.x) * (x - localSpherePosition.x) +\n                           (y - localSpherePosition.y) * (y - localSpherePosition.y));\n\n    return distance < sphere.radius;\n};\n\n// Allocate these variables once and for all\nconst tmp = {\n    epsg4978: new Coordinates('EPSG:4978', 0, 0),\n    cardinals: [],\n    normal: new THREE.Vector3(),\n    maxV: new THREE.Vector3(),\n    minV: new THREE.Vector3(),\n    translate: new THREE.Vector3(),\n    cardinal3D: new THREE.Vector3(),\n    transformNormalToZ: new THREE.Quaternion(),\n    alignTileOnWorldXY: new THREE.Quaternion(),\n    tangentPlaneAtOrigin: new THREE.Plane(),\n    zUp: new THREE.Vector3(0, 0, 1),\n};\n\nfor (let i = 0; i < 9; i++) {\n    tmp.cardinals.push(C.EPSG_4326_Radians(0, 0));\n}\n\n// get oriented bounding box of tile\nOBB.extentToOBB = function extentToOBB(extent, minHeight = 0, maxHeight = 0) {\n    if (extent._crs != 'EPSG:4326') {\n        throw new Error('The extent crs is not a Geographic Coordinates (EPSG:4326)');\n    }\n\n    // Calcule the center world position with the extent.\n    extent.center(tmp.cardinals[8]);\n\n    const bboxDimension = extent.dimensions(UNIT.RADIAN);\n    const phiStart = extent.west(UNIT.RADIAN);\n    const phiLength = bboxDimension.x;\n\n    const thetaStart = extent.south(UNIT.RADIAN);\n    const thetaLength = bboxDimension.y;\n    //      0---1---2\n    //      |       |\n    //      7   8   3\n    //      |       |\n    //      6---5---4\n    tmp.cardinals[0]._values[0] = phiStart;\n    tmp.cardinals[0]._values[1] = thetaStart;\n    tmp.cardinals[1]._values[0] = phiStart + bboxDimension.x * 0.5;\n    tmp.cardinals[1]._values[1] = thetaStart;\n    tmp.cardinals[2]._values[0] = phiStart + phiLength;\n    tmp.cardinals[2]._values[1] = thetaStart;\n    tmp.cardinals[3]._values[0] = phiStart + phiLength;\n    tmp.cardinals[3]._values[1] = thetaStart + bboxDimension.y * 0.5;\n    tmp.cardinals[4]._values[0] = phiStart + phiLength;\n    tmp.cardinals[4]._values[1] = thetaStart + thetaLength;\n    tmp.cardinals[5]._values[0] = phiStart + bboxDimension.x * 0.5;\n    tmp.cardinals[5]._values[1] = thetaStart + thetaLength;\n    tmp.cardinals[6]._values[0] = phiStart;\n    tmp.cardinals[6]._values[1] = thetaStart + thetaLength;\n    tmp.cardinals[7]._values[0] = phiStart;\n    tmp.cardinals[7]._values[1] = thetaStart + bboxDimension.y * 0.5;\n\n    const cardinalsXYZ = [];\n    const centersLongitude = tmp.cardinals[8].longitude(UNIT.RADIAN);\n    for (const cardinal of tmp.cardinals) {\n        cardinalsXYZ.push(cardinal.as('EPSG:4978').xyz());\n    }\n\n    return this.cardinalsXYZToOBB(cardinalsXYZ, centersLongitude, true, minHeight, maxHeight);\n};\n\n/**\n * Computes the OBB of a portion of a ellipsoid.\n * @param {Vector3[]} cardinals - 8 cardinals of the portion + the center.\n * @param {number} centerLongitude - the longitude at the center of the portion\n * @param {boolean} isEllipsoid - should be true when computing for the globe, false otherwise\n * @param {number} minHeight\n * @param {number} maxHeight\n * @return {OBB}\n */\nOBB.cardinalsXYZToOBB = function cardinalsXYZToOBB(cardinals, centerLongitude, isEllipsoid, minHeight = 0, maxHeight = 0) {\n    tmp.maxV.set(-1000, -1000, -1000);\n    tmp.minV.set(1000, 1000, 1000);\n\n    let halfMaxHeight = 0;\n    tmp.normal.copy(cardinals[8]).normalize();\n    tmp.tangentPlaneAtOrigin.set(tmp.normal, 0);\n\n    // Compute the rotation transforming the tile so that it's normal becomes (0, 0, 1)\n    tmp.transformNormalToZ.setFromUnitVectors(tmp.normal, tmp.zUp);\n    // Compute the rotation to get the line [1,8,5] aligned on (0, 1, 0)\n    tmp.alignTileOnWorldXY.setFromAxisAngle(tmp.zUp, -centerLongitude);\n    const rotateTile = tmp.alignTileOnWorldXY.multiply(tmp.transformNormalToZ);\n\n    let point5InPlaneX;\n    for (let i = 0; i < cardinals.length; i++) {\n        const vec = tmp.tangentPlaneAtOrigin.projectPoint(cardinals[i], tmp.cardinal3D);\n        const d = vec.distanceTo(cardinals[i].sub(cardinals[8]));\n        halfMaxHeight = Math.max(halfMaxHeight, d * 0.5);\n        vec.applyQuaternion(rotateTile);\n        // compute tile's min/max\n        tmp.maxV.max(vec);\n        tmp.minV.min(vec);\n\n        if (i == 5) {\n            point5InPlaneX = vec.x;\n        }\n    }\n\n    const halfLength = Math.abs(tmp.maxV.y - tmp.minV.y) * 0.5;\n    const halfWidth = Math.abs(tmp.maxV.x - tmp.minV.x) * 0.5;\n\n    const max = new THREE.Vector3(halfLength, halfWidth, halfMaxHeight);\n    const min = new THREE.Vector3(-halfLength, -halfWidth, -halfMaxHeight);\n\n    // delta is the distance between line `([6],[4])` and the point `[5]`\n    // These points [6],[5],[4] aren't aligned because of the ellipsoid shape\n    const delta = isEllipsoid ? (halfWidth - Math.abs(point5InPlaneX)) : 0;\n    tmp.translate.set(0, delta, -halfMaxHeight);\n\n    const obb = new OBB(min, max, tmp.normal, tmp.translate);\n\n    // for 3D\n    if (minHeight !== 0 || maxHeight !== 0) {\n        obb.addHeight(minHeight, maxHeight);\n    }\n    return obb;\n};\nexport default OBB;\n"]}