{"version":3,"sources":["../../../src/Renderer/ThreeExtended/B3dmLoader.js"],"names":["THREE","matrixChangeUpVectorZtoY","Matrix4","makeRotationX","Math","PI","matrixChangeUpVectorZtoX","makeRotationZ","B3dmLoader","glTFLoader","filterUnsupportedSemantics","obj","supported","gltfShader","names","name","boundUniforms","push","semantic","indexOf","applyOptionalCesiumRTC","data","gltf","textDecoder","headerView","DataView","contentArray","Uint8Array","getUint32","content","decode","json","JSON","parse","extensions","CESIUM_RTC","position","fromArray","center","updateMatrixWorld","prototype","buffer","gltfUpAxis","Error","view","byteOffset","b3dmHeader","batchTable","magic","version","Uint32Array","BYTES_PER_ELEMENT","byteLength","FTJSONLength","FTBinaryLength","BTJSONLength","BTBinaryLength","sizeBegin","slice","resolve","onload","scenes","scene","traverse","undefined","applyMatrix","b3dm"],"mappings":"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","file":"B3dmLoader.js","sourcesContent":["import * as THREE from 'three';\nimport GLTFLoader from './GLTFLoader';\nimport BatchTable from './BatchTable';\n\nconst matrixChangeUpVectorZtoY = (new THREE.Matrix4()).makeRotationX(Math.PI / 2);\n// For gltf rotation\nconst matrixChangeUpVectorZtoX = (new THREE.Matrix4()).makeRotationZ(-Math.PI / 2);\n\nfunction B3dmLoader() {\n    this.glTFLoader = new GLTFLoader();\n}\n\nfunction filterUnsupportedSemantics(obj) {\n    // see GLTFLoader GLTFShader.prototype.update function\n    const supported = [\n        'MODELVIEW',\n        'MODELVIEWINVERSETRANSPOSE',\n        'PROJECTION',\n        'JOINTMATRIX'];\n\n    if (obj.gltfShader) {\n        const names = [];\n        // eslint-disable-next-line guard-for-in\n        for (const name in obj.gltfShader.boundUniforms) {\n            names.push(name);\n        }\n        for (const name of names) {\n            const semantic = obj.gltfShader.boundUniforms[name].semantic;\n            if (supported.indexOf(semantic) < 0) {\n                delete obj.gltfShader.boundUniforms[name];\n            }\n        }\n    }\n}\n// parse for RTC values\nfunction applyOptionalCesiumRTC(data, gltf, textDecoder) {\n    const headerView = new DataView(data, 0, 20);\n    const contentArray = new Uint8Array(data, 20, headerView.getUint32(12, true));\n    const content = textDecoder.decode(new Uint8Array(contentArray));\n    const json = JSON.parse(content);\n    if (json.extensions && json.extensions.CESIUM_RTC) {\n        gltf.position.fromArray(json.extensions.CESIUM_RTC.center);\n        gltf.updateMatrixWorld(true);\n    }\n}\n\nB3dmLoader.prototype.parse = function parse(buffer, gltfUpAxis, textDecoder) {\n    if (!buffer) {\n        throw new Error('No array buffer provided.');\n    }\n\n    const view = new DataView(buffer, 4);   // starts after magic\n\n    let byteOffset = 0;\n    const b3dmHeader = {};\n    let batchTable = {};\n\n    // Magic type is unsigned char [4]\n    b3dmHeader.magic = textDecoder.decode(new Uint8Array(buffer, 0, 4));\n    if (b3dmHeader.magic) {\n        // Version, byteLength, batchTableJSONByteLength, batchTableBinaryByteLength and batchTable types are uint32\n        b3dmHeader.version = view.getUint32(byteOffset, true);\n        byteOffset += Uint32Array.BYTES_PER_ELEMENT;\n\n        b3dmHeader.byteLength = view.getUint32(byteOffset, true);\n        byteOffset += Uint32Array.BYTES_PER_ELEMENT;\n\n        b3dmHeader.FTJSONLength = view.getUint32(byteOffset, true);\n        byteOffset += Uint32Array.BYTES_PER_ELEMENT;\n\n        b3dmHeader.FTBinaryLength = view.getUint32(byteOffset, true);\n        byteOffset += Uint32Array.BYTES_PER_ELEMENT;\n\n        b3dmHeader.BTJSONLength = view.getUint32(byteOffset, true);\n        byteOffset += Uint32Array.BYTES_PER_ELEMENT;\n\n        b3dmHeader.BTBinaryLength = view.getUint32(byteOffset, true);\n        byteOffset += Uint32Array.BYTES_PER_ELEMENT;\n\n        if (b3dmHeader.BTJSONLength > 0) {\n            const sizeBegin = 28 + b3dmHeader.FTJSONLength + b3dmHeader.FTBinaryLength;\n            batchTable = BatchTable.parse(\n                buffer.slice(sizeBegin, b3dmHeader.BTJSONLength + sizeBegin),\n                textDecoder);\n        }\n        // TODO: missing feature and batch table\n        return new Promise((resolve/* , reject */) => {\n            const onload = (gltf) => {\n                for (const scene of gltf.scenes) {\n                    scene.traverse(filterUnsupportedSemantics);\n                }\n                // Rotation managed\n                if (gltfUpAxis === undefined || gltfUpAxis === 'Y') {\n                    gltf.scene.applyMatrix(matrixChangeUpVectorZtoY);\n                } else if (gltfUpAxis === 'X') {\n                    gltf.scene.applyMatrix(matrixChangeUpVectorZtoX);\n                }\n\n                // RTC managed\n                applyOptionalCesiumRTC(buffer.slice(28 + b3dmHeader.FTJSONLength +\n                    b3dmHeader.FTBinaryLength + b3dmHeader.BTJSONLength +\n                    b3dmHeader.BTBinaryLength), gltf.scene, textDecoder);\n\n                const b3dm = { gltf, batchTable };\n                resolve(b3dm);\n            };\n            this.glTFLoader.parse(buffer.slice(28 + b3dmHeader.FTJSONLength +\n                b3dmHeader.FTBinaryLength + b3dmHeader.BTJSONLength +\n                b3dmHeader.BTBinaryLength), onload);\n        });\n    } else {\n        throw new Error('Invalid b3dm file.');\n    }\n};\n\nexport default B3dmLoader;\n"]}