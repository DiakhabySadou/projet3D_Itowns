{"version":3,"sources":["../../../src/Renderer/ThreeExtended/Feature2Texture.js"],"names":["THREE","pt","Vector2","drawPolygon","ctx","vertices","origin","dimension","properties","style","length","scale","canvas","width","x","y","beginPath","_values","multiply","moveTo","shift","vertice","lineTo","stroke","strokeStyle","lineWidth","strokeWidth","globalAlpha","strokeOpacity","fill","closePath","fillStyle","fillOpacity","drawPoint","arc","radius","Math","PI","drawFeature","feature","extent","coordinates","geometry","slice","type","intersectsExtent","globalCompositeOperation","drawFeatureCollection","collection","geometries","features","id","featureVertices","polygon","offset","count","createTextureFromFeature","sizeTexture","west","DEGREE","south","dimensions","c","document","createElement","height","getContext","texture","Texture","flipY","generateMipmaps","magFilter","LinearFilter","minFilter","needsUpdate"],"mappings":"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","file":"Feature2Texture.js","sourcesContent":["import * as THREE from 'three';\nimport { UNIT } from '../../Core/Geographic/Coordinates';\n\nconst pt = new THREE.Vector2();\n\nfunction drawPolygon(ctx, vertices, origin, dimension, properties, style = {}) {\n    if (vertices.length === 0) {\n        return;\n    }\n    // compute scale transformation extent to canvas\n    //\n    const scale = new THREE.Vector2(ctx.canvas.width / dimension.x, ctx.canvas.width / dimension.y);\n    ctx.beginPath();\n    pt.x = vertices[0]._values[0] - origin.x;\n    pt.y = vertices[0]._values[1] - origin.y;\n    pt.multiply(scale);\n    // Place the first point\n    ctx.moveTo(pt.x, pt.y);\n    vertices.shift();\n\n    // build path\n    for (const vertice of vertices) {\n        pt.x = vertice._values[0] - origin.x;\n        pt.y = vertice._values[1] - origin.y;\n        pt.multiply(scale);\n        ctx.lineTo(pt.x, pt.y);\n    }\n\n    // draw line polygon\n    if (style.stroke || properties.stroke) {\n        ctx.strokeStyle = style.stroke || properties.stroke;\n        ctx.lineWidth = style.strokeWidth || properties['stroke-width'] || 2.0;\n        ctx.globalAlpha = style.strokeOpacity || properties['stroke-opacity'] || 1.0;\n        ctx.stroke();\n    }\n\n    // fill polygon\n    if (style.fill || properties.fill) {\n        ctx.closePath();\n        ctx.fillStyle = style.fill || properties.fill;\n        ctx.globalAlpha = style.fillOpacity || properties['fill-opacity'] || 1.0;\n        ctx.fill();\n    }\n}\n\nfunction drawPoint(ctx, vertice, origin, dimension, style = {}) {\n    const scale = new THREE.Vector2(ctx.canvas.width / dimension.x, ctx.canvas.width / dimension.y);\n    pt.x = vertice._values[0] - origin.x;\n    pt.y = vertice._values[1] - origin.y;\n    pt.multiply(scale);\n\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, style.radius || 3, 0, 2 * Math.PI, false);\n    ctx.fillStyle = style.fill || 'white';\n    ctx.fill();\n    ctx.lineWidth = style.lineWidth || 1.0;\n    ctx.strokeStyle = style.stroke || 'red';\n    ctx.stroke();\n}\n\nfunction drawFeature(ctx, feature, origin, dimension, extent, style = {}) {\n    const properties = feature.properties;\n    const coordinates = feature.geometry.coordinates.slice();\n    if (feature.geometry.type === 'point') {\n        drawPoint(ctx, coordinates[0], origin, dimension, style);\n    } else if (feature.geometry.extent.intersectsExtent(extent)) {\n        ctx.globalCompositeOperation = 'destination-over';\n        drawPolygon(ctx, coordinates, origin, dimension, properties, style);\n    }\n}\n\nfunction drawFeatureCollection(ctx, collection, origin, dimension, extent, style = {}) {\n    for (const features of collection.geometries) {\n        /* eslint-disable guard-for-in */\n        if (features.extent.intersectsExtent(extent)) {\n            for (const id in features.featureVertices) {\n                const polygon = features.featureVertices[id];\n                const properties = collection.features[id].properties;\n                const coordinates = features.coordinates.slice(polygon.offset, polygon.offset + polygon.count);\n                if (features.type === 'point') {\n                    drawPoint(ctx, coordinates[0], origin, dimension, style);\n                } else if (polygon.extent.intersectsExtent(extent)) {\n                    ctx.globalCompositeOperation = 'destination-over';\n                    drawPolygon(ctx, coordinates, origin, dimension, properties, style);\n                }\n            }\n        }\n    }\n    /* eslint-enable guard-for-in */\n}\n\nexport default {\n    createTextureFromFeature(feature, extent, sizeTexture, style) {\n        // A texture is instancied drawn canvas\n        // origin and dimension are used to transform the feature's coordinates to canvas's space\n        const origin = new THREE.Vector2(extent.west(UNIT.DEGREE), extent.south(UNIT.DEGREE));\n        const dimension = extent.dimensions(UNIT.DEGREE);\n        const c = document.createElement('canvas');\n\n        c.width = sizeTexture;\n        c.height = sizeTexture;\n        const ctx = c.getContext('2d');\n\n        // Draw the canvas\n        if (feature.geometries) {\n            drawFeatureCollection(ctx, feature, origin, dimension, extent, style);\n        } else {\n            drawFeature(ctx, feature, origin, dimension, extent, style);\n        }\n\n        const texture = new THREE.Texture(c);\n        texture.flipY = false;\n        texture.generateMipmaps = false;\n        texture.magFilter = THREE.LinearFilter;\n        texture.minFilter = THREE.LinearFilter;\n        texture.needsUpdate = true;\n        return texture;\n    },\n};\n\n"]}