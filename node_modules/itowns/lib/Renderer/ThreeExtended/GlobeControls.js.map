{"version":3,"sources":["../../../src/Renderer/ThreeExtended/GlobeControls.js"],"names":["THREE","CONTROL_KEYS","LEFT","UP","RIGHT","BOTTOM","SPACE","SHIFT","CTRL","S","presiceSlerp","qb","t","copy","x","_x","y","_y","z","_z","w","_w","cosHalfTheta","sinHalfTheta","Math","sqrt","halfTheta","atan2","ratioA","sin","ratioB","onChangeCallback","EPS","rotateStart","Vector2","rotateEnd","rotateDelta","spherical","Spherical","snapShotSpherical","PI","sphericalDelta","sphericalTo","orbit","scale","panStart","panEnd","panDelta","panOffset","Vector3","offset","dollyStart","dollyEnd","dollyDelta","quatGlobe","Quaternion","cameraTargetOnGlobe","Object3D","movingCameraTargetOnGlobe","animatedScale","positionObject","quaterionX","setFromAxisAngle","newPosition","object","up","DefaultUp","position","lookAt","clone","multiplyScalar","quaternion","multiply","updateMatrixWorld","setCameraTargetObjectPosition","matrixWorldInverse","getInverse","matrixWorld","ctrl","progress","qDelta","dampingFactor","target","distance","lengthTarget","lengthCamera","enableAnimation","player","lastRotation","lastTimeMouseMove","dampingMoveAnimatedExpression","damp","root","updateAltitudeCoordinate","coordinate","layer","result","getElevationValueAt","diffAltitude","_values","altitude","clampToGround","targetGeoPosition","view","wgs84TileLayer","as","xyz","length","setLength","snapShotCamera","zoomCenterAnimatedExpression","set","pow","animationOrbitExpression","radius","theta","phi","animationDampingMove","duration","expression","name","animationZoomCenter","animationOrbit","dampingOrbitalMvt","Matrix4","panVector","lastPosition","lastQuaternion","state","initialTarget","initialPosition","initialZoom","ptScreenClick","sizeRendering","tSphere","picking","normal","enableTargetHelper","pickingHelper","_handlerMouseMove","_handlerMouseUp","enableEventPositionChanged","CONTROL_EVENTS","PAN_CHANGED","ORIENTATION_CHANGED","RANGE_CHANGED","CAMERA_TARGET_CHANGED","SnapCamera","camera","projectionMatrix","invProjectionMatrix","init","shot","objectToSnap","matrix","updateRay","ray","mouse","origin","direction","multiplyMatrices","applyMatrix4","sub","normalize","defer","deferedPromise","promise","resolve","reject","initPromise","GlobeControls","options","_view","camera3D","domElement","mainLoop","gfxEngine","renderer","waitSceneLoaded","notifyChange","addEventListener","enabled","zoomSpeed","minDistance","maxDistance","minZoom","maxZoom","Infinity","rotateSpeed","keyPanSpeed","autoRotate","autoRotateSpeed","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","handleCollision","minDistanceCollision","enableKeys","enableDamping","setRadius","getWindowSize","FOV","fov","startEvent","type","endEvent","updateCamera","width","clientWidth","height","clientHeight","self","addFrameRequester","update","dim","sizeDiff","getAutoRotationAngle","getDollyScale","rotateLeft","angle","undefined","rotateUp","panLeft","te","elements","add","panUp","mouseToPan","deltaX","deltaY","element","document","body","PerspectiveCamera","getCameraTargetPosition","targetDistance","tan","aspect","OrthographicCamera","right","left","top","bottom","dollyIn","dollyScale","zoom","max","min","updateProjectionMatrix","dollyOut","quaterPano","quaterAxis","axisX","minDistanceZ","getMinDistanceCameraBoundingSphereObbsUp","tile","level","children","geometry","obb","OBB","sphereCamera","isSphereAboveXYBox","box3D","level0Nodes","traverse","states","MOVE_GLOBE","translateY","inerty","applyQuaternion","lerp","PAN","PANORAMIC","worldToLocal","inverse","localToWorld","setFromVector3","NONE","dynamicRadius","slowdownLimit","contraryLimit","minContraintPhi","slowdownZone","slowdownFactor","contraryPhi","asin","clamp","contraryFactor","makeSafe","setFromSpherical","distanceToSquared","dot","ORBIT","isStopped","playLater","bind","getSphericalDelta","coordTarget","referenceCrs","coordTile","reposition","delta","updateCameraTargetOnGlobe","previousCameraTargetOnGlobe","subVectors","pickingPosition","getPickingPositionFromDepth","distanceTarget","distanceTo","addVectors","tileCrs","extent","crs","abs","dispatchEvent","previous","tilt","heading","new","previousRange","newRange","getRange","range","cameraTarget","updateHelper","getPickingPositionOnSphere","updateSpherePicking","Ray","point","screenCoord","its","intersectWithRay","push","onMouseMove","event","isPlaying","stop","preventDefault","clientX","offsetLeft","clientY","offsetTop","DOLLY","intersection","normalizedIntersection","setFromUnitVectors","Date","now","splice","onMouseUp","mouseButton","MOUSE","keyboard","enable","MIDDLE","TOUCH_ROTATE","finger","TOUCH_DOLLY","TOUCH_PAN","SELECT","Object","defineProperty","get","Error","inputToState","key","touchToState","onMouseDown","then","button","currentKey","selectNodeAt","removeEventListener","play","resetControls","equals","wheelTimer","onMouseWheel","clearTimeout","stopPropagation","wheelDelta","detail","setTimeout","updateCameraTransformation","onKeyUp","onKeyDown","keyCode","onTouchStart","touches","pageX","pageY","dx","dy","onTouchMove","onTouchEnd","controlState","updateCameraTarget","bkDamping","dispose","window","isAnimationEnabled","console","warn","setCameraTargetPosition","isAnimationWithoutDamping","animation","e","scene","prototype","EventDispatcher","constructor","getRangeFromScale","pitch","alpha","setTilt","isAnimated","setOrbitalPosition","setHeading","setRange","geoPosition","getCameraTargetGeoPosition","deltaPhi","getTiltRad","deltaTheta","getHeadingRad","deltaRange","postUpdate","errorRange","moveOrbitalPosition","destSpherical","cd","vFrom","vTo","getTilt","getHeading","radToDeg","getPolarAngle","getAzimuthalAngle","moveTarget","pan","pVector","getCameraOrientation","tiltCam","headingCam","getCameraLocation","setAnimationEnabled","getZoom","setZoom","getScale","unitProjection","pixelsToMeters","pixels","pixelPitch","scaled","pixelsToDegrees","chord","metersToPixels","value","setScale","setCameraTargetGeoPosition","coordinates","EPSG_4326","longitude","latitude","setCameraTargetGeoPositionAdvanced","pickGeoPosition","screenCoords","pickedPosition","reset"],"mappings":"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","file":"GlobeControls.js","sourcesContent":["// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nimport * as THREE from 'three';\nimport Sphere from '../../Core/Math/Sphere';\nimport AnimationPlayer, { Animation, AnimatedExpression } from '../../Core/AnimationPlayer';\nimport Coordinates, { C, ellipsoidSizes } from '../../Core/Geographic/Coordinates';\nimport { computeTileZoomFromDistanceCamera, computeDistanceCameraFromTileZoom } from '../../Process/GlobeTileProcessing';\nimport DEMUtils from './../../utils/DEMUtils';\n\n// TODO:\n// Recast touch for globe\n// Fix target problem with pan and panoramic (when target isn't on globe)\n// Fix problem with space\n\n// FIXME:\n// when move globe in damping orbit, there isn't move!!\n\n// The control's keys\nconst CONTROL_KEYS = {\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    BOTTOM: 40,\n    SPACE: 32,\n    SHIFT: 16,\n    CTRL: 17,\n    S: 83,\n};\n\n// TODO: can be optimize for some uses\nvar presiceSlerp = function presiceSlerp(qb, t) {\n    if (t === 0) {\n        return this;\n    }\n\n    if (t === 1) {\n        return this.copy(qb);\n    }\n\n    const x = this._x;\n    const y = this._y;\n    const z = this._z;\n    const w = this._w;\n\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n        this._w = -qb._w;\n        this._x = -qb._x;\n        this._y = -qb._y;\n        this._z = -qb._z;\n\n        cosHalfTheta = -cosHalfTheta;\n    } else {\n        this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n        this._w = w;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n\n        return this;\n    }\n\n    const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;\n    const ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\n    this._w = (w * ratioA + this._w * ratioB);\n    this._x = (x * ratioA + this._x * ratioB);\n    this._y = (y * ratioA + this._y * ratioB);\n    this._z = (z * ratioA + this._z * ratioB);\n\n    this.onChangeCallback();\n\n    return this;\n};\n\n// private members\nconst EPS = 0.000001;\n\n// Orbit\nconst rotateStart = new THREE.Vector2();\nconst rotateEnd = new THREE.Vector2();\nconst rotateDelta = new THREE.Vector2();\nconst spherical = new THREE.Spherical(1.0, 0.01, 0);\nconst snapShotSpherical = new THREE.Spherical(1.0, 0.01, Math.PI * 0.5);\nconst sphericalDelta = new THREE.Spherical(1.0, 0, 0);\nconst sphericalTo = new THREE.Spherical();\nconst orbit = {\n    spherical,\n    sphericalDelta,\n    sphericalTo,\n    scale: 1,\n};\n\n// Pan\nconst panStart = new THREE.Vector2();\nconst panEnd = new THREE.Vector2();\nconst panDelta = new THREE.Vector2();\nconst panOffset = new THREE.Vector3();\n\nconst offset = new THREE.Vector3();\n\n// Dolly\nconst dollyStart = new THREE.Vector2();\nconst dollyEnd = new THREE.Vector2();\nconst dollyDelta = new THREE.Vector2();\n\n// Globe move\nconst quatGlobe = new THREE.Quaternion();\nconst cameraTargetOnGlobe = new THREE.Object3D();\nconst movingCameraTargetOnGlobe = new THREE.Vector3();\nvar animatedScale = 0.0;\n\n// Position object on globe\nconst positionObject = (function getPositionObjectFn()\n{\n    const quaterionX = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI / 2);\n    return function positionObject(newPosition, object) {\n        object.up = THREE.Object3D.DefaultUp;\n        object.position.copy(newPosition);\n        object.lookAt(newPosition.clone().multiplyScalar(1.1));\n        object.quaternion.multiply(quaterionX);\n        object.updateMatrixWorld();\n    };\n}());\n\n// set new camera target on globe\nfunction setCameraTargetObjectPosition(newPosition) {\n    // Compute the new target position\n    positionObject(newPosition, cameraTargetOnGlobe);\n\n    cameraTargetOnGlobe.matrixWorldInverse.getInverse(cameraTargetOnGlobe.matrixWorld);\n}\n\nconst ctrl = {\n    progress: 0,\n    quatGlobe,\n    qDelta: new THREE.Quaternion(),\n    dampingFactor: 0.25,\n    target: cameraTargetOnGlobe.position,\n    distance: 0,\n    lengthTarget: 0,\n    lengthCamera: 0,\n};\n\nctrl.qDelta.presiceSlerp = presiceSlerp;\nquatGlobe.presiceSlerp = presiceSlerp;\n\n// Animation\n\nlet enableAnimation = true;\n\n// Animation player\nvar player = null;\n// Save 2 last rotation globe for damping\nvar lastRotation = [];\n// Save the last time of mouse move for damping\nvar lastTimeMouseMove = 0;\n\n// Expression used to damp camera's moves\nvar dampingMoveAnimatedExpression = (function getDampMoveAniExprFn() {\n    const damp = new THREE.Quaternion(0, 0, 0, 1);\n    return function dampingMoveAnimatedExpression(root) {\n        root.qDelta.presiceSlerp(damp, root.dampingFactor * 0.2);\n        root.quatGlobe.multiply(root.qDelta);\n    };\n}());\n\nfunction updateAltitudeCoordinate(coordinate, layer) {\n    // TODO : save last tile to boost compute\n    const result = DEMUtils.getElevationValueAt(layer, coordinate);\n    let diffAltitude = 0;\n    if (result && result.z != coordinate._values[2]) {\n        diffAltitude = coordinate.altitude() - result.z;\n        coordinate._values[2] = result.z < 0 ? 0 : result.z;\n    }\n    return diffAltitude;\n}\n\nfunction clampToGround(root) {\n    // diff altitude\n    if (updateAltitudeCoordinate(root.targetGeoPosition, root.view.wgs84TileLayer) != 0) {\n        root.distance = root.lengthTarget - root.targetGeoPosition.as('EPSG:4978').xyz().length();\n    }\n    // translation\n    root.target.setLength(root.lengthTarget - root.distance * root.progress);\n    root.snapShotCamera.position.setLength(root.lengthCamera - root.distance * root.progress);\n}\n\n// Expression used to animate camera's moves and zoom\nfunction zoomCenterAnimatedExpression(root, progress) {\n    // Rotation\n    root.quatGlobe.set(0, 0, 0, 1);\n    root.progress = 1 - Math.pow((1 - (Math.sin((progress - 0.5) * Math.PI) * 0.5 + 0.5)), 2);\n    root.quatGlobe.presiceSlerp(root.qDelta, root.progress);\n    // clamp\n    clampToGround(root);\n}\n\n// Expression used to damp camera's moves\nvar animationOrbitExpression = function animationOrbitExpression(root, progress) {\n    root.scale = 1.0 - (1.0 - root.sphericalTo.radius / root.spherical.radius) * progress;\n    root.sphericalDelta.theta = root.sphericalTo.theta;\n    root.sphericalDelta.phi = root.sphericalTo.phi;\n};\n\n// Animations\nconst animationDampingMove = new AnimatedExpression({ duration: 120, root: ctrl, expression: dampingMoveAnimatedExpression, name: 'damping-move' });\nconst animationZoomCenter = new AnimatedExpression({ duration: 45, root: ctrl, expression: zoomCenterAnimatedExpression, name: 'Zoom Center' });\nconst animationOrbit = new AnimatedExpression({ duration: 30, root: orbit, expression: animationOrbitExpression, name: 'set Orbit' });\nconst dampingOrbitalMvt = new Animation({ duration: 60, name: 'damping-orbit' });\n\n// Replace matrix float by matrix double\ncameraTargetOnGlobe.matrixWorldInverse = new THREE.Matrix4();\n\n// Pan Move\nconst panVector = new THREE.Vector3();\n\n// Save last transformation\nconst lastPosition = new THREE.Vector3();\nconst lastQuaternion = new THREE.Quaternion();\n\n// State control\nvar state;\n\n// Initial transformation\nvar initialTarget;\nvar initialPosition;\nvar initialZoom;\n\n// picking\nconst ptScreenClick = new THREE.Vector2();\nconst sizeRendering = new THREE.Vector2();\n\n// Tangent sphere to ellipsoid\nconst tSphere = new Sphere();\ntSphere.picking = { position: new THREE.Vector3(), normal: new THREE.Vector3() };\n\n// Set to true to enable target helper\nconst enableTargetHelper = false;\nlet pickingHelper;\n\nif (enableTargetHelper) {\n    pickingHelper = new THREE.AxisHelper(500000);\n}\n\n// Handle function\nvar _handlerMouseMove;\nvar _handlerMouseUp;\n\n// Event\nlet enableEventPositionChanged = true;\n\n/**\n * Globe control pan event. Fires after camera pan\n * @event GlobeControls#pan-changed\n * @property target {GlobeControls} dispatched on controls\n * @property type {string} orientation-changed\n */\n/**\n * Globe control orientation event. Fires when camera's orientation change\n * @event GlobeControls#orientation-changed\n * @property new {object}\n * @property new.tilt {number} the new value of the tilt of the camera\n * @property new.heading {number} the new value of the heading of the camera\n * @property previous {object}\n * @property previous.tilt {number} the previous value of the tilt of the camera\n * @property previous.heading {number} the previous value of the heading of the camera\n * @property target {GlobeControls} dispatched on controls\n * @property type {string} orientation-changed\n */\n /**\n * Globe control range event. Fires when camera's range to target change\n * @event GlobeControls#range-changed\n * @property new {object}\n * @property new.range {number} the new value of the range\n * @property previous {object}\n * @property previous.range {number} the previous value of the range\n * @property target {GlobeControls} dispatched on controls\n * @property type {string} range-changed\n */\n /**\n * Globe control camera's target event. Fires when camera's target change\n * @event GlobeControls#camera-target-changed\n * @property new {object}\n * @property new.cameraTarget {Coordinates} the new camera's target coordinates\n * @property new.cameraTarget.crs {string} the crs of the camera's target coordinates\n * @property new.cameraTarget.values {array}\n * @property new.cameraTarget.values.0 {number} the new X coordinates\n * @property new.cameraTarget.values.1 {number} the new Y coordinates\n * @property new.cameraTarget.values.2 {number} the new Z coordinates\n * @property new.heading {number} the new value of the heading of the camera\n * @property previous {object}\n * @property previous.cameraTarget {Coordinates} the previous camera's target coordinates\n * @property previous.cameraTarget.crs {string} the crs of the camera's target coordinates\n * @property previous.cameraTarget.values {array}\n * @property previous.cameraTarget.values.0 {number} the previous X coordinates\n * @property previous.cameraTarget.values.1 {number} the previous Y coordinates\n * @property previous.cameraTarget.values.2 {number} the previous Z coordinates\n * @property target {GlobeControls} dispatched on controls\n * @property type {string} camera-target-changed\n */\n\n/**\n * globe controls events\n * @property PAN_CHANGED {string} Fires after camera pan\n * @property ORIENTATION_CHANGED {string} Fires when camera's orientation change\n * @property RANGE_CHANGED {string} Fires when camera's range to target change\n * @property CAMERA_TARGET_CHANGED {string} Fires when camera's target change\n */\n\nexport const CONTROL_EVENTS = {\n    PAN_CHANGED: 'pan-changed',\n    ORIENTATION_CHANGED: 'orientation-changed',\n    RANGE_CHANGED: 'range-changed',\n    CAMERA_TARGET_CHANGED: 'camera-target-changed',\n};\n\n\n// SnapCamera saves transformation's camera\n// It's use to globe move\nfunction SnapCamera(camera) {\n    camera.updateMatrixWorld();\n\n    this.matrixWorld = new THREE.Matrix4();\n    this.projectionMatrix = new THREE.Matrix4();\n    this.invProjectionMatrix = new THREE.Matrix4();\n    this.position = new THREE.Vector3();\n\n    this.init = function init(camera) {\n        this.matrixWorld.copy(camera.matrixWorld);\n        this.projectionMatrix.copy(camera.projectionMatrix);\n        this.position.copy(camera.position);\n        this.invProjectionMatrix.getInverse(this.projectionMatrix);\n    };\n\n    this.init(camera);\n\n    this.shot = function shot(objectToSnap) {\n        objectToSnap.updateMatrixWorld();\n        this.matrixWorld.copy(objectToSnap.matrixWorld);\n        this.position.copy(objectToSnap.position);\n    };\n\n    const matrix = new THREE.Matrix4();\n\n    this.updateRay = function updateRay(ray, mouse) {\n        ray.origin.copy(this.position);\n        ray.direction.set(mouse.x, mouse.y, 0.5);\n        matrix.multiplyMatrices(this.matrixWorld, this.invProjectionMatrix);\n        ray.direction.applyMatrix4(matrix);\n        ray.direction.sub(ray.origin).normalize();\n    };\n}\n\nvar snapShotCamera = null;\n\nfunction defer() {\n    const deferedPromise = {};\n    deferedPromise.promise = new Promise((resolve, reject) => {\n        deferedPromise.resolve = resolve;\n        deferedPromise.reject = reject;\n    });\n    return deferedPromise;\n}\n\nlet initPromise;\n\n/* globals document,window */\n\n/**\n * @class\n * @param {GlobeView} view\n * @param {*} target\n * @param {number} radius\n * @param {options} options\n */\nfunction GlobeControls(view, target, radius, options = {}) {\n    player = new AnimationPlayer();\n    this._view = view;\n    this.camera = view.camera.camera3D;\n    this.domElement = view.mainLoop.gfxEngine.renderer.domElement;\n\n    snapShotCamera = new SnapCamera(this.camera);\n    ctrl.snapShotCamera = snapShotCamera;\n    ctrl.view = view;\n\n    this.waitSceneLoaded = function waitSceneLoaded() {\n        this._view.notifyChange();\n        const deferedPromise = defer();\n        this._view.mainLoop.addEventListener('command-queue-empty', () => {\n            deferedPromise.resolve();\n        });\n        return deferedPromise.promise;\n    };\n\n    // Set to false to disable this control\n    this.enabled = true;\n\n    // This option actually enables dollying in and out; left as \"zoom\" for\n    // backwards compatibility\n    this.zoomSpeed = options.zoomSpeed || 2.0;\n\n    // Limits to how far you can dolly in and out ( PerspectiveCamera only )\n    this.minDistance = options.minDistance || 300;\n    this.maxDistance = options.maxDistance || radius * 8.0;\n\n    // Limits to how far you can zoom in and out ( OrthographicCamera only )\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n\n    // Set to true to disable this control\n    this.rotateSpeed = options.rotateSpeed || 0.25;\n\n    // Set to true to disable this control\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n\n    // Set to true to automatically rotate around the target\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    // TODO Warning minPolarAngle = 0.01 -> it isn't possible to be perpendicular on Globe\n    this.minPolarAngle = 0.01; // radians\n    this.maxPolarAngle = Math.PI * 0.47; // radians\n\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n    this.minAzimuthAngle = -Infinity; // radians\n    this.maxAzimuthAngle = Infinity; // radians\n\n    // Set collision options\n    this.handleCollision = typeof (options.handleCollision) !== 'undefined' ? options.handleCollision : true;\n    this.minDistanceCollision = 60;\n\n    // Set to true to disable use of the keys\n    this.enableKeys = true;\n\n    // Enable Damping\n    this.enableDamping = true;\n\n    if (enableTargetHelper) {\n        this.pickingHelper = new THREE.AxisHelper(500000);\n    }\n\n    // Radius tangent sphere\n    tSphere.setRadius(radius);\n    spherical.radius = tSphere.radius;\n\n    sizeRendering.copy(view.mainLoop.gfxEngine.getWindowSize());\n    sizeRendering.FOV = this.camera.fov;\n    // Note A\n    // TODO: test before remove test code\n    // so camera.up is the orbit axis\n    // var quat = new THREE.Quaternion().setFromUnitVectors(camera.up, new THREE.Vector3(0, 1, 0));\n    // var quatInverse = quat.clone().inverse();\n\n    this.startEvent = {\n        type: 'start',\n    };\n    this.endEvent = {\n        type: 'end',\n    };\n\n    this.updateCamera = function updateCamera() {\n        snapShotCamera.init(this.camera);\n        sizeRendering.width = this.domElement.clientWidth;\n        sizeRendering.height = this.domElement.clientHeight;\n        sizeRendering.FOV = this.camera.fov;\n    };\n\n    const self = this;\n    const resizeHandler = {\n        update() {\n            const dim = self._view.mainLoop.gfxEngine.getWindowSize();\n            const sizeDiff = (dim.width != sizeRendering.width || dim.height != sizeRendering.height);\n            if (sizeDiff) {\n                self.updateCamera();\n            }\n        },\n    };\n    this._view.addFrameRequester(resizeHandler);\n\n    this.getAutoRotationAngle = function getAutoRotationAngle() {\n        return 2 * Math.PI / 60 / 60 * this.autoRotateSpeed;\n    };\n\n    this.getDollyScale = function getDollyScale() {\n        return Math.pow(0.95, this.zoomSpeed);\n    };\n\n    this.rotateLeft = function rotateLeft(angle) {\n        if (angle === undefined) {\n            angle = this.getAutoRotationAngle();\n        }\n        sphericalDelta.theta -= angle;\n    };\n\n    this.rotateUp = function rotateUp(angle) {\n        if (angle === undefined) {\n            angle = this.getAutoRotationAngle();\n        }\n\n        sphericalDelta.phi -= angle;\n    };\n\n    // pass in distance in world space to move left\n    this.panLeft = function panLeft(distance) {\n        var te = this.camera.matrix.elements;\n\n        // get X column of matrix\n        panOffset.set(te[0], te[1], te[2]);\n        panOffset.multiplyScalar(-distance);\n\n        panVector.add(panOffset);\n    };\n\n    // pass in distance in world space to move up\n    this.panUp = function panUp(distance) {\n        var te = this.camera.matrix.elements;\n\n        // get Y column of matrix\n        panOffset.set(te[4], te[5], te[6]);\n        panOffset.multiplyScalar(distance);\n\n        panVector.add(panOffset);\n    };\n\n    // pass in x,y of change desired in pixel space,\n    // right and down are positive\n    this.mouseToPan = function mouseToPan(deltaX, deltaY) {\n        var element = this.domElement === document ? this.domElement.body : this.domElement;\n\n        if (this.camera instanceof THREE.PerspectiveCamera) {\n            // perspective\n            var position = this.camera.position;\n\n            // var offset = position.clone().sub(this.target);\n            var offset = position.clone().sub(this.getCameraTargetPosition());\n\n            var targetDistance = offset.length();\n\n            // half of the fov is center to top of screen\n            targetDistance *= Math.tan((this.camera.fov / 2) * Math.PI / 180.0);\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            this.panLeft(2 * deltaX * targetDistance * this.camera.aspect / element.clientWidth);\n            this.panUp(2 * deltaY * targetDistance / element.clientHeight);\n        } else if (this.camera instanceof THREE.OrthographicCamera) {\n            // orthographic\n            this.panLeft(deltaX * (this.camera.right - this.camera.left) / element.clientWidth);\n            this.panUp(deltaY * (this.camera.top - this.camera.bottom) / element.clientHeight);\n        } else {\n\n            // camera neither orthographic or perspective\n            // console.warn('WARNING: GlobeControls.js encountered an unknown camera type - this.mouseToPan disabled.');\n\n        }\n    };\n\n    this.dollyIn = function dollyIn(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = this.getDollyScale();\n        }\n\n        if (this.camera instanceof THREE.PerspectiveCamera) {\n            orbit.scale /= dollyScale;\n        } else if (this.camera instanceof THREE.OrthographicCamera) {\n            this.camera.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.camera.zoom * dollyScale));\n            this.camera.updateProjectionMatrix();\n            this._view.notifyChange(true, this.camera);\n        } else {\n\n            // console.warn('WARNING: GlobeControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\n        }\n    };\n\n    this.dollyOut = function dollyOut(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = this.getDollyScale();\n        }\n\n        if (this.camera instanceof THREE.PerspectiveCamera) {\n            orbit.scale *= dollyScale;\n        } else if (this.camera instanceof THREE.OrthographicCamera) {\n            this.camera.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.camera.zoom / dollyScale));\n            this.camera.updateProjectionMatrix();\n            this._view.notifyChange(true, this.camera);\n        } else {\n\n            // console.warn('WARNING: GlobeControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\n        }\n    };\n\n    const quaterPano = new THREE.Quaternion();\n    const quaterAxis = new THREE.Quaternion();\n    const axisX = new THREE.Vector3(1, 0, 0);\n    let minDistanceZ = 0;\n\n    const getMinDistanceCameraBoundingSphereObbsUp = (tile) => {\n        if (tile.level > 10 && tile.children.length == 1 && tile.geometry) {\n            const obb = tile.OBB();\n            const sphereCamera = { position: this.camera.position.clone(), radius: this.minDistanceCollision };\n            if (obb.isSphereAboveXYBox(sphereCamera)) {\n                minDistanceZ = Math.min(sphereCamera.position.z - obb.box3D.max.z, minDistanceZ);\n            }\n        }\n    };\n\n    var update = function update() {\n        // We compute distance between camera's bounding sphere and geometry's obb up face\n        if (this.handleCollision) { // We check distance to the ground/surface geometry\n            // add minDistanceZ between camera's bounding and tiles's oriented bounding box (up face only)\n            // Depending on the distance of the camera with obbs, we add a slowdown or constrain to the movement.\n            // this constraint or deceleration is suitable for two types of movement MOVE_GLOBE and ORBIT.\n            // This constraint or deceleration inversely proportional to the camera/obb distance\n            if (this._view.wgs84TileLayer) {\n                minDistanceZ = Infinity;\n                for (const tile of this._view.wgs84TileLayer.level0Nodes) {\n                    tile.traverse(getMinDistanceCameraBoundingSphereObbsUp);\n                }\n            }\n        }\n        // MOVE_GLOBE\n        // Rotate globe with mouse\n        if (state === this.states.MOVE_GLOBE) {\n            if (minDistanceZ < 0) {\n                cameraTargetOnGlobe.translateY(-minDistanceZ);\n                snapShotCamera.position.setLength(snapShotCamera.position.length() - minDistanceZ);\n            } else if (minDistanceZ < this.minDistanceCollision) {\n                const inerty = 1.0 - minDistanceZ / this.minDistanceCollision;\n                const translateY = this.minDistanceCollision * inerty;\n                cameraTargetOnGlobe.translateY(translateY);\n                snapShotCamera.position.setLength(snapShotCamera.position.length() + translateY);\n            }\n            movingCameraTargetOnGlobe.copy(this.getCameraTargetPosition()).applyQuaternion(quatGlobe);\n            this.camera.position.copy(snapShotCamera.position).applyQuaternion(quatGlobe);\n            // combine zoom with move globe\n            if (ctrl.progress > 0) {\n                this.camera.position.lerp(movingCameraTargetOnGlobe, ctrl.progress * animatedScale);\n            }\n            this.camera.up.copy(movingCameraTargetOnGlobe.clone().normalize());\n        // PAN\n        // Move camera in projection plan\n        } else if (state === this.states.PAN) {\n            this.camera.position.add(panVector);\n            movingCameraTargetOnGlobe.add(panVector);\n            this.camera.up.copy(movingCameraTargetOnGlobe.clone().normalize());\n        // PANORAMIC\n        // Move target camera\n        } else if (state === this.states.PANORAMIC) {\n            // TODO: this part must be reworked\n            this.camera.worldToLocal(movingCameraTargetOnGlobe);\n            var normal = this.camera.position.clone().normalize().applyQuaternion(this.camera.quaternion.clone().inverse());\n            quaterPano.setFromAxisAngle(normal, sphericalDelta.theta).multiply(quaterAxis.setFromAxisAngle(axisX, sphericalDelta.phi));\n            movingCameraTargetOnGlobe.applyQuaternion(quaterPano);\n            this.camera.localToWorld(movingCameraTargetOnGlobe);\n            this.camera.up.copy(movingCameraTargetOnGlobe.clone().normalize());\n        } else {\n            // ZOOM/ORBIT\n            // Move Camera around the target camera\n\n            // TODO: test before remove test code see (Note A)\n            // offset.applyQuaternion( quat );\n\n            // get camera position in local space of target\n            offset.copy(this.camera.position).applyMatrix4(cameraTargetOnGlobe.matrixWorldInverse);\n\n            // angle from z-axis around y-axis\n            if (sphericalDelta.theta || sphericalDelta.phi) {\n                spherical.setFromVector3(offset);\n            }\n\n            if (this.autoRotate && state === this.states.NONE) {\n                this.rotateLeft(this.getAutoRotationAngle());\n            }\n            // far underground\n            const dynamicRadius = spherical.radius * Math.sin(this.minPolarAngle);\n            const slowdownLimit = dynamicRadius * 8;\n            const contraryLimit = dynamicRadius * 2;\n            const minContraintPhi = -0.01;\n\n            if (minDistanceZ < slowdownLimit && minDistanceZ > contraryLimit && sphericalDelta.phi > 0) {\n                // slowdown zone : slowdown sphericalDelta.phi\n                const slowdownZone = slowdownLimit - contraryLimit;\n                // the deeper the camera is in this zone, the bigger the factor is\n                const slowdownFactor = 1 - (slowdownZone - (minDistanceZ - contraryLimit)) / slowdownZone;\n                // apply slowdown factor on tilt mouvement\n                sphericalDelta.phi *= slowdownFactor * slowdownFactor;\n            } else if (minDistanceZ < contraryLimit && minDistanceZ > -contraryLimit && sphericalDelta.phi > minContraintPhi) {\n                // contraint zone : contraint sphericalDelta.phi\n                const contraryZone = 2 * contraryLimit;\n                // calculation of the angle of rotation which allows to leave this zone\n                let contraryPhi = -Math.asin((contraryLimit - minDistanceZ) * 0.25 / spherical.radius);\n                // clamp contraryPhi to make a less brutal exit\n                contraryPhi = THREE.Math.clamp(contraryPhi, minContraintPhi, 0);\n                // the deeper the camera is in this zone, the bigger the factor is\n                const contraryFactor = 1 - (contraryLimit - minDistanceZ) / contraryZone;\n                sphericalDelta.phi = THREE.Math.lerp(sphericalDelta.phi, contraryPhi, contraryFactor);\n                minDistanceZ -= Math.sin(sphericalDelta.phi) * spherical.radius;\n            }\n            spherical.theta += sphericalDelta.theta;\n            spherical.phi += sphericalDelta.phi;\n\n            // restrict spherical.theta to be between desired limits\n            spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, spherical.theta));\n\n            // restrict spherical.phi to be between desired limits\n            spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, spherical.phi));\n\n            spherical.radius = offset.length() * orbit.scale;\n\n            // restrict spherical.phi to be betwee EPS and PI-EPS\n            spherical.makeSafe();\n\n            // restrict radius to be between desired limits\n            spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, spherical.radius));\n\n            offset.setFromSpherical(spherical);\n\n            // if camera is underground, so move up camera\n            if (minDistanceZ < 0) {\n                offset.y -= minDistanceZ;\n                spherical.setFromVector3(offset);\n                sphericalDelta.phi = 0;\n            }\n\n            // rotate point back to \"camera-up-vector-is-up\" space\n            // offset.applyQuaternion( quatInverse );\n            this.camera.position.copy(cameraTargetOnGlobe.localToWorld(offset));\n        }\n\n        this.camera.lookAt(movingCameraTargetOnGlobe);\n\n        if (!this.enableDamping) {\n            sphericalDelta.theta = 0;\n            sphericalDelta.phi = 0;\n        } else {\n            sphericalDelta.theta *= (1 - ctrl.dampingFactor);\n            sphericalDelta.phi *= (1 - ctrl.dampingFactor);\n        }\n\n        orbit.scale = 1;\n        panVector.set(0, 0, 0);\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (lastPosition.distanceToSquared(this.camera.position) > EPS || 8 * (1 - lastQuaternion.dot(this.camera.quaternion)) > EPS) {\n            this._view.notifyChange(true, this.camera);\n\n            lastPosition.copy(this.camera.position);\n            lastQuaternion.copy(this.camera.quaternion);\n        }\n        // Launch animationdamping if mouse stops these movements\n        if (this.enableDamping && state === this.states.ORBIT && player.isStopped() && (sphericalDelta.theta > EPS || sphericalDelta.phi > EPS)) {\n            player.playLater(dampingOrbitalMvt, 2);\n        }\n    }.bind(this);\n\n    this.getSphericalDelta = function getSphericalDelta() {\n        return sphericalDelta;\n    };\n\n    const direction = new THREE.Vector3();\n    const coordTarget = new Coordinates(this._view.referenceCrs, 0, 0, 0);\n    const coordTile = new Coordinates(this._view.referenceCrs, 0, 0, 0);\n    const reposition = new THREE.Vector3();\n    const delta = 0.001;\n\n    const updateCameraTargetOnGlobe = function updateCameraTargetOnGlobe() {\n        const previousCameraTargetOnGlobe = cameraTargetOnGlobe.position.clone();\n\n        direction.subVectors(movingCameraTargetOnGlobe, this.camera.position);\n\n        const pickingPosition = view.getPickingPositionFromDepth();\n\n        // Position movingCameraTargetOnGlobe on DME\n        if (pickingPosition) {\n            const distanceTarget = pickingPosition.distanceTo(this.camera.position);\n            direction.setLength(distanceTarget);\n            movingCameraTargetOnGlobe.addVectors(this.camera.position, direction);\n        }\n        // correction of depth error\n        const tileCrs = this._view.wgs84TileLayer.extent.crs();\n        coordTarget.set(this._view.referenceCrs, movingCameraTargetOnGlobe).as(tileCrs, coordTile);\n        updateAltitudeCoordinate(coordTile, this._view.wgs84TileLayer);\n        coordTile.as(this._view.referenceCrs).xyz(reposition);\n        direction.setLength(reposition.distanceTo(this.camera.position));\n        movingCameraTargetOnGlobe.addVectors(this.camera.position, direction);\n\n        setCameraTargetObjectPosition(movingCameraTargetOnGlobe);\n\n        // update spherical from target\n        offset.copy(this.camera.position);\n        offset.applyMatrix4(cameraTargetOnGlobe.matrixWorldInverse);\n        spherical.setFromVector3(offset);\n\n        if (enableEventPositionChanged) {\n            if (state === this.states.ORBIT && (Math.abs(snapShotSpherical.phi - spherical.phi) > delta || Math.abs(snapShotSpherical.theta - spherical.theta) > delta)) {\n                this.dispatchEvent({\n                    type: CONTROL_EVENTS.ORIENTATION_CHANGED,\n                    previous: {\n                        tilt: snapShotSpherical.phi * 180 / Math.PI,\n                        heading: snapShotSpherical.theta * 180 / Math.PI,\n                    },\n                    new: {\n                        tilt: spherical.phi * 180 / Math.PI,\n                        heading: spherical.theta * 180 / Math.PI,\n                    },\n                });\n            } else if (state === this.states.PAN) {\n                this.dispatchEvent({\n                    type: CONTROL_EVENTS.PAN_CHANGED,\n                });\n            }\n\n            const previousRange = snapShotSpherical.radius;\n            const newRange = this.getRange();\n            if (Math.abs(newRange - previousRange) / previousRange > 0.001) {\n                this.dispatchEvent({\n                    type: CONTROL_EVENTS.RANGE_CHANGED,\n                    previous: { range: previousRange },\n                    new: { range: newRange },\n                });\n            }\n\n            if (cameraTargetOnGlobe.position.distanceTo(previousCameraTargetOnGlobe) / spherical.radius > delta) {\n                this.dispatchEvent({\n                    type: CONTROL_EVENTS.CAMERA_TARGET_CHANGED,\n                    previous: { cameraTarget: new Coordinates(this._view.referenceCrs, previousCameraTargetOnGlobe) },\n                    new: { cameraTarget: new Coordinates(this._view.referenceCrs, cameraTargetOnGlobe.position) },\n                });\n            }\n            snapShotSpherical.copy(spherical);\n        }\n\n        state = this.states.NONE;\n        lastRotation = [];\n        if (enableTargetHelper) {\n            this._view.notifyChange(true, cameraTargetOnGlobe);\n        }\n    };\n\n    // Update helper\n    var updateHelper = enableTargetHelper ? function updateHelper(position, helper) {\n        positionObject(position, helper);\n        this._view.notifyChange(true, cameraTargetOnGlobe);\n    } : function empty() {};\n\n    this.getPickingPositionOnSphere = function getPickingPositionOnSphere() {\n        return tSphere.picking.position;\n    };\n\n    // Update radius's sphere : the sphere must cross the point\n    // Return intersection with mouse and sphere\n    var updateSpherePicking = (function getUpdateSpherePicking() {\n        var mouse = new THREE.Vector2();\n        var ray = new THREE.Ray();\n\n        return function updateSpherePicking(point, screenCoord) {\n            tSphere.setRadius(point.length());\n\n            mouse.x = (screenCoord.x / sizeRendering.width) * 2 - 1;\n            mouse.y = -(screenCoord.y / sizeRendering.height) * 2 + 1;\n\n            snapShotCamera.updateRay(ray, mouse);\n            // pick position on tSphere\n            const its = tSphere.intersectWithRay(ray);\n            if (its != undefined) {\n                tSphere.picking.position.copy(its);\n                tSphere.picking.normal = tSphere.picking.position.clone().normalize();\n\n                lastRotation.push(tSphere.picking.normal);\n                updateHelper.bind(this)(tSphere.picking.position, pickingHelper);\n            }\n        };\n    }());\n\n    var onMouseMove = (function getOnMouseMoveFn() {\n        var ray = new THREE.Ray();\n        var mouse = new THREE.Vector2();\n\n        return function onMouseMove(event)\n        {\n            if (player.isPlaying()) {\n                player.stop();\n            }\n            if (this.enabled === false) return;\n\n            event.preventDefault();\n\n            if (state === this.states.ORBIT || state === this.states.PANORAMIC) {\n                rotateEnd.set(event.clientX - event.target.offsetLeft, event.clientY - event.target.offsetTop);\n                rotateDelta.subVectors(rotateEnd, rotateStart);\n\n                this.rotateLeft(2 * Math.PI * rotateDelta.x / sizeRendering.width * this.rotateSpeed);\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\n                this.rotateUp(2 * Math.PI * rotateDelta.y / sizeRendering.height * this.rotateSpeed);\n\n                rotateStart.copy(rotateEnd);\n            } else if (state === this.states.DOLLY) {\n                dollyEnd.set(event.clientX - event.target.offsetLeft, event.clientY - event.target.offsetTop);\n                dollyDelta.subVectors(dollyEnd, dollyStart);\n\n                if (dollyDelta.y > 0) {\n                    this.dollyIn();\n                } else if (dollyDelta.y < 0) {\n                    this.dollyOut();\n                }\n\n                dollyStart.copy(dollyEnd);\n            } else if (state === this.states.PAN) {\n                panEnd.set(event.clientX - event.target.offsetLeft, event.clientY - event.target.offsetTop);\n                panDelta.subVectors(panEnd, panStart);\n\n                this.mouseToPan(panDelta.x, panDelta.y);\n\n                panStart.copy(panEnd);\n            } else if (state === this.states.MOVE_GLOBE) {\n                mouse.x = ((event.clientX - event.target.offsetLeft) / sizeRendering.width) * 2 - 1;\n                mouse.y = -((event.clientY - event.target.offsetTop) / sizeRendering.height) * 2 + 1;\n\n                snapShotCamera.updateRay(ray, mouse);\n\n                var intersection = tSphere.intersectWithRay(ray);\n\n                // If there's intersection then move globe else we stop the move\n                if (intersection) {\n                    var normalizedIntersection = intersection.normalize();\n                    quatGlobe.setFromUnitVectors(normalizedIntersection, tSphere.picking.normal);\n                    // backups last move globe for damping\n                    lastRotation.push(normalizedIntersection.clone());\n                    lastTimeMouseMove = Date.now();\n                    // Remove unnecessary movements backups\n                    if (lastRotation.length > 2) {\n                        lastRotation.splice(0, 1);\n                    }\n                } else {\n                    onMouseUp.bind(this)();\n                }\n            }\n\n            if (state !== this.states.NONE) {\n                update();\n            }\n        };\n    }());\n\n    this.states = {\n        NONE: {},\n        ORBIT: {\n            mouseButton: THREE.MOUSE.LEFT,\n            keyboard: CONTROL_KEYS.CTRL,\n            enable: true,\n        },\n        DOLLY: {\n            mouseButton: THREE.MOUSE.MIDDLE,\n            enable: true,\n        },\n        PAN: {\n            mouseButton: THREE.MOUSE.RIGHT,\n            up: CONTROL_KEYS.UP,\n            bottom: CONTROL_KEYS.BOTTOM,\n            left: CONTROL_KEYS.LEFT,\n            right: CONTROL_KEYS.RIGHT,\n            enable: true,\n        },\n        TOUCH_ROTATE: {\n            finger: 1,\n        },\n        TOUCH_DOLLY: {\n            finger: 2,\n        },\n        TOUCH_PAN: {\n            finger: 3,\n        },\n        MOVE_GLOBE: {\n            mouseButton: THREE.MOUSE.LEFT,\n            enable: true,\n        },\n        PANORAMIC: {\n            mouseButton: THREE.MOUSE.LEFT,\n            keyboard: CONTROL_KEYS.SHIFT,\n            enable: true,\n        },\n        SELECT: {\n            mouseButton: THREE.MOUSE.LEFT,\n            keyboard: CONTROL_KEYS.S,\n            enable: true,\n        },\n    };\n\n    Object.defineProperty(this.states.TOUCH_ROTATE,\n        'enable',\n        { get: () => this.states.ORBIT.enable,\n            set: () => {\n                throw new Error('Use ORBIT.enable to enable or disable TOUCH_ROTATE');\n            },\n        });\n\n    Object.defineProperty(this.states.TOUCH_DOLLY,\n        'enable',\n        { get: () => this.states.DOLLY.enable,\n            set: () => {\n                throw new Error('Use DOLLY.enable to enable or disable TOUCH_DOLLY');\n            },\n        });\n\n    Object.defineProperty(this.states.TOUCH_PAN,\n        'enable',\n        { get: () => this.states.PAN.enable,\n            set: () => {\n                throw new Error('Use PAN.enable to enable or disable TOUCH_PAN');\n            },\n        });\n\n\n    state = this.states.NONE;\n\n    const inputToState = (mouseButton, keyboard) => {\n        for (const key of Object.keys(this.states)) {\n            const state = this.states[key];\n            if (state.enable && state.mouseButton === mouseButton && state.keyboard === keyboard) {\n                return state;\n            }\n        }\n        return this.states.NONE;\n    };\n\n    const touchToState = (finger) => {\n        for (const key of Object.keys(this.states)) {\n            const state = this.states[key];\n            if (state.enable && finger == state.finger) {\n                return state;\n            }\n        }\n        return this.states.NONE;\n    };\n\n    var onMouseDown = function onMouseDown(event) {\n        player.stop().then(() => {\n            if (this.enabled === false) return;\n            event.preventDefault();\n            state = inputToState(event.button, currentKey, this.states);\n            switch (state) {\n                case this.states.ORBIT:\n                case this.states.PANORAMIC:\n                    rotateStart.set(event.clientX - event.target.offsetLeft, event.clientY - event.target.offsetTop);\n                    break;\n                case this.states.SELECT:\n                    // If the key 'S' is down, the engine selects node under mouse\n                    this._view.selectNodeAt(new THREE.Vector2(event.clientX - event.target.offsetLeft, event.clientY - event.target.offsetTop));\n                    break;\n                case this.states.MOVE_GLOBE: {\n                    snapShotCamera.shot(this.camera);\n                    ptScreenClick.x = event.clientX - event.target.offsetLeft;\n                    ptScreenClick.y = event.clientY - event.target.offsetTop;\n\n                    const point = view.getPickingPositionFromDepth(ptScreenClick);\n                    lastRotation = [];\n                    // update tangent sphere which passes through the point\n                    if (point) {\n                        ctrl.range = this.getRange();\n                        updateSpherePicking.bind(this)(point, ptScreenClick);\n                    } else {\n                        state = this.states.NONE;\n                    }\n                    break;\n                }\n                case this.states.DOLLY:\n                    dollyStart.set(event.clientX - event.target.offsetLeft, event.clientY - event.target.offsetTop);\n                    break;\n                case this.states.PAN:\n                    panStart.set(event.clientX - event.target.offsetLeft, event.clientY - event.target.offsetTop);\n                    break;\n                default:\n            }\n            if (state != this.states.NONE) {\n                this.domElement.addEventListener('mousemove', _handlerMouseMove, false);\n                this.domElement.addEventListener('mouseup', _handlerMouseUp, false);\n                this.domElement.addEventListener('mouseleave', _handlerMouseUp, false);\n                this.dispatchEvent(this.startEvent);\n            }\n        });\n    };\n\n    var ondblclick = function ondblclick(event) {\n        if (this.enabled === false) return;\n\n        if (!this.isAnimationEnabled()) {\n             // eslint-disable-next-line no-console\n            console.warn('double click without animation is disabled, waiting fix in future refactoring');\n            return;\n        }\n\n        // Double click throws move camera's target with animation\n        if (!currentKey) {\n            ptScreenClick.x = event.clientX - event.target.offsetLeft;\n            ptScreenClick.y = event.clientY - event.target.offsetTop;\n\n            const point = view.getPickingPositionFromDepth(ptScreenClick);\n\n            if (point) {\n                animatedScale = 0.6;\n                this.setCameraTargetPosition(point);\n            }\n        }\n    };\n\n    var onMouseUp = function onMouseUp(/* event */) {\n        if (this.enabled === false) return;\n\n        this.domElement.removeEventListener('mousemove', _handlerMouseMove, false);\n        this.domElement.removeEventListener('mouseup', _handlerMouseUp, false);\n        this.domElement.removeEventListener('mouseleave', _handlerMouseUp, false);\n        this.dispatchEvent(this.endEvent);\n\n        player.stop();\n\n        // Launch damping movement for :\n        //      * this.states.ORBIT\n        //      * this.states.MOVE_GLOBE\n        if (this.enableDamping) {\n            if (state === this.states.ORBIT && (sphericalDelta.theta > EPS || sphericalDelta.phi > EPS)) {\n                player.play(dampingOrbitalMvt).then(() => this.resetControls());\n            } else if (state === this.states.MOVE_GLOBE && lastRotation.length === 2 && (Date.now() - lastTimeMouseMove < 50) && !(lastRotation[1].equals(lastRotation[0]))) {\n                // animation since mouse up event occurs less than 50ms after the last mouse move\n                ctrl.qDelta.setFromUnitVectors(lastRotation[1], lastRotation[0]);\n                player.play(animationDampingMove).then(() => this.resetControls());\n            } else {\n                updateCameraTargetOnGlobe.bind(this)();\n            }\n        } else {\n            updateCameraTargetOnGlobe.bind(this)();\n        }\n    };\n\n    let wheelTimer;\n    var onMouseWheel = function onMouseWheel(event) {\n        clearTimeout(wheelTimer);\n        player.stop().then(() => {\n            if (!this.enabled || !this.states.DOLLY.enable) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            var delta = 0;\n\n            // WebKit / Opera / Explorer 9\n            if (event.wheelDelta !== undefined) {\n                delta = event.wheelDelta;\n            // Firefox\n            } else if (event.detail !== undefined) {\n                delta = -event.detail;\n            }\n\n            if (delta > 0) {\n                this.dollyOut();\n            } else if (delta < 0) {\n                this.dollyIn();\n            }\n\n            const previousRange = this.getRange();\n            update();\n            const newRange = this.getRange();\n            if (Math.abs(newRange - previousRange) / previousRange > 0.001 && enableEventPositionChanged) {\n                this.dispatchEvent({\n                    type: CONTROL_EVENTS.RANGE_CHANGED,\n                    previous: { range: previousRange },\n                    new: { range: newRange },\n                });\n            }\n            snapShotSpherical.copy(spherical);\n\n            // Prevent updating target as long as the wheel rotates\n            wheelTimer = setTimeout(() => {\n                this.waitSceneLoaded().then(() => {\n                    if (state == this.states.NONE) {\n                        this.updateCameraTransformation();\n                    }\n                });\n            }, 250);\n\n            this.dispatchEvent(this.startEvent);\n            this.dispatchEvent(this.endEvent);\n        });\n    };\n\n    var onKeyUp = function onKeyUp() {\n        if (this.enabled === false || this.enableKeys === false) return;\n\n        if (state === this.states.PAN) {\n            updateCameraTargetOnGlobe.bind(this)();\n        }\n        currentKey = undefined;\n    };\n\n    let currentKey;\n\n    var onKeyDown = function onKeyDown(event) {\n        player.stop().then(() => {\n            if (this.enabled === false || this.enableKeys === false) return;\n            currentKey = event.keyCode;\n            switch (event.keyCode) {\n                case this.states.PAN.up:\n                    this.mouseToPan(0, this.keyPanSpeed);\n                    state = this.states.PAN;\n                    update();\n                    break;\n                case this.states.PAN.bottom:\n                    this.mouseToPan(0, -this.keyPanSpeed);\n                    state = this.states.PAN;\n                    update();\n                    break;\n                case this.states.PAN.left:\n                    this.mouseToPan(this.keyPanSpeed, 0);\n                    state = this.states.PAN;\n                    update();\n                    break;\n                case this.states.PAN.right:\n                    this.mouseToPan(-this.keyPanSpeed, 0);\n                    state = this.states.PAN;\n                    update();\n                    break;\n                default:\n            }\n        });\n    };\n\n    var onTouchStart = function onTouchStart(event) {\n        if (this.enabled === false) return;\n\n        state = touchToState(event.touches.length);\n\n        if (state !== this.states.NONE) {\n            switch (state) {\n\n                case this.states.TOUCH_ROTATE:\n                    rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                    break;\n\n                case this.states.TOUCH_DOLLY:\n                    var dx = event.touches[0].pageX - event.touches[1].pageX;\n                    var dy = event.touches[0].pageY - event.touches[1].pageY;\n                    var distance = Math.sqrt(dx * dx + dy * dy);\n                    dollyStart.set(0, distance);\n                    break;\n\n                case this.states.TOUCH_PAN:\n                    panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                    break;\n                default:\n            }\n\n            this.dispatchEvent(this.startEvent);\n        }\n    };\n\n    var onTouchMove = function onTouchMove(event) {\n        if (this.enabled === false) return;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        var element = this.domElement === document ? this.domElement.body : this.domElement;\n\n        switch (event.touches.length) {\n\n            case this.states.TOUCH_ROTATE.finger:\n                if (state !== this.states.TOUCH_ROTATE) return;\n\n                rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                rotateDelta.subVectors(rotateEnd, rotateStart);\n\n                // rotating across whole screen goes 360 degrees around\n                this.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * this.rotateSpeed);\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\n                this.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * this.rotateSpeed);\n\n                rotateStart.copy(rotateEnd);\n\n                update();\n                break;\n\n            case this.states.TOUCH_DOLLY.finger:\n                if (state !== this.states.TOUCH_DOLLY) return;\n\n                var dx = event.touches[0].pageX - event.touches[1].pageX;\n                var dy = event.touches[0].pageY - event.touches[1].pageY;\n                var distance = Math.sqrt(dx * dx + dy * dy);\n\n                dollyEnd.set(0, distance);\n                dollyDelta.subVectors(dollyEnd, dollyStart);\n\n                if (dollyDelta.y > 0) {\n                    this.dollyOut();\n                } else if (dollyDelta.y < 0) {\n                    this.dollyIn();\n                }\n\n                dollyStart.copy(dollyEnd);\n\n                update();\n                break;\n\n            case this.states.TOUCH_PAN.finger:\n                if (state !== this.states.TOUCH_PAN) return;\n\n                panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                panDelta.subVectors(panEnd, panStart);\n\n                this.mouseToPan(panDelta.x, panDelta.y);\n\n                panStart.copy(panEnd);\n\n                update();\n                break;\n\n            default:\n\n                state = this.states.NONE;\n\n        }\n    };\n\n    var onTouchEnd = function onTouchEnd(/* event */) {\n        if (this.enabled === false) return;\n\n        this.dispatchEvent(this.endEvent);\n        state = this.states.NONE;\n        currentKey = undefined;\n    };\n\n    // Callback launched when player is stopped\n    this.resetControls = function resetControls() {\n        animatedScale = 0.0;\n        lastRotation.splice(0);\n        ctrl.progress = 0;\n        updateCameraTargetOnGlobe.bind(this)();\n    };\n\n    // update object camera position\n    this.updateCameraTransformation = function updateCameraTransformation(controlState, updateCameraTarget = true)\n    {\n        const bkDamping = this.enableDamping;\n        this.enableDamping = false;\n        state = controlState || this.states.ORBIT;\n        update();\n        if (updateCameraTarget) {\n            updateCameraTargetOnGlobe.bind(this)();\n        }\n        this.enableDamping = bkDamping;\n    };\n\n    this.dispose = function dispose() {\n        // this.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n        this.domElement.removeEventListener('mousedown', onMouseDown, false);\n        this.domElement.removeEventListener('mousewheel', onMouseWheel, false);\n        this.domElement.removeEventListener('DOMMouseScroll', onMouseWheel, false); // firefox\n\n        this.domElement.removeEventListener('touchstart', onTouchStart, false);\n        this.domElement.removeEventListener('touchend', onTouchEnd, false);\n        this.domElement.removeEventListener('touchmove', onTouchMove, false);\n\n        this.domElement.removeEventListener('mousemove', onMouseMove, false);\n        this.domElement.removeEventListener('mouseup', onMouseUp, false);\n\n        window.removeEventListener('keydown', onKeyDown, false);\n\n        // this.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    };\n\n    // Instance all\n    this.domElement.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n    }, false);\n    this.domElement.addEventListener('mousedown', onMouseDown.bind(this), false);\n    this.domElement.addEventListener('mousewheel', onMouseWheel.bind(this), false);\n    this.domElement.addEventListener('dblclick', ondblclick.bind(this), false);\n    this.domElement.addEventListener('DOMMouseScroll', onMouseWheel.bind(this), false); // firefox\n\n    this.domElement.addEventListener('touchstart', onTouchStart.bind(this), false);\n    this.domElement.addEventListener('touchend', onTouchEnd.bind(this), false);\n    this.domElement.addEventListener('touchmove', onTouchMove.bind(this), false);\n\n    // refresh control for each animation's frame\n    player.addEventListener('animation-frame', update.bind(this));\n\n    function isAnimationWithoutDamping(animation) {\n        return animation && !(animation.name === 'damping-move' || animation.name === 'damping-orbit');\n    }\n\n    player.addEventListener('animation-started', (e) => {\n        if (isAnimationWithoutDamping(e.animation)) {\n            this.dispatchEvent({\n                type: 'animation-started',\n            });\n        }\n    });\n\n    player.addEventListener('animation-ended', (e) => {\n        if (isAnimationWithoutDamping(e.animation)) {\n            this.dispatchEvent({\n                type: 'animation-ended',\n            });\n        }\n    });\n\n    // TODO: Why windows\n    window.addEventListener('keydown', onKeyDown.bind(this), false);\n    window.addEventListener('keyup', onKeyUp.bind(this), false);\n\n    // Reset key/mouse when window loose focus\n    window.addEventListener('blur', () => {\n        onKeyUp.bind(this)();\n        onMouseUp.bind(this)();\n    });\n\n    // Initialisation Globe Target and movingGlobeTarget\n    setCameraTargetObjectPosition(target);\n    movingCameraTargetOnGlobe.copy(target);\n    this.camera.up.copy(target.clone().normalize());\n    this._view.scene.add(cameraTargetOnGlobe);\n    spherical.radius = movingCameraTargetOnGlobe.distanceTo(this.camera.position);\n\n    update();\n\n    if (enableTargetHelper) {\n        const helperTarget = new THREE.AxisHelper(500000);\n        cameraTargetOnGlobe.add(helperTarget);\n        this._view.scene.add(pickingHelper);\n        const layerTHREEjs = view.mainLoop.gfxEngine.getUniqueThreejsLayer();\n        cameraTargetOnGlobe.layers.set(layerTHREEjs);\n        helperTarget.layers.set(layerTHREEjs);\n        pickingHelper.layers.set(layerTHREEjs);\n        cameraTargetOnGlobe.layers.set(layerTHREEjs);\n        this.camera.layers.enable(layerTHREEjs);\n    }\n\n    // Start position\n    initialTarget = cameraTargetOnGlobe.clone();\n    initialPosition = this.camera.position.clone();\n    initialZoom = this.camera.zoom;\n    snapShotSpherical.copy(spherical);\n\n    _handlerMouseMove = onMouseMove.bind(this);\n    _handlerMouseUp = onMouseUp.bind(this);\n\n    initPromise = this.waitSceneLoaded().then(() => {\n        this.updateCameraTransformation();\n    });\n}\n\nGlobeControls.prototype = Object.create(THREE.EventDispatcher.prototype);\nGlobeControls.prototype.constructor = GlobeControls;\n\nfunction getRangeFromScale(scale, pitch) {\n    // Screen pitch, in millimeters\n    pitch = (pitch || 0.28) / 1000;\n    const alpha = sizeRendering.FOV / 180 * Math.PI * 0.5;\n    // Invert one unit projection (see getDollyScale)\n    const range = pitch * sizeRendering.height / (scale * 2 * Math.tan(alpha));\n\n    return range;\n}\n\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n/**\n * Changes the tilt of the current camera, in degrees.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/p6t76zox/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param {number}  tilt\n * @param {boolean} isAnimated\n * @return {Promise<void>}\n */\nGlobeControls.prototype.setTilt = function setTilt(tilt, isAnimated) {\n    return this.setOrbitalPosition({ tilt }, isAnimated);\n};\n\n/**\n * Changes the heading of the current camera, in degrees.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/rxe4xgxj/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param {number} heading\n * @param {boolean} isAnimated\n * @return {Promise<void>}\n */\nGlobeControls.prototype.setHeading = function setHeading(heading, isAnimated) {\n    return this.setOrbitalPosition({ heading }, isAnimated);\n};\n\n/**\n * Sets the \"range\": the distance in meters between the camera and the current central point on the screen.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/Lt3jL5pd/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param {number} range\n * @param {boolean} isAnimated\n * @return {Promise<void>}\n */\nGlobeControls.prototype.setRange = function setRange(range, isAnimated) {\n    return this.setOrbitalPosition({ range }, isAnimated);\n};\n\n/**\n * Sets orientation angles of the current camera, in degrees.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/9qr2mogh/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param {{tilt:number,heading:number,range:number}} position\n * @param {boolean}  isAnimated\n * @return {Promise<void>}\n */\nGlobeControls.prototype.setOrbitalPosition = function setOrbitalPosition(position, isAnimated) {\n    return initPromise.then(() => {\n        const geoPosition = this.getCameraTargetGeoPosition();\n        let altitude = geoPosition.altitude();\n        isAnimated = isAnimated === undefined ? this.isAnimationEnabled() : isAnimated;\n        const deltaPhi = position.tilt === undefined ? 0 : position.tilt * Math.PI / 180 - this.getTiltRad();\n        const deltaTheta = position.heading === undefined ? 0 : position.heading * Math.PI / 180 - this.getHeadingRad();\n        const deltaRange = position.range === undefined ? 0 : position.range - this.getRange();\n        if (position.range) {\n            this._view.wgs84TileLayer.postUpdate = () => {\n                updateAltitudeCoordinate(geoPosition, this._view.wgs84TileLayer);\n                const errorRange = altitude - geoPosition.altitude();\n                if (errorRange != 0) {\n                    if (isAnimated && player.isPlaying()) {\n                        sphericalTo.radius -= errorRange;\n                    } else {\n                        position.range -= errorRange;\n                        this.moveOrbitalPosition(position.range - this.getRange(), 0, 0, false);\n                    }\n                    altitude = geoPosition.altitude();\n                }\n            };\n        }\n        return this.moveOrbitalPosition(deltaRange, deltaTheta, deltaPhi, isAnimated).then(() => {\n            this.waitSceneLoaded().then(() => {\n                this.updateCameraTransformation();\n                this._view.wgs84TileLayer.postUpdate = () => {};\n            });\n        });\n    });\n};\n\nconst destSpherical = new THREE.Spherical();\n\nGlobeControls.prototype.moveOrbitalPosition = function moveOrbitalPosition(deltaRange, deltaTheta, deltaPhi, isAnimated) {\n    isAnimated = isAnimated === undefined ? this.isAnimationEnabled() : isAnimated;\n    const range = deltaRange + this.getRange();\n    const cd = this.enableDamping;\n    this.enableDamping = false;\n    if (isAnimated) {\n        destSpherical.theta = deltaTheta + spherical.theta;\n        destSpherical.phi = deltaPhi + spherical.phi;\n        sphericalTo.radius = range;\n        sphericalTo.theta = deltaTheta / animationOrbit.duration;\n        sphericalTo.phi = deltaPhi / animationOrbit.duration;\n        state = this.states.ORBIT;\n        return player.play(animationOrbit).then(() => {\n            sphericalTo.theta = 0;\n            sphericalTo.phi = 0;\n            this.enableDamping = cd;\n        });\n    }\n    else {\n        sphericalDelta.theta = deltaTheta;\n        sphericalDelta.phi = deltaPhi;\n        orbit.scale = range / this.getRange();\n        this.updateCameraTransformation(this.states.ORBIT, false);\n        this.enableDamping = cd;\n        return Promise.resolve();\n    }\n};\n\n/**\n * Returns the {@linkcode Coordinates} of the globe point targeted by the camera in EPSG:4978 projection. See {@linkcode Coordinates} for conversion\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/4tjgnv7z/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return {THREE.Vector3} position\n */\nGlobeControls.prototype.getCameraTargetPosition = function getCameraTargetPosition() {\n    return cameraTargetOnGlobe.position;\n};\n\n/**\n * Make the camera aim a point in the globe\n *\n * @param {THREE.Vector3} position - the position on the globe to aim, in EPSG:4978 projection\n * @param {boolean} isAnimated - if we should animate the move\n * @return {Promise<void>}\n */\nGlobeControls.prototype.setCameraTargetPosition = function setCameraTargetPosition(position, isAnimated) {\n    if (!ctrl.targetGeoPosition) {\n        ctrl.targetGeoPosition = new Coordinates('EPSG:4978', position).as('EPSG:4326');\n    }\n\n    isAnimated = isAnimated === undefined ? this.isAnimationEnabled() : isAnimated;\n\n    snapShotCamera.shot(this.camera);\n\n    ptScreenClick.x = this.domElement.width / 2;\n    ptScreenClick.y = this.domElement.height / 2;\n\n    const vFrom = this.getCameraTargetPosition().clone().normalize();\n    const vTo = position.clone().normalize();\n\n    ctrl.lengthTarget = cameraTargetOnGlobe.position.length();\n    ctrl.distance = ctrl.lengthTarget - position.length();\n    ctrl.lengthCamera = snapShotCamera.position.length();\n\n    if (position.range) {\n        animatedScale = 1.0 - position.range / this.getRange();\n    }\n\n    if (isAnimated) {\n        ctrl.qDelta.setFromUnitVectors(vFrom, vTo);\n        state = this.states.MOVE_GLOBE;\n        return player.play(animationZoomCenter).then(() => {\n            this.resetControls();\n            this.waitSceneLoaded().then(() => {\n                animatedScale = 0;\n                if (player.isStopped()) {\n                    this.updateCameraTransformation();\n                    ctrl.targetGeoPosition = null;\n                }\n            });\n        });\n    } else {\n        ctrl.progress = 1.0;\n        quatGlobe.setFromUnitVectors(vFrom, vTo);\n        this.updateCameraTransformation(this.states.MOVE_GLOBE, false);\n        this._view.wgs84TileLayer.postUpdate = () => {\n            clampToGround(ctrl);\n            this.updateCameraTransformation(this.states.MOVE_GLOBE, false);\n        };\n        return this.waitSceneLoaded().then(() => {\n            this.updateCameraTransformation(this.states.MOVE_GLOBE);\n            this._view.wgs84TileLayer.postUpdate = () => {};\n            ctrl.targetGeoPosition = null;\n            ctrl.progress = 0.0;\n        });\n    }\n};\n\n/**\n * Returns the \"range\": the distance in meters between the camera and the current central point on the screen.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/Lbt1vfek/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return {number} number\n */\nGlobeControls.prototype.getRange = function getRange() {\n    return this.getCameraTargetPosition().distanceTo(this.camera.position);\n};\n\n/**\n * Returns the tilt of the current camera in degrees.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/kcx0of9j/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return {Angle} number - The angle of the rotation in degrees.\n */\nGlobeControls.prototype.getTilt = function getTilt() {\n    return spherical.phi * 180 / Math.PI;\n};\n\n/**\n * Returns the heading of the current camera in degrees.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/pxv1Lw16/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return {Angle} number - The angle of the rotation in degrees.\n */\nGlobeControls.prototype.getHeading = function getHeading() {\n    return (THREE.Math.radToDeg(spherical.theta) + 360) % 360;\n};\n\nGlobeControls.prototype.getTiltRad = function getTiltRad() {\n    return spherical.phi;\n};\n\nGlobeControls.prototype.getHeadingRad = function getHeadingRad() {\n    return spherical.theta;\n};\n\nGlobeControls.prototype.getPolarAngle = function getPolarAngle() {\n    return spherical.phi;\n};\n\nGlobeControls.prototype.getAzimuthalAngle = function getAzimuthalAngle() {\n    return spherical.theta;\n};\n\nGlobeControls.prototype.moveTarget = function moveTarget() {\n    return movingCameraTargetOnGlobe;\n};\n\n/**\n * Displaces the central point to a specific amount of pixels from its current position.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/1z7q3c4z/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * The view flies to the desired coordinate, i.e.is not teleported instantly. Note : The results can be strange in some cases, if ever possible, when e.g.the camera looks horizontally or if the displaced center would not pick the ground once displaced.\n * @param      {vector}  pVector  The vector\n * @return {Promise<void>}\n */\nGlobeControls.prototype.pan = function pan(pVector) {\n    this.mouseToPan(pVector.x, pVector.y);\n    this.updateCameraTransformation(this.states.PAN);\n    return this.waitSceneLoaded().then(() => {\n        this.updateCameraTransformation();\n    });\n};\n\n/**\n * Returns the orientation angles of the current camera, in degrees.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/okfj460p/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return {Array<number>}\n */\nGlobeControls.prototype.getCameraOrientation = function getCameraOrientation() {\n    var tiltCam = this.getTilt();\n    var headingCam = this.getHeading();\n    return [tiltCam, headingCam];\n};\n\n/**\n * Returns the camera location projected on the ground in lat,lon. See {@linkcode Coordinates} for conversion.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/mjv7ha02/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return {Coordinates} position\n */\n\nGlobeControls.prototype.getCameraLocation = function getCameraLocation() {\n    return new Coordinates('EPSG:4978', this.camera.position).as('EPSG:4326');\n};\n\n/**\n * Retuns the {@linkcode Coordinates} of the central point on screen in lat,lon. See {@linkcode Coordinates} for conversion.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/4tjgnv7z/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return {Position} position\n */\n\nGlobeControls.prototype.getCameraTargetGeoPosition = function getCameraTargetGeoPosition() {\n    return new Coordinates(this._view.referenceCrs, this.getCameraTargetPosition()).as('EPSG:4326');\n};\n\n/**\n * Sets the animation enabled.\n * @param      {boolean}  enable  enable\n */\nGlobeControls.prototype.setAnimationEnabled = function setAnimationEnabled(enable) {\n    enableAnimation = enable;\n};\n\n/**\n * Determines if animation enabled.\n * @return     {boolean}  True if animation enabled, False otherwise.\n */\nGlobeControls.prototype.isAnimationEnabled = function isAnimationEnabled() {\n    return enableAnimation;\n};\n\n/**\n * Returns the actual zoom. The zoom will always be between the [getMinZoom(), getMaxZoom()].\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/o3Lvanfe/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @return     {number}  The zoom .\n */\nGlobeControls.prototype.getZoom = function getZoom() {\n    return computeTileZoomFromDistanceCamera(this.getRange(), this._view);\n};\n\n/**\n * Sets the current zoom, which is an index in the logical scales predefined for the application.\n * The higher the zoom, the closer to the ground.\n * The zoom is always in the [getMinZoom(), getMaxZoom()] range.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/7cvno086/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param      {number}  zoom    The zoom\n * @param      {boolean}  isAnimated  Indicates if animated\n * @return     {Promise}\n */\nGlobeControls.prototype.setZoom = function setZoom(zoom, isAnimated) {\n    isAnimated = isAnimated === undefined ? this.isAnimationEnabled() : isAnimated;\n    const range = computeDistanceCameraFromTileZoom(zoom, this._view);\n    return this.setRange(range, isAnimated);\n};\n\n/**\n * Return the current zoom scale at the central point of the view.\n * This function compute the scale of a map\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/0p609qbu/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param      {number}  pitch   Screen pitch, in millimeters ; 0.28 by default\n * @return     {number}  The zoom scale.\n */\nGlobeControls.prototype.getScale = function getScale(pitch) {\n    // TODO: Why error div size height in Chrome?\n    // Screen pitch, in millimeters\n    pitch = (pitch || 0.28) / 1000;\n    const FOV = sizeRendering.FOV / 180 * Math.PI * 0.5;\n    // projection one unit on screen\n    const unitProjection = sizeRendering.height / (2 * this.getRange() * Math.tan(FOV));\n    return pitch * unitProjection;\n};\n\n/**\n * To convert the projection in meters on the globe of a number of pixels of screen\n * @param      {number} pixels count pixels to project\n * @param      {number} pixelPitch Screen pixel pitch, in millimeters (default = 0.28 mm / standard pixel size of 0.28 millimeters as defined by the OGC)\n * @return     {number} projection in meters on globe\n */\nGlobeControls.prototype.pixelsToMeters = function pixelsToMeters(pixels, pixelPitch = 0.28) {\n    const scaled = this.getScale(pixelPitch);\n    const size = pixels * pixelPitch;\n    return size / scaled / 1000;\n};\n\n/**\n * To convert the projection a number of horizontal pixels of screen to longitude degree WGS84 on the globe\n * @param      {number} pixels count pixels to project\n * @param      {number} pixelPitch Screen pixel pitch, in millimeters (default = 0.28 mm / standard pixel size of 0.28 millimeters as defined by the OGC)\n * @return     {number} projection in degree on globe\n */\n// TODO : Move tools in GlobeView or a new GlobeUtils files\nGlobeControls.prototype.pixelsToDegrees = function pixelsToDegrees(pixels, pixelPitch = 0.28) {\n    const chord = this.pixelsToMeters(pixels, pixelPitch);\n    const radius = ellipsoidSizes().x;\n    return THREE.Math.radToDeg(2 * Math.asin(chord / (2 * radius)));\n};\n\n/**\n * Projection on screen in pixels of length in meter on globe\n * @param      {number}  value Length in meter on globe\n * @param      {number}  pixelPitch Screen pixel pitch, in millimeters (default = 0.28 mm / standard pixel size of 0.28 millimeters as defined by the OGC)\n * @return     {number}  projection in pixels on screen\n */\nGlobeControls.prototype.metersToPixels = function metersToPixels(value, pixelPitch = 0.28) {\n    const scaled = this.getScale(pixelPitch);\n    pixelPitch /= 1000;\n    return value * scaled / pixelPitch;\n};\n\n/**\n * Changes the zoom of the central point of screen so that screen acts as a map with a specified scale.\n *  The view flies to the desired zoom scale;\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/0w4mfdb6/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param      {number}  scale  The scale\n * @param      {number}  pitch  The pitch\n * @param      {boolean}  isAnimated  Indicates if animated\n * @return     {Promise}\n */\n // TODO pas de scale supérieur à 0.05....\nGlobeControls.prototype.setScale = function setScale(scale, pitch, isAnimated) {\n    isAnimated = isAnimated === undefined ? this.isAnimationEnabled() : isAnimated;\n    const range = getRangeFromScale(scale);\n    return this.setRange(range, isAnimated);\n};\n\n/**\n * Changes the center of the scene on screen to the specified in lat, lon. See {@linkcode Coordinates} for conversion.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/zrdgzz26/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @function\n * @memberOf GlobeControls\n * @param {Object} coordinates - The globe coordinates in EPSG_4326 projection to aim to\n * @param {number} coordinates.latitude\n * @param {number} coordinates.longitude\n * @param {number} coordinates.range\n * @param {boolean}  isAnimated - if the movement should be animated\n * @return {Promise} A promise that resolves when the next 'globe initilazed' event fires.\n */\nGlobeControls.prototype.setCameraTargetGeoPosition = function setCameraTargetGeoPosition(coordinates, isAnimated) {\n    return initPromise.then(() => {\n        isAnimated = isAnimated === undefined ? this.isAnimationEnabled() : isAnimated;\n        ctrl.targetGeoPosition = new C.EPSG_4326(coordinates.longitude, coordinates.latitude, 0);\n        updateAltitudeCoordinate(ctrl.targetGeoPosition, this._view.wgs84TileLayer);\n        const position = ctrl.targetGeoPosition.as('EPSG:4978').xyz();\n        position.range = coordinates.range;\n        return this.setCameraTargetPosition(position, isAnimated);\n    });\n};\n\n/**\n * Changes the center of the scene on screen to the specified in lat, lon. See {@linkcode Coordinates} for conversion.\n * This function allows to change the central position, the zoom, the range, the scale and the camera orientation at the same time.\n * The zoom has to be between the [getMinZoom(), getMaxZoom()].\n * Zoom parameter is ignored if range is set\n * Scale is ignored if range or Zoom is set.\n * <iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/iTownsIGN/9su6v2qz/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n * @param {Position} position\n * @param {number}  position.longitude  Coordinate longitude WGS84 in degree\n * @param {number}  position.latitude  Coordinate latitude WGS84 in degree\n * @param {number}  [position.tilt]  Camera tilt in degree\n * @param {number}  [position.heading]  Camera heading in degree\n * @param {number}  [position.range]  The camera distance to the target center\n * @param {number}  [position.zoom]  zoom,  ignored if range is set\n * @param {number}  [position.scale]  scale,  ignored if the zoom or range is set. For a scale of 1/500 it is necessary to write 0,002.\n * @param {boolean}  isAnimated  Indicates if animated\n * @return {Promise}\n */\nGlobeControls.prototype.setCameraTargetGeoPositionAdvanced = function setCameraTargetGeoPositionAdvanced(position, isAnimated) {\n    isAnimated = isAnimated === undefined ? this.isAnimationEnabled() : isAnimated;\n    if (position.zoom) {\n        position.range = computeDistanceCameraFromTileZoom(position.zoom, this._view);\n    } else if (position.scale) {\n        position.range = getRangeFromScale(position.scale);\n    }\n    enableEventPositionChanged = false;\n    return this.setCameraTargetGeoPosition(position, isAnimated).then(() => {\n        enableEventPositionChanged = true;\n        return this.setOrbitalPosition(position, isAnimated); });\n};\n\n/**\n * Pick a position on the globe at the given position in lat,lon. See {@linkcode Coordinates} for conversion.\n * @param {number | MouseEvent} mouse - The x-position inside the Globe element or a mouse event.\n * @param {number=} y - The y-position inside the Globe element.\n * @return {Coordinates} position\n */\nGlobeControls.prototype.pickGeoPosition = function pickGeoPosition(mouse, y) {\n    var screenCoords = {\n        x: mouse.clientX || mouse,\n        y: mouse.clientY || y,\n    };\n\n    var pickedPosition = this._view.getPickingPositionFromDepth(screenCoords);\n\n    if (!pickedPosition) {\n        return;\n    }\n\n    return new Coordinates('EPSG:4978', pickedPosition).as('EPSG:4326');\n};\n\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\nGlobeControls.prototype.reset = function reset() {\n    // TODO not reset target globe\n    state = this.states.NONE;\n\n    this.target.copy(initialTarget);\n    this.camera.position.copy(initialPosition);\n    this.camera.zoom = initialZoom;\n\n    this.camera.updateProjectionMatrix();\n    this._view.notifyChange(true);\n\n    this.updateCameraTransformation();\n};\n\nexport default GlobeControls;\n"]}