{"version":3,"sources":["../../src/Renderer/PointsMaterial.js"],"names":["PointsMaterial","size","vertexShader","fragmentShader","uniforms","resolution","window","innerWidth","innerHeight","pickingMode","density","opacity","useCustomColor","customColor","elevationColor","extensions","fragDepth","isLogDepthBufferSupported","defines","USE_LOGDEPTHBUF","USE_LOGDEPTHBUF_EXT","v","blending","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;IAEMA,c;;;AACF,8BAAsB;AAAA,YAAVC,IAAU,uEAAH,CAAG;AAAA;;AAAA;;AAElB,cAAKC,YAAL;AACA,cAAKC,cAAL;;AAEA,cAAKC,QAAL,CAAcH,IAAd,GAAqB,mBAAYA,IAAZ,CAArB;AACA,cAAKG,QAAL,CAAcC,UAAd,GAA2B,mBAAY,mBAAYC,OAAOC,UAAnB,EAA+BD,OAAOE,WAAtC,CAAZ,CAA3B;AACA,cAAKJ,QAAL,CAAcK,WAAd,GAA4B,mBAAY,KAAZ,CAA5B;AACA,cAAKL,QAAL,CAAcM,OAAd,GAAwB,mBAAY,IAAZ,CAAxB;AACA,cAAKN,QAAL,CAAcO,OAAd,GAAwB,mBAAY,GAAZ,CAAxB;AACA,cAAKP,QAAL,CAAcQ,cAAd,GAA+B,mBAAY,KAAZ,CAA/B;AACA,cAAKR,QAAL,CAAcS,WAAd,GAA4B,mBAAY,kBAAZ,CAA5B;AACA,cAAKT,QAAL,CAAcU,cAAd,GAA+B,mBAAY,KAAZ,CAA/B;AACA,cAAKC,UAAL,CAAgBC,SAAhB,GAA4B,IAA5B;;AAMA,YAAI,uBAAaC,yBAAb,EAAJ,EAA8C;AAC1C,kBAAKC,OAAL,GAAe;AACXC,iCAAiB,CADN;AAEXC,qCAAqB;AAFV,aAAf;AAIH;AAxBiB;AAyBrB;;;;sCAEaC,C,EAAG;AACb;AACA,iBAAKC,QAAL,GAAgBD,6CAAhB;AACA,iBAAKjB,QAAL,CAAcK,WAAd,CAA0Bc,KAA1B,GAAkCF,CAAlC;AACH;;;;;kBAGUrB,c","file":"PointsMaterial.js","sourcesContent":["import { Color, Uniform, Vector2, NoBlending, NormalBlending, RawShaderMaterial } from 'three';\nimport PointsVS from './Shader/PointsVS.glsl';\nimport PointsFS from './Shader/PointsFS.glsl';\nimport Capabilities from '../Core/System/Capabilities';\n\nclass PointsMaterial extends RawShaderMaterial {\n    constructor(size = 0) {\n        super();\n        this.vertexShader = PointsVS;\n        this.fragmentShader = PointsFS;\n\n        this.uniforms.size = new Uniform(size);\n        this.uniforms.resolution = new Uniform(new Vector2(window.innerWidth, window.innerHeight));\n        this.uniforms.pickingMode = new Uniform(false);\n        this.uniforms.density = new Uniform(0.01);\n        this.uniforms.opacity = new Uniform(1.0);\n        this.uniforms.useCustomColor = new Uniform(false);\n        this.uniforms.customColor = new Uniform(new Color());\n        this.uniforms.elevationColor = new Uniform(false);\n        this.extensions.fragDepth = true;\n\n        if (__DEBUG__) {\n            this.defines.DEBUG = 1;\n        }\n\n        if (Capabilities.isLogDepthBufferSupported()) {\n            this.defines = {\n                USE_LOGDEPTHBUF: 1,\n                USE_LOGDEPTHBUF_EXT: 1,\n            };\n        }\n    }\n\n    enablePicking(v) {\n        // we don't want pixels to blend over already drawn pixels\n        this.blending = v ? NoBlending : NormalBlending;\n        this.uniforms.pickingMode.value = v;\n    }\n}\n\nexport default PointsMaterial;\n"]}