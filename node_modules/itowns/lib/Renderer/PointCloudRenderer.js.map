{"version":3,"sources":["../../src/Renderer/PointCloudRenderer.js"],"names":["THREE","RT","FULL_RES_0","FULL_RES_1","EDL_VALUES","PointCloudRenderer","view","scene","Scene","geom","BufferGeometry","addAttribute","Float32BufferAttribute","mesh","Mesh","frustumCulled","add","camera","OrthographicCamera","classic","passes","undefined","setup","material","edl","ShaderMaterial","uniforms","depthTexture","value","resolution","Vector2","cameraNear","cameraFar","radius","strength","directions","n","opacity","vertexShader","fragmentShader","textureColor","textureEDL","extensions","fragDepth","parameters","enabled","renderer","input","passIdx","m","set","width","height","camera3D","near","far","output","renderTargets","texture","occlusion","colorTexture","m43","m33","invPersMatrix","Matrix4","threshold","showRemoved","clearColor","Color","f","mat","getInverse","projectionMatrix","copy","mainLoop","gfxEngine","getClearColor","inpainting","depth_contrib","fill_steps","_createRenderTargets","addFrameRequester","prototype","update","forEach","rt","dispose","renderView","g","r","stages","push","i","oldClearAlpha","getClearAlpha","setClearAlpha","previousStageOutput","length","stage","stageOutput","j","setRenderTarget","clearTarget","setViewport","transparent","render","WebGLRenderTarget","minFilter","LinearFilter","generateMipmaps","depthBuffer","format","RGBAFormat","NearestFilter","magFilter","DepthTexture","type","UnsignedShortType"],"mappings":"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","file":"PointCloudRenderer.js","sourcesContent":["import * as THREE from 'three';\nimport BasicVS from './Shader/BasicVS.glsl';\nimport EDLPassOneFS from './Shader/PointCloud/EDLPassOneFS.glsl';\nimport EDLPassTwoFS from './Shader/PointCloud/EDLPassTwoFS.glsl';\nimport OcclusionFS from './Shader/PointCloud/OcclusionFS.glsl';\nimport InpaintingFS from './Shader/PointCloud/InpaintingFS.glsl';\n\nconst RT = {\n    FULL_RES_0: 0,\n    FULL_RES_1: 1,\n    EDL_VALUES: 2,\n};\n\nfunction PointCloudRenderer(view) {\n    this.scene = new THREE.Scene();\n\n    // create 1 big triangle covering the screen\n    const geom = new THREE.BufferGeometry();\n    const vertices = [0, 0, -3, 2, 0, -3, 0, 2, -3];\n    const uvs = [0, 0, 2, 0, 0, 2];\n    geom.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    geom.addAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n    this.mesh = new THREE.Mesh(geom, null);\n    // this.mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.mesh.frustumCulled = false;\n    this.scene.add(this.mesh);\n\n    // our camera\n    this.camera = new THREE.OrthographicCamera(0, 1, 1, 0, 0, 10);\n\n    this.classic = {\n        passes: [undefined],\n        setup() { return { material: undefined }; },\n    };\n\n    // E(ye)D(ome)L(ighting) setup\n    // References:\n    //    - https://tel.archives-ouvertes.fr/tel-00438464/document\n    //    - Potree (https://github.com/potree/potree/)\n    this.edl = {\n        passes: [\n            // EDL 1st pass material\n            // This pass is writing a single value per pixel, describing the depth\n            // difference between one pixel and its neighbours.\n            new THREE.ShaderMaterial({\n                uniforms: {\n                    depthTexture: { value: null },\n                    resolution: { value: new THREE.Vector2(256, 256) },\n                    cameraNear: { value: 0.01 },\n                    cameraFar: { value: 100 },\n                    radius: { value: 0 },\n                    strength: { value: 0 },\n                    directions: { value: 0 },\n                    n: { value: 0 },\n                    opacity: { value: 1.0 },\n                },\n                vertexShader: BasicVS,\n                fragmentShader: EDLPassOneFS,\n            }),\n            // EDL 2nd pass material\n            // This pass combines the EDL value computed in pass 1 with pixels\n            // colors from a normal rendering to compose the final pixel color\n            new THREE.ShaderMaterial({\n                uniforms: {\n                    depthTexture: { value: null },\n                    textureColor: { value: null },\n                    textureEDL: { value: null },\n                    opacity: { value: 1.0 },\n                },\n                vertexShader: BasicVS,\n                fragmentShader: EDLPassTwoFS,\n                extensions: { fragDepth: true },\n            })],\n        // EDL tuning\n        parameters: {\n            enabled: true,\n            // distance to neighbours pixels\n            radius: 3.0,\n            // edl value coefficient\n            strength: 0.35,\n            // directions count where neighbours are taken\n            directions: 8,\n            // how many neighbours per direction\n            n: 1,\n        },\n        setup(renderer, input, passIdx) {\n            const m = this.passes[passIdx];\n            if (passIdx == 0) {\n                m.uniforms.depthTexture.value = input.depthTexture;\n                m.uniforms.resolution.value.set(input.width, input.height);\n                m.uniforms.cameraNear.value = renderer.view.camera.camera3D.near;\n                m.uniforms.cameraFar.value = renderer.view.camera.camera3D.far;\n                m.uniforms.radius.value = this.parameters.radius;\n                m.uniforms.strength.value = this.parameters.strength;\n                m.uniforms.directions.value = this.parameters.directions;\n                m.uniforms.n.value = this.parameters.n;\n\n                return { material: m, output: renderer.renderTargets[RT.EDL_VALUES] };\n            } else {\n                m.uniforms.textureColor.value = input.texture;\n                m.uniforms.textureEDL.value = renderer.renderTargets[RT.EDL_VALUES].texture;\n                m.uniforms.depthTexture.value = input.depthTexture;\n\n                return { material: m };\n            }\n        },\n    };\n\n    // Screen-space occlusion\n    // References: http://www.crs4.it/vic/data/papers/vast2011-pbr.pdf\n    this.occlusion = {\n        passes: [\n            // EDL 1st pass material\n            // This pass is writing a single value per pixel, describing the depth\n            // difference between one pixel and its neighbours.\n            new THREE.ShaderMaterial({\n                uniforms: {\n                    depthTexture: { value: null },\n                    colorTexture: { value: null },\n                    m43: { value: 0 },\n                    m33: { value: 0 },\n                    resolution: { value: new THREE.Vector2(256, 256) },\n                    invPersMatrix: { value: new THREE.Matrix4() },\n                    threshold: { value: 0 },\n                    showRemoved: { value: false },\n                    clearColor: { value: new THREE.Color() },\n                    opacity: { value: 1.0 },\n                },\n                vertexShader: BasicVS,\n                fragmentShader: OcclusionFS,\n                extensions: { fragDepth: true },\n            })],\n        // EDL tuning\n        parameters: {\n            enabled: true,\n            // pixel suppression threshold\n            threshold: 0.9,\n            // debug feature to colorize removed pixels\n            showRemoved: false,\n        },\n        setup(renderer, input) {\n            const m = this.passes[0];\n            const n = renderer.view.camera.camera3D.near;\n            const f = renderer.view.camera.camera3D.far;\n            const m43 = -(2 * f * n) / (f - n);\n            const m33 = -(f + n) / (f - n);\n            const mat = new THREE.Matrix4();\n            mat.getInverse(renderer.view.camera.camera3D.projectionMatrix);\n\n            m.uniforms.colorTexture.value = input.texture;\n            m.uniforms.depthTexture.value = input.depthTexture;\n            m.uniforms.resolution.value.set(\n                input.width, input.height);\n            m.uniforms.m43.value = m43;\n            m.uniforms.m33.value = m33;\n            m.uniforms.threshold.value = this.parameters.threshold;\n            m.uniforms.showRemoved.value = this.parameters.showRemoved;\n            m.uniforms.invPersMatrix.value.getInverse(renderer.view.camera.camera3D.projectionMatrix);\n            m.uniforms.clearColor.value.copy(renderer.view.mainLoop.gfxEngine.renderer.getClearColor());\n\n            return { material: m };\n        },\n    };\n\n    // Screen-space filling\n    // References: http://www.crs4.it/vic/data/papers/vast2011-pbr.pdf\n    this.inpainting = {\n        passes: [\n            // EDL 1st pass material\n            // This pass is writing a single value per pixel, describing the depth\n            // difference between one pixel and its neighbours.\n            new THREE.ShaderMaterial({\n                uniforms: {\n                    depthTexture: { value: null },\n                    colorTexture: { value: null },\n                    resolution: { value: new THREE.Vector2(256, 256) },\n                    depth_contrib: { value: 0.5 },\n                    opacity: { value: 1.0 },\n                },\n                vertexShader: BasicVS,\n                fragmentShader: InpaintingFS,\n                extensions: { fragDepth: true },\n            })],\n        // EDL tuning\n        parameters: {\n            enabled: true,\n            // how many fill step should be performed\n            fill_steps: 2,\n            // depth contribution to the final color (?)\n            depth_contrib: 0.5,\n        },\n        setup(renderer, input) {\n            const m = this.passes[0];\n\n            m.uniforms.colorTexture.value = input.texture;\n            m.uniforms.depthTexture.value = input.depthTexture;\n            m.uniforms.resolution.value.set(input.width, input.height);\n            m.uniforms.depth_contrib.value = this.parameters.depth_contrib;\n\n            return { material: m };\n        },\n    };\n\n    this.renderTargets = _createRenderTargets(view);\n\n    this.view = view;\n    view.addFrameRequester(this);\n}\n\nPointCloudRenderer.prototype.update = function update() {\n    if (this.view.camera.width != this.renderTargets[RT.FULL_RES_0].width ||\n        this.view.camera.width != this.renderTargets[RT.FULL_RES_0].height) {\n        // release old render targets\n        this.renderTargets.forEach(rt => rt.dispose());\n        // build new ones\n        this.renderTargets = _createRenderTargets(this.view);\n    }\n};\n\nPointCloudRenderer.prototype.renderView = function renderView(view, opacity = 1.0) {\n    const g = view.mainLoop.gfxEngine;\n    const r = g.renderer;\n\n    const stages = [];\n\n    stages.push(this.classic);\n\n    if (this.occlusion.parameters.enabled) {\n        stages.push(this.occlusion);\n    }\n    if (this.inpainting.parameters.enabled) {\n        for (let i = 0; i < this.inpainting.parameters.fill_steps; i++) {\n            stages.push(this.inpainting);\n        }\n    }\n    if (this.edl.parameters.enabled) {\n        stages.push(this.edl);\n    }\n\n    const oldClearAlpha = r.getClearAlpha();\n    r.setClearAlpha(0.0);\n\n    let previousStageOutput = RT.FULL_RES_0;\n    for (let i = 0; i < stages.length; i++) {\n        const stage = stages[i];\n\n        // ping-pong between FULL_RES_0 and FULL_RES_1, unless overriden by stage\n        const stageOutput = (previousStageOutput + 1) % 2;\n        for (let j = 0; j < stage.passes.length; j++) {\n            // prepare stage\n            // eslint-disable-next-line prefer-const\n            let { material, output } = stage.setup(this, this.renderTargets[previousStageOutput], j);\n\n            // if last stage -> override output (draw to screen)\n            if (i == stages.length - 1 && j == stage.passes.length - 1) {\n                output = null;\n            } else if (!output) {\n                output = this.renderTargets[stageOutput];\n            }\n\n            // render stage\n            r.setRenderTarget(output);\n            if (output) {\n                r.clearTarget(output);\n            }\n            r.setViewport(\n                0, 0,\n                output ? output.width : view.camera.width,\n                output ? output.height : view.camera.height);\n\n            if (material) {\n                // postprocessing scene\n                this.mesh.material = material;\n                if (output) {\n                    this.mesh.material.transparent = false;\n                    this.mesh.material.opacity = 1.0;\n                } else {\n                    this.mesh.material.transparent = true;\n                    this.mesh.material.uniforms.opacity.value = opacity;\n                }\n                r.render(this.scene, this.camera, output);\n            } else {\n                r.render(view.scene, view.camera.camera3D, output);\n            }\n        }\n        previousStageOutput = stageOutput;\n    }\n\n    r.setClearAlpha(oldClearAlpha);\n};\n\n\nfunction _createRenderTargets(view) {\n    const renderTargets = [];\n    renderTargets.push(new THREE.WebGLRenderTarget(view.camera.width, view.camera.height));\n    renderTargets.push(new THREE.WebGLRenderTarget(view.camera.width, view.camera.height));\n    renderTargets.push(new THREE.WebGLRenderTarget(view.camera.width, view.camera.height));\n\n    renderTargets[RT.FULL_RES_0].texture.minFilter = THREE.LinearFilter;\n    renderTargets[RT.FULL_RES_0].texture.generateMipmaps = false;\n    renderTargets[RT.FULL_RES_0].depthBuffer = true;\n    renderTargets[RT.FULL_RES_0].texture.format = THREE.RGBAFormat;\n    renderTargets[RT.FULL_RES_0].texture.minFilter = THREE.NearestFilter;\n    renderTargets[RT.FULL_RES_0].texture.magFilter = THREE.NearestFilter;\n    renderTargets[RT.FULL_RES_0].depthTexture = new THREE.DepthTexture();\n    renderTargets[RT.FULL_RES_0].depthTexture.type = THREE.UnsignedShortType;\n\n    renderTargets[RT.FULL_RES_1].texture.minFilter = THREE.LinearFilter;\n    renderTargets[RT.FULL_RES_1].texture.generateMipmaps = false;\n    renderTargets[RT.FULL_RES_1].depthBuffer = true;\n    renderTargets[RT.FULL_RES_1].texture.format = THREE.RGBAFormat;\n    renderTargets[RT.FULL_RES_1].texture.minFilter = THREE.NearestFilter;\n    renderTargets[RT.FULL_RES_1].texture.magFilter = THREE.NearestFilter;\n    renderTargets[RT.FULL_RES_1].depthTexture = new THREE.DepthTexture();\n    renderTargets[RT.FULL_RES_1].depthTexture.type = THREE.UnsignedShortType;\n\n    renderTargets[RT.EDL_VALUES] = new THREE.WebGLRenderTarget(view.camera.width, view.camera.height);\n    renderTargets[RT.EDL_VALUES].texture.generateMipmaps = false;\n    renderTargets[RT.EDL_VALUES].depthBuffer = false;\n    renderTargets[RT.EDL_VALUES].texture.format = THREE.RGBAFormat;\n    renderTargets[RT.EDL_VALUES].texture.minFilter = THREE.NearestFilter;\n    renderTargets[RT.EDL_VALUES].texture.magFilter = THREE.NearestFilter;\n\n    return renderTargets;\n}\n\nexport default PointCloudRenderer;\n"]}