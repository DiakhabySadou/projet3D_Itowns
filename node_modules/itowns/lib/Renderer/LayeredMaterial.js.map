{"version":3,"sources":["../../src/Renderer/LayeredMaterial.js"],"names":["unpack1K","THREE","emptyTexture","Texture","coords","zoom","layerTypesCount","vector4","Vector4","fooTexture","UnpackDownscale","color","factor","bitSh","dot","getColorAtIdUv","nbTex","l","sL","toString","fillArray","array","remp","i","length","moveElementArray","oldIndex","newIndex","splice","moveElementsArraySafe","index","howMany","toIndex","parseInt","moved","apply","concat","LayeredMaterial","options","RawShaderMaterial","call","maxTexturesUnits","getMaxTextureUnitsCount","nbSamplers","Math","min","vertexShader","fragmentShaderHeader","side","vsOptions","useRgbaTextureElevation","Error","useColorTextureElevation","colorTextureElevationMinZ","toFixed","colorTextureElevationMaxZ","fragmentShader","textures","offsetScale","loadedTexturesCount","Array","paramLayers","layerTexturesCount","uniforms","dTextures_00","Uniform","dTextures_01","visibility","colorLayersCount","offsetScale_L00","offsetScale_L01","lightPosition","Vector3","distanceFog","uuid","selected","lightingEnabled","noTextureColor","Color","opacity","noDataValue","discardNoData","colorLayersId","elevationLayersId","isLogDepthBufferSupported","defines","USE_LOGDEPTHBUF","USE_LOGDEPTHBUF_EXT","prototype","constructor","dispose","dispatchEvent","type","max","setSequence","sequenceLayer","offsetLayer","offsetTexture","originalOffsets","value","originalTextures","layer","indexOfColorLayer","texturesCount","oldOffset","getTextureOffsetByLayerIndex","setTextureOffsetByLayerIndex","getColorLayersCount","removeColorLayer","layerIndex","offset","getTextureCountByLayerIndex","push","removedTexturesLayer","loadedTexturesLayerCount","reduce","sum","texture","j","mx","x","setTexturesLayer","layerType","slotOffset","setTexture","pitch","setLayerVisibility","slot","undefined","image","setColorLayerParameters","params","pushLayer","param","setLayerUV","tileMT","includes","setLayerFx","fx","setLayerOpacity","visible","setLayerTexturesCount","idLayer","layerId","indexOf","getLayerTextureOffset","setLightingOn","enable","z","idUV","y","getLayerUV","w","count","getLoadedTexturesCount","isColorLayerDownscaled","getColorLayerLevelById","colorLayerId","getElevationLayerLevel","getLayerTextures","textureIndex","slice","setUuid","setFogDistance","df","setSelected"],"mappings":"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","file":"LayeredMaterial.js","sourcesContent":["/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport * as THREE from 'three';\nimport TileVS from './Shader/TileVS.glsl';\nimport TileFS from './Shader/TileFS.glsl';\nimport pitUV from './Shader/Chunk/pitUV.glsl';\nimport PrecisionQualifier from './Shader/Chunk/PrecisionQualifier.glsl';\nimport Capabilities from '../Core/System/Capabilities';\nimport { l_COLOR, l_ELEVATION, EMPTY_TEXTURE_ZOOM } from './LayeredMaterialConstants';\n\nvar emptyTexture = new THREE.Texture();\nemptyTexture.coords = { zoom: EMPTY_TEXTURE_ZOOM };\n\nconst layerTypesCount = 2;\nvar vector4 = new THREE.Vector4(0.0, 0.0, 0.0, 0.0);\nvar fooTexture;\n\n// from three.js packDepthToRGBA\nconst UnpackDownscale = 255 / 256; // 0..1 -> fraction (excluding 1)\nexport function unpack1K(color, factor) {\n    var bitSh = new THREE.Vector4(\n        UnpackDownscale / (256.0 * 256.0 * 256.0),\n        UnpackDownscale / (256.0 * 256.0),\n        UnpackDownscale / 256.0,\n        UnpackDownscale);\n    return factor ? bitSh.dot(color) * factor : bitSh.dot(color);\n}\n\nvar getColorAtIdUv = function getColorAtIdUv(nbTex) {\n    if (!fooTexture) {\n        fooTexture = 'vec4 colorAtIdUv(sampler2D dTextures[TEX_UNITS],vec4 offsetScale[TEX_UNITS],int id, vec2 uv){\\n';\n        fooTexture += ' if (id == 0) return texture2D(dTextures[0],  pitUV(uv,offsetScale[0]));\\n';\n\n        for (var l = 1; l < nbTex; l++) {\n            var sL = l.toString();\n            fooTexture += `    else if (id == ${sL}) return texture2D(dTextures[${sL}],  pitUV(uv,offsetScale[${sL}]));\\n`;\n        }\n\n        fooTexture += 'else return vec4(0.0,0.0,0.0,0.0);}\\n';\n    }\n\n    return fooTexture;\n};\n\n// Array not suported in IE\nvar fillArray = function fillArray(array, remp) {\n    for (var i = 0; i < array.length; i++)\n        { array[i] = remp; }\n};\n\nvar moveElementArray = function moveElementArray(array, oldIndex, newIndex)\n{\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n};\n\n/* eslint-disable */\nvar moveElementsArraySafe = function moveElementsArraySafe(array,index, howMany, toIndex) {\n    index = parseInt(index) || 0;\n    index = index < 0 ? array.length + index : index;\n    toIndex = parseInt(toIndex) || 0;\n    toIndex = toIndex < 0 ? array.length + toIndex : toIndex;\n    if((toIndex > index) && (toIndex <= index + howMany)) {\n        toIndex = index + howMany;\n    }\n\n    var moved;\n    array.splice.apply(array, [toIndex, 0].concat(moved = array.splice(index, howMany)));\n    return moved;\n};\n/* eslint-enable */\n\nconst LayeredMaterial = function LayeredMaterial(options) {\n    THREE.RawShaderMaterial.call(this);\n\n    const maxTexturesUnits = Capabilities.getMaxTextureUnitsCount();\n    const nbSamplers = Math.min(maxTexturesUnits - 1, 16 - 2);\n    this.vertexShader = TileVS;\n\n    this.fragmentShaderHeader = `${PrecisionQualifier}\\nconst int   TEX_UNITS   = ${nbSamplers.toString()};\\n`;\n    this.fragmentShaderHeader += pitUV;\n\n    if (__DEBUG__) {\n        this.fragmentShaderHeader += '#define DEBUG\\n';\n    }\n\n    options = options || { };\n\n    if (options.side) {\n        this.side = options.side;\n    }\n\n    let vsOptions = '';\n    if (options.useRgbaTextureElevation) {\n        throw new Error('Restore this feature');\n    } else if (options.useColorTextureElevation) {\n        vsOptions = '\\n#define COLOR_TEXTURE_ELEVATION\\n';\n        vsOptions += `\\nconst float _minElevation = ${options.colorTextureElevationMinZ.toFixed(1)};\\n`;\n        vsOptions += `\\nconst float _maxElevation = ${options.colorTextureElevationMaxZ.toFixed(1)};\\n`;\n    } else {\n        // default\n        vsOptions = '\\n#define DATA_TEXTURE_ELEVATION\\n';\n    }\n\n    // see GLOBE FS\n    this.fragmentShaderHeader += getColorAtIdUv(nbSamplers);\n\n    this.fragmentShader = this.fragmentShaderHeader + TileFS;\n    this.vertexShader = PrecisionQualifier + vsOptions + TileVS;\n\n    // handle on textures uniforms\n    this.textures = [];\n    // handle on textures offsetScale uniforms\n    this.offsetScale = [];\n    // handle Loaded textures count by layer's type uniforms\n    this.loadedTexturesCount = [0, 0];\n\n    // Uniform three js needs no empty array\n    // WARNING TODO: prevent empty slot, but it's not the solution\n    this.offsetScale[l_COLOR] = Array(nbSamplers);\n    this.offsetScale[l_ELEVATION] = [vector4];\n    fillArray(this.offsetScale[l_COLOR], vector4);\n\n    this.textures[l_ELEVATION] = [emptyTexture];\n    this.textures[l_COLOR] = Array(nbSamplers);\n    var paramLayers = Array(8);\n    this.layerTexturesCount = Array(8);\n\n    fillArray(this.textures[l_COLOR], emptyTexture);\n    fillArray(paramLayers, vector4);\n    fillArray(this.layerTexturesCount, 0);\n\n    // Elevation texture\n    this.uniforms.dTextures_00 = new THREE.Uniform(this.textures[l_ELEVATION]);\n\n    // Color textures's layer\n    this.uniforms.dTextures_01 = new THREE.Uniform(this.textures[l_COLOR]);\n\n    // Visibility layer\n    this.uniforms.visibility = new THREE.Uniform([true, true, true, true, true, true, true, true]);\n\n    // Loaded textures count by layer's type\n    this.uniforms.loadedTexturesCount = new THREE.Uniform(this.loadedTexturesCount);\n\n    // Count color layers\n    this.uniforms.colorLayersCount = new THREE.Uniform(1);\n\n    // Layer setting\n    // Offset color texture slot | Projection | fx | Opacity\n    this.uniforms.paramLayers = new THREE.Uniform(paramLayers);\n\n    // Elevation texture cropping\n    this.uniforms.offsetScale_L00 = new THREE.Uniform(this.offsetScale[l_ELEVATION]);\n\n    // Color texture cropping\n    this.uniforms.offsetScale_L01 = new THREE.Uniform(this.offsetScale[l_COLOR]);\n\n    // Light position\n    this.uniforms.lightPosition = new THREE.Uniform(new THREE.Vector3(-0.5, 0.0, 1.0));\n\n    this.uniforms.distanceFog = new THREE.Uniform(1000000000.0);\n\n    this.uniforms.uuid = new THREE.Uniform(0);\n\n    this.uniforms.selected = new THREE.Uniform(false);\n\n    this.uniforms.lightingEnabled = new THREE.Uniform(false);\n\n    this.uniforms.noTextureColor = new THREE.Uniform(new THREE.Color(0.04, 0.23, 0.35));\n\n    this.uniforms.opacity = new THREE.Uniform(1.0);\n\n    this.uniforms.noDataValue = new THREE.Uniform(options.noDataValue || 0.0);\n    this.uniforms.discardNoData = new THREE.Uniform(!!options.discardNoData);\n\n    this.colorLayersId = [];\n    this.elevationLayersId = [];\n\n    if (Capabilities.isLogDepthBufferSupported()) {\n        this.defines = {\n            USE_LOGDEPTHBUF: 1,\n            USE_LOGDEPTHBUF_EXT: 1,\n        };\n    } else {\n        this.defines = {};\n    }\n\n    if (__DEBUG__) {\n        this.checkLayersConsistency = function checkLayersConsistency(node, imageryLayers) {\n            for (const layer of imageryLayers) {\n                const index = this.indexOfColorLayer(layer.id);\n                if (index < 0) {\n                    continue;\n                }\n\n                const offset = this.getTextureOffsetByLayerIndex(index);\n                const count = this.getTextureCountByLayerIndex(index);\n                let total = 0;\n                for (let i = 0; i < this.loadedTexturesCount[1]; i++) {\n                    if (!this.uniforms.dTextures_01.value[i].image) {\n                        throw new Error(`${node.id} - Missing texture at index ${i} for layer ${layer.id}`);\n                    }\n\n                    const critere1 = (offset <= i && i < (offset + count));\n                    const search = layer.name ? `LAYERS=${layer.name}&` : `LAYER=${layer.options.name}&`;\n                    const critere2 = this.uniforms.dTextures_01.value[i].image.currentSrc.indexOf(search) > 0;\n\n                    if (critere1 && !critere2) {\n                        throw new Error(`${node.id} - Texture should belong to ${layer.id} but comes from ${this.uniforms.dTextures_01.value[i].image.currentSrc}`);\n                    } else if (!critere1 && critere2) {\n                        throw new Error(`${node.id} - Texture shouldn't belong to ${layer.id}`);\n                    } else if (critere1) {\n                        total++;\n                    }\n                }\n                if (total != count) {\n                    throw new Error(`${node.id} - Invalid total texture count. Found: ${total}, expected: ${count} for ${layer.id}`);\n                }\n            }\n        };\n    }\n};\n\nLayeredMaterial.prototype = Object.create(THREE.RawShaderMaterial.prototype);\nLayeredMaterial.prototype.constructor = LayeredMaterial;\n\nLayeredMaterial.prototype.dispose = function dispose() {\n    // TODO: WARNING  verify if textures to dispose aren't attached with ancestor\n\n    this.dispatchEvent({\n        type: 'dispose',\n    });\n\n    for (let l = 0; l < layerTypesCount; l++) {\n        for (let i = 0, max = this.textures[l].length; i < max; i++) {\n            if (this.textures[l][i] instanceof THREE.Texture) {\n                this.textures[l][i].dispose();\n            }\n        }\n    }\n};\n\nLayeredMaterial.prototype.setSequence = function setSequence(sequenceLayer) {\n    let offsetLayer = 0;\n    let offsetTexture = 0;\n\n    const originalOffsets = new Array(...this.uniforms.offsetScale_L01.value);\n    const originalTextures = new Array(...this.uniforms.dTextures_01.value);\n\n    for (let l = 0; l < sequenceLayer.length; l++) {\n        const layer = sequenceLayer[l];\n        const oldIndex = this.indexOfColorLayer(layer);\n        if (oldIndex > -1) {\n            const newIndex = l - offsetLayer;\n            const texturesCount = this.layerTexturesCount[oldIndex];\n\n            // individual values are swapped in place\n            if (newIndex !== oldIndex) {\n                moveElementArray(this.colorLayersId, oldIndex, newIndex);\n                moveElementArray(this.layerTexturesCount, oldIndex, newIndex);\n                moveElementArray(this.uniforms.paramLayers.value, oldIndex, newIndex);\n                moveElementArray(this.uniforms.visibility.value, oldIndex, newIndex);\n            }\n            const oldOffset = this.getTextureOffsetByLayerIndex(newIndex);\n            // consecutive values are copied from original\n            for (let i = 0; i < texturesCount; i++) {\n                this.uniforms.offsetScale_L01.value[offsetTexture + i] = originalOffsets[oldOffset + i];\n                this.uniforms.dTextures_01.value[offsetTexture + i] = originalTextures[oldOffset + i];\n            }\n\n\n            this.setTextureOffsetByLayerIndex(newIndex, offsetTexture);\n            offsetTexture += texturesCount;\n        } else {\n            offsetLayer++;\n        }\n    }\n\n    this.uniforms.colorLayersCount.value = this.getColorLayersCount();\n};\n\nLayeredMaterial.prototype.removeColorLayer = function removeColorLayer(layer) {\n    const layerIndex = this.indexOfColorLayer(layer);\n\n    if (layerIndex === -1) {\n        return;\n    }\n\n    const offset = this.getTextureOffsetByLayerIndex(layerIndex);\n    const texturesCount = this.getTextureCountByLayerIndex(layerIndex);\n\n    // remove layer\n    this.colorLayersId.splice(layerIndex, 1);\n    this.uniforms.colorLayersCount.value = this.getColorLayersCount();\n\n    // remove nb textures\n    this.layerTexturesCount.splice(layerIndex, 1);\n    this.layerTexturesCount.push(0);\n\n    // Remove Layers Parameters\n    this.uniforms.paramLayers.value.splice(layerIndex, 1);\n    this.uniforms.paramLayers.value.push(vector4);\n\n    // Remove visibility Parameters\n    this.uniforms.visibility.value.splice(layerIndex, 1);\n    this.uniforms.visibility.value.push(true);\n\n    // Dispose Layers textures\n    for (let i = offset, max = offset + texturesCount; i < max; i++) {\n        if (this.textures[l_COLOR][i] instanceof THREE.Texture) {\n            this.textures[l_COLOR][i].dispose();\n        }\n    }\n\n    const removedTexturesLayer = this.textures[l_COLOR].splice(offset, texturesCount);\n    this.offsetScale[l_COLOR].splice(offset, texturesCount);\n\n    const loadedTexturesLayerCount = removedTexturesLayer.reduce((sum, texture) => sum + (texture.coords.zoom > EMPTY_TEXTURE_ZOOM), 0);\n\n    // refill remove textures\n    for (let i = 0, max = texturesCount; i < max; i++) {\n        this.textures[l_COLOR].push(emptyTexture);\n        this.offsetScale[l_COLOR].push(vector4);\n    }\n\n    // Update slot start texture layer\n    for (let j = layerIndex, mx = this.getColorLayersCount(); j < mx; j++) {\n        this.uniforms.paramLayers.value[j].x -= texturesCount;\n    }\n\n    this.loadedTexturesCount[l_COLOR] -= loadedTexturesLayerCount;\n\n    this.uniforms.offsetScale_L01.value = this.offsetScale[l_COLOR];\n    this.uniforms.dTextures_01.value = this.textures[l_COLOR];\n};\n\nLayeredMaterial.prototype.setTexturesLayer = function setTexturesLayer(textures, layerType, layer) {\n    const index = this.indexOfColorLayer(layer);\n    const slotOffset = this.getTextureOffsetByLayerIndex(index);\n    for (let i = 0, max = textures.length; i < max; i++) {\n        if (textures[i]) {\n            if (textures[i].texture !== null) {\n                this.setTexture(textures[i].texture, layerType, i + (slotOffset || 0), textures[i].pitch);\n            } else {\n                this.setLayerVisibility(index, false);\n                break;\n            }\n        }\n    }\n};\n\nLayeredMaterial.prototype.setTexture = function setTexture(texture, layerType, slot, offsetScale) {\n    if (this.textures[layerType][slot] === undefined || this.textures[layerType][slot].image === undefined) {\n        this.loadedTexturesCount[layerType] += 1;\n    }\n\n    // BEWARE: array [] -> size: 0; array [10]=\"wao\" -> size: 11\n    this.textures[layerType][slot] = texture || emptyTexture;\n    this.offsetScale[layerType][slot] = offsetScale || new THREE.Vector4(0.0, 0.0, 1.0, 1.0);\n};\n\nLayeredMaterial.prototype.setColorLayerParameters = function setColorLayerParameters(params) {\n    if (this.getColorLayersCount() === 0) {\n        for (let l = 0; l < params.length; l++) {\n            this.pushLayer(params[l]);\n        }\n    }\n};\n\nLayeredMaterial.prototype.pushLayer = function pushLayer(param) {\n    const newIndex = this.getColorLayersCount();\n    const offset = newIndex === 0 ? 0 : this.getTextureOffsetByLayerIndex(newIndex - 1) + this.getTextureCountByLayerIndex(newIndex - 1);\n\n    this.uniforms.paramLayers.value[newIndex] = new THREE.Vector4();\n\n    this.setTextureOffsetByLayerIndex(newIndex, offset);\n    this.setLayerUV(newIndex, param.tileMT.includes('PM') ? param.texturesCount : 0);\n    this.setLayerFx(newIndex, param.fx);\n    this.setLayerOpacity(newIndex, param.opacity);\n    this.setLayerVisibility(newIndex, param.visible);\n    this.setLayerTexturesCount(newIndex, param.texturesCount);\n    this.colorLayersId.push(param.idLayer);\n\n    this.uniforms.colorLayersCount.value = this.getColorLayersCount();\n};\n\nLayeredMaterial.prototype.indexOfColorLayer = function indexOfColorLayer(layerId) {\n    return this.colorLayersId.indexOf(layerId);\n};\n\nLayeredMaterial.prototype.getColorLayersCount = function getColorLayersCount() {\n    return this.colorLayersId.length;\n};\n\nLayeredMaterial.prototype.getTextureOffsetByLayerIndex = function getTextureOffsetByLayerIndex(index) {\n    return this.uniforms.paramLayers.value[index].x;\n};\n\nLayeredMaterial.prototype.getTextureCountByLayerIndex = function getTextureCountByLayerIndex(index) {\n    return this.layerTexturesCount[index];\n};\n\nLayeredMaterial.prototype.getLayerTextureOffset = function getLayerTextureOffset(layerId) {\n    const index = this.indexOfColorLayer(layerId);\n    return index > -1 ? this.getTextureOffsetByLayerIndex(index) : -1;\n};\n\nLayeredMaterial.prototype.setLightingOn = function setLightingOn(enable) {\n    this.uniforms.lightingEnabled.value = enable;\n};\n\nLayeredMaterial.prototype.setLayerFx = function setLayerFx(index, fx) {\n    this.uniforms.paramLayers.value[index].z = fx;\n};\n\nLayeredMaterial.prototype.setTextureOffsetByLayerIndex = function setTextureOffsetByLayerIndex(index, offset) {\n    this.uniforms.paramLayers.value[index].x = offset;\n};\n\nLayeredMaterial.prototype.setLayerUV = function setLayerUV(index, idUV) {\n    this.uniforms.paramLayers.value[index].y = idUV;\n};\n\nLayeredMaterial.prototype.getLayerUV = function setLayerUV(index) {\n    return this.uniforms.paramLayers.value[index].y;\n};\n\nLayeredMaterial.prototype.setLayerOpacity = function setLayerOpacity(index, opacity) {\n    if (this.uniforms.paramLayers.value[index])\n        { this.uniforms.paramLayers.value[index].w = opacity; }\n};\n\nLayeredMaterial.prototype.setLayerVisibility = function setLayerVisibility(index, visible) {\n    this.uniforms.visibility.value[index] = visible;\n};\n\nLayeredMaterial.prototype.setLayerTexturesCount = function setLayerTexturesCount(index, count) {\n    this.layerTexturesCount[index] = count;\n};\n\nLayeredMaterial.prototype.getLoadedTexturesCount = function getLoadedTexturesCount() {\n    return this.loadedTexturesCount[l_ELEVATION] + this.loadedTexturesCount[l_COLOR];\n};\n\nLayeredMaterial.prototype.isColorLayerDownscaled = function isColorLayerDownscaled(layerId, zoom) {\n    return this.textures[l_COLOR][this.getLayerTextureOffset(layerId)] &&\n        this.textures[l_COLOR][this.getLayerTextureOffset(layerId)].coords.zoom < zoom;\n};\n\nLayeredMaterial.prototype.getColorLayerLevelById = function getColorLayerLevelById(colorLayerId) {\n    const index = this.indexOfColorLayer(colorLayerId);\n    if (index === -1) {\n        return EMPTY_TEXTURE_ZOOM;\n    }\n    const slot = this.getTextureOffsetByLayerIndex(index);\n    const texture = this.textures[l_COLOR][slot];\n\n    return texture ? texture.coords.zoom : EMPTY_TEXTURE_ZOOM;\n};\n\nLayeredMaterial.prototype.getElevationLayerLevel = function getElevationLayerLevel() {\n    return this.textures[l_ELEVATION][0].coords.zoom;\n};\n\nLayeredMaterial.prototype.getLayerTextures = function getLayerTextures(layerType, layerId) {\n    if (layerType === l_ELEVATION) {\n        return this.textures[l_ELEVATION];\n    }\n\n    const index = this.indexOfColorLayer(layerId);\n\n    if (index !== -1) {\n        const count = this.getTextureCountByLayerIndex(index);\n        const textureIndex = this.getTextureOffsetByLayerIndex(index);\n        return this.textures[l_COLOR].slice(textureIndex, textureIndex + count);\n    } else {\n        throw new Error(`Invalid layer id \"${layerId}\"`);\n    }\n};\n\nLayeredMaterial.prototype.setUuid = function setUuid(uuid) {\n    this.uniforms.uuid.value = uuid;\n};\n\nLayeredMaterial.prototype.setFogDistance = function setFogDistance(df) {\n    this.uniforms.distanceFog.value = df;\n};\n\nLayeredMaterial.prototype.setSelected = function setSelected(selected) {\n    this.uniforms.selected.value = selected;\n};\n\n\nexport default LayeredMaterial;\n"]}