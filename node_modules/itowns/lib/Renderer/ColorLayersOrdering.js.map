{"version":3,"sources":["../../src/Renderer/ColorLayersOrdering.js"],"names":["updateLayersOrdering","geometryLayer","imageryLayers","sequence","getColorLayersIdOrderedBySequence","cO","object","changeSequenceLayers","level0Nodes","node","traverse","COLOR_LAYERS_ORDER_CHANGED","ColorLayersOrdering","moveLayerUp","view","layerId","getLayers","l","type","layer","id","previousSequence","wgs84TileLayer","dispatchEvent","previous","new","notifyChange","Error","moveLayerDown","moveLayerToIndex","newIndex"],"mappings":"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","file":"ColorLayersOrdering.js","sourcesContent":["import { ImageryLayers } from '../Core/Layer/Layer';\n\nfunction updateLayersOrdering(geometryLayer, imageryLayers) {\n    var sequence = ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);\n    var cO = function cO(object) {\n        if (object.changeSequenceLayers) {\n            object.changeSequenceLayers(sequence);\n        }\n    };\n\n    for (const node of geometryLayer.level0Nodes) {\n        node.traverse(cO);\n    }\n}\n\nexport const COLOR_LAYERS_ORDER_CHANGED = 'layers-order-changed';\n\nexport const ColorLayersOrdering = {\n    /**\n     * Moves up in the layer list. This function has no effect if the layer is moved to its current index.\n     * @function moveLayerUp\n     * @param      {View}  view the viewer\n     * @param      {string}  layerId   The layer's idendifiant\n     * @example\n     * itowns.ColorLayersOrdering.moveLayerUp(viewer, 'idLayerToUp');\n     */\n    moveLayerUp: function moveLayerUp(view, layerId) {\n        const imageryLayers = view.getLayers(l => l.type === 'color');\n        const layer = view.getLayers(l => l.id === layerId)[0];\n        if (layer) {\n            const previousSequence = ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);\n            ImageryLayers.moveLayerUp(layer, imageryLayers);\n            updateLayersOrdering(view.wgs84TileLayer, imageryLayers);\n            view.dispatchEvent({ type: COLOR_LAYERS_ORDER_CHANGED,\n                previous: { sequence: previousSequence },\n                new: { sequence: ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers) },\n            });\n            view.notifyChange(true);\n        } else {\n            throw new Error(`${layerId} isn't color layer`);\n        }\n    },\n    /**\n     * Moves down in the layer list. This function has no effect if the layer is moved to its current index.\n     * @function moveLayerDown\n     * @param      {View}  view the viewer\n     * @param      {string}  layerId   The layer's idendifiant\n     * @example\n     * itowns.ColorLayersOrdering.moveLayerDown(viewer, 'idLayerToDown');\n     */\n    moveLayerDown: function moveLayerDown(view, layerId) {\n        const imageryLayers = view.getLayers(l => l.type === 'color');\n        const layer = view.getLayers(l => l.id === layerId)[0];\n        if (layer) {\n            const previousSequence = ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);\n            ImageryLayers.moveLayerDown(layer, imageryLayers);\n            updateLayersOrdering(view.wgs84TileLayer, imageryLayers);\n            view.dispatchEvent({ type: COLOR_LAYERS_ORDER_CHANGED,\n                previous: { sequence: previousSequence },\n                new: { sequence: ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers) },\n            });\n            view.notifyChange(true);\n        } else {\n            throw new Error(`${layerId} isn't color layer`);\n        }\n    },\n    /**\n     * Moves a specific layer to a specific index in the layer list. This function has no effect if the layer is moved to its current index.\n     * @function moveLayerToIndex\n     * @param      {View}  view the viewer\n     * @param      {string}  layerId   The layer's idendifiant\n     * @param      {number}  newIndex   The new index\n     * @example\n     * itowns.ColorLayersOrdering.moveLayerToIndex(viewer, 'idLayerToChangeIndex', 2);\n     */\n    moveLayerToIndex: function moveLayerToIndex(view, layerId, newIndex) {\n        const imageryLayers = view.getLayers(l => l.type === 'color');\n        const layer = view.getLayers(l => l.id === layerId)[0];\n        if (layer) {\n            const previousSequence = ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);\n            ImageryLayers.moveLayerToIndex(layer, newIndex, imageryLayers);\n            updateLayersOrdering(view.wgs84TileLayer, imageryLayers);\n            view.dispatchEvent({ type: COLOR_LAYERS_ORDER_CHANGED,\n                previous: { sequence: previousSequence },\n                new: { sequence: ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers) },\n            });\n            view.notifyChange(true);\n        } else {\n            throw new Error(`${layerId} isn't color layer`);\n        }\n    },\n};\n"]}