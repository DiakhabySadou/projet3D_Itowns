{"version":3,"sources":["../../../src/Core/Math/Binary.js"],"names":["Binary","ToUint32","x","ToInt32","toChar","nMask","nFlag","nShifted","sMask","String"],"mappings":";;;;;AAAA,IAAMA,SAAS,EAAf;;AAEA;;;AAGA;AACA;AACA;AACAA,OAAOC,QAAP,GAAkB,UAAkBC,CAAlB,EAAqB;AACnC,WAAOA,MAAM,CAAb;AACH,CAFD;;AAIAF,OAAOG,OAAP,GAAiB,UAAiBD,CAAjB,EAAoB;AACjC,WAAOA,KAAK,CAAZ;AACH,CAFD;;AAKA;AACAF,OAAOI,MAAP,GAAgB,UAAgBC,KAAhB,EAAuB;AACnC,QAAIC,cAAJ;AACA,QAAIC,WAAWF,KAAf;AACA,QAAIG,QAAQ,EAAZ;AACA,SAAKF,QAAQ,CAAb,EAAgBA,QAAQ,EAAxB,EAA4BA,OAA5B,EAAqC;AACjCE,iBAASC,OAAOF,aAAa,EAApB,CAAT;AACAA,qBAAa,CAAb;AACH;AACD,WAAOC,KAAP;AACH,CATD;;AAWA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;kBAqBeR,M","file":"Binary.js","sourcesContent":["const Binary = {};\n\n// For documentation see http://www.2ality.com/2012/02/js-integers.html\n\n\n// Unsigned right-shifting is simple: just move the bits,\n// while shifting in zeros from the left.\n// The sign is not preserved, the result is always a Uint32\nBinary.ToUint32 = function ToUint32(x) {\n    return x >>> 0;\n};\n\nBinary.ToInt32 = function ToInt32(x) {\n    return x >> 0;\n};\n\n\n// Convert flag to char\nBinary.toChar = function toChar(nMask) {\n    let nFlag;\n    let nShifted = nMask;\n    let sMask = '';\n    for (nFlag = 0; nFlag < 32; nFlag++) {\n        sMask += String(nShifted >>> 31);\n        nShifted <<= 1;\n    }\n    return sMask;\n};\n\n// / ! \\ WARNING is not supported on WebGl Glsl !!!\n\n// Example  Flag in javascript\n// offset Textures | Projection | Visible | Opacity\n//     2^5/32      |   2^2/4    |  2^1/2  | 2^8/256   ---> 16\n//       0               5           7          8\n/* Example to write flag and read flag\n\nvar offset = 5;\nvar projection = 1;\nvar visible = 0;\nvar opacity = 0.2;\n\nvar flag = 0;\n\nflag = flag | (offset);\nflag = flag | ((projection) << 5);\nflag = flag | ((visible) << 7 );\nflag = flag | (Binary.ToUint32(Math.floor(opacity * 255)) << 8);\n\nvar g_offset= Binary.ToInt32(flag & Binary.ToUint32(32-1));\nvar g_projection = Binary.ToInt32((flag >> 5) & Binary.ToUint32(4-1));\nvar g_visible = Binary.ToInt32((flag >> 7) & Binary.ToUint32(2-1));\nvar g_opacity = Binary.ToInt32((flag >> 8) & Binary.ToUint32(256-1));\n\n*/\n\nexport default Binary;\n"]}