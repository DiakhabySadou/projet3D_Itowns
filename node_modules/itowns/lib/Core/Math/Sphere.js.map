{"version":3,"sources":["../../../src/Core/Math/Sphere.js"],"names":["THREE","Sphere","center","radius","Vector3","prototype","constructor","setCenter","copy","setRadius","vector","intersectWithRayNoMiss","ray","pc","closestPointToPoint","a","length","d","b","mirrorPoint","clone","setLength","direction","subVectors","origin","normalize","Math","sqrt","addVectors","intersectWithRay","undefined"],"mappings":";;;;;;AAAA;;IAAYA,K;;;;AAEZ,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC5B,SAAKD,MAAL,GAAcA,UAAU,IAAIF,MAAMI,OAAV,EAAxB;AACA,SAAKD,MAAL,GAAcA,UAAU,GAAxB;AACH;;AAEDF,OAAOI,SAAP,CAAiBC,WAAjB,GAA+BL,MAA/B;;AAEAA,OAAOI,SAAP,CAAiBE,SAAjB,GAA6B,UAAmBL,MAAnB,EAA2B;AACpD,SAAKA,MAAL,CAAYM,IAAZ,CAAiBN,MAAjB;AACH,CAFD;;AAIAD,OAAOI,SAAP,CAAiBI,SAAjB,GAA6B,UAAmBN,MAAnB,EAA2B;AACpD,SAAKA,MAAL,GAAcA,MAAd;AACH,CAFD;;AAIA,IAAIO,SAAS,IAAIV,MAAMI,OAAV,EAAb;;AAEAH,OAAOI,SAAP,CAAiBM,sBAAjB,GAA0C,UAAgCC,GAAhC,EAAqC;AAC3E,QAAIC,KAAKD,IAAIE,mBAAJ,CAAwB,KAAKZ,MAA7B,CAAT;AACA,QAAIa,IAAIF,GAAGG,MAAH,EAAR;AACA,QAAIC,UAAJ;AACA,QAAIC,UAAJ;;AAEA;AACA;AACA,QAAIH,IAAI,KAAKZ,MAAb,EAAqB;AACjB;AACA;AACA,YAAMgB,cAAcN,GAAGO,KAAH,GAAWC,SAAX,CAAqB,KAAKlB,MAAL,GAAc,CAAd,GAAkBY,CAAvC,CAApB;;AAEA;AACAE,YAAIL,IAAIU,SAAJ,CAAcC,UAAd,CAAyBJ,WAAzB,EAAsCP,IAAIY,MAA1C,EAAkDC,SAAlD,EAAJ;;AAEA;AACAZ,aAAKD,IAAIE,mBAAJ,CAAwB,KAAKZ,MAA7B,CAAL;AACAa,YAAIF,GAAGG,MAAH,EAAJ;;AAEAE,YAAIQ,KAAKC,IAAL,CAAU,KAAKxB,MAAL,GAAc,KAAKA,MAAnB,GAA4BY,IAAIA,CAA1C,CAAJ;AACAE,UAAEI,SAAF,CAAYH,CAAZ;;AAEA,eAAOR,OAAOkB,UAAP,CAAkBf,EAAlB,EAAsBI,CAAtB,CAAP;AACH;;AAED;AACAA,QAAIL,IAAIU,SAAJ,CAAcF,KAAd,EAAJ;AACAF,QAAIQ,KAAKC,IAAL,CAAU,KAAKxB,MAAL,GAAc,KAAKA,MAAnB,GAA4BY,IAAIA,CAA1C,CAAJ;AACAE,MAAEI,SAAF,CAAYH,CAAZ;;AAEA,WAAOR,OAAOa,UAAP,CAAkBV,EAAlB,EAAsBI,CAAtB,CAAP;AACH,CAhCD;;AAkCAhB,OAAOI,SAAP,CAAiBwB,gBAAjB,GAAoC,UAA0BjB,GAA1B,EAA+B;AAC/D,QAAMC,KAAKD,IAAIE,mBAAJ,CAAwB,KAAKZ,MAA7B,CAAX;AACA,QAAMa,IAAIF,GAAGG,MAAH,EAAV;AACA,QAAID,IAAI,KAAKZ,MAAb,EAAqB,OAAO2B,SAAP;AACrB,QAAMb,IAAIL,IAAIU,SAAJ,CAAcF,KAAd,EAAV;AACA,QAAMF,IAAIQ,KAAKC,IAAL,CAAU,KAAKxB,MAAL,GAAc,KAAKA,MAAnB,GAA4BY,IAAIA,CAA1C,CAAV;AACAE,MAAEI,SAAF,CAAYH,CAAZ;AACA,WAAOR,OAAOa,UAAP,CAAkBV,EAAlB,EAAsBI,CAAtB,CAAP;AACH,CARD;;kBAUehB,M","file":"Sphere.js","sourcesContent":["import * as THREE from 'three';\n\nfunction Sphere(center, radius) {\n    this.center = center || new THREE.Vector3();\n    this.radius = radius || 1.0;\n}\n\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.setCenter = function setCenter(center) {\n    this.center.copy(center);\n};\n\nSphere.prototype.setRadius = function setRadius(radius) {\n    this.radius = radius;\n};\n\nvar vector = new THREE.Vector3();\n\nSphere.prototype.intersectWithRayNoMiss = function intersectWithRayNoMiss(ray) {\n    let pc = ray.closestPointToPoint(this.center);\n    let a = pc.length();\n    let d;\n    let b;\n\n    // TODO: recompute mirror ray\n    // If the ray miss sphere, we recompute the new ray with point symetric to tangent sphere\n    if (a > this.radius) {\n        // mirror point is symetric of pc\n        // The mirror ray must pass through the point mirrorPoint\n        const mirrorPoint = pc.clone().setLength(this.radius * 2 - a);\n\n        // Compute the new direction\n        d = ray.direction.subVectors(mirrorPoint, ray.origin).normalize();\n\n        // Classic intersection with the new ray\n        pc = ray.closestPointToPoint(this.center);\n        a = pc.length();\n\n        b = Math.sqrt(this.radius * this.radius - a * a);\n        d.setLength(b);\n\n        return vector.addVectors(pc, d);\n    }\n\n    // TODO: check all intersections : if (ray.origin.length() > this.radius)\n    d = ray.direction.clone();\n    b = Math.sqrt(this.radius * this.radius - a * a);\n    d.setLength(b);\n\n    return vector.subVectors(pc, d);\n};\n\nSphere.prototype.intersectWithRay = function intersectWithRay(ray) {\n    const pc = ray.closestPointToPoint(this.center);\n    const a = pc.length();\n    if (a > this.radius) return undefined;\n    const d = ray.direction.clone();\n    const b = Math.sqrt(this.radius * this.radius - a * a);\n    d.setLength(b);\n    return vector.subVectors(pc, d);\n};\n\nexport default Sphere;\n"]}