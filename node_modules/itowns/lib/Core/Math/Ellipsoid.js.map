{"version":3,"sources":["../../../src/Core/Math/Ellipsoid.js"],"names":["THREE","Ellipsoid","size","rayon_1","x","rayon_2","y","rayon_3","z","Vector3","_radiiSquared","_oneOverRadiiSquared","prototype","geodeticSurfaceNormal","cartesian","result","normalize","geodeticSurfaceNormalCartographic","coordCarto","longitude","RADIAN","latitude","cosLatitude","Math","cos","sin","setSize","cartographicToCartesian","k","n","multiplyVectors","gamma","sqrt","dot","divideScalar","multiplyScalar","altitude","add","cartesianToCartographic","position","R","a","b","e","abs","f","rsqXY","theta","atan2","nu","atan","sinu","cosu","phi","h","PI","cartographicToCartesianArray","coordCartoArray","cartesianArray","i","length","push","intersection","ray","EPSILON","O_C","origin","dir","direction","c","d","t1","t2","t","inter","addVectors","clone","setLength","computeDistance","coordCarto1","coordCarto2","longitude1","latitude1","longitude2","latitude2","distRad","acos","latMoy","rho","N","distMeter"],"mappings":"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","file":"Ellipsoid.js","sourcesContent":["/**\n * Generated On: 2015-10-5\n * Class: Ellipsoid\n * Description: Classe math√©matique de  l'ellispoide\n */\n\n\nimport * as THREE from 'three';\nimport { UNIT } from '../Geographic/Coordinates';\n\nfunction Ellipsoid(size) {\n    // Constructor\n\n\n    this.rayon_1 = size.x;\n    this.rayon_2 = size.y;\n    this.rayon_3 = size.z;\n\n    this.size = new THREE.Vector3(size.x, size.y, size.z);\n\n    this._radiiSquared = new THREE.Vector3(size.x * size.x, size.y * size.y, size.z * size.z);\n\n    this._oneOverRadiiSquared = new THREE.Vector3(size.x === 0.0 ? 0.0 : 1.0 / (size.x * size.x),\n        size.y === 0.0 ? 0.0 : 1.0 / (size.y * size.y),\n        size.z === 0.0 ? 0.0 : 1.0 / (size.z * size.z));\n}\n\nEllipsoid.prototype.geodeticSurfaceNormal = function geodeticSurfaceNormal(cartesian) {\n    var result = new THREE.Vector3(\n        cartesian.x() * this._oneOverRadiiSquared.x,\n        cartesian.y() * this._oneOverRadiiSquared.y,\n        cartesian.z() * this._oneOverRadiiSquared.z);\n    return result.normalize();\n};\n\nEllipsoid.prototype.geodeticSurfaceNormalCartographic = function geodeticSurfaceNormalCartographic(coordCarto) {\n    var longitude = coordCarto.longitude(UNIT.RADIAN);\n    var latitude = coordCarto.latitude(UNIT.RADIAN);\n    var cosLatitude = Math.cos(latitude);\n\n    var x = cosLatitude * Math.cos(longitude);\n    var y = cosLatitude * Math.sin(longitude);\n    var z = Math.sin(latitude);\n\n    var result = new THREE.Vector3(x, y, z);\n\n    return result.normalize();\n};\n\nEllipsoid.prototype.setSize = function setSize(size) {\n    this.rayon_1 = size.x;\n    this.rayon_2 = size.y;\n    this.rayon_3 = size.z;\n\n    this._radiiSquared = new THREE.Vector3(size.x * size.x, size.y * size.y, size.z * size.z);\n};\n\n\nEllipsoid.prototype.cartographicToCartesian = function cartographicToCartesian(coordCarto) {\n    // var n;\n    var k = new THREE.Vector3();\n    var n = this.geodeticSurfaceNormalCartographic(coordCarto);\n\n    k.multiplyVectors(this._radiiSquared, n);\n\n    var gamma = Math.sqrt(n.dot(k));\n\n    k.divideScalar(gamma);\n\n    n.multiplyScalar(coordCarto.altitude());\n\n    // n.multiplyScalar(0.0);\n\n    return k.add(n);\n};\n\n/**\n * @typedef {Object} EllipsoidCoordinate\n * @property {number} latitude\n * @property {number} longitude\n * @property {number} h - height\n */\n/**\n * Convert cartesian coordinates to geographic according to the current ellipsoid of revolution.\n *\n * @param {Object} position - The coordinate to convert\n * @param {number} position.x\n * @param {number} position.y\n * @param {number} position.z\n * @returns {EllipsoidCoordinate} an object describing the coordinates on the reference ellipsoid, angles are in degree\n */\nEllipsoid.prototype.cartesianToCartographic = function cartesianToCartographic(position) {\n    // for details, see for example http://www.linz.govt.nz/data/geodetic-system/coordinate-conversion/geodetic-datum-conversions/equations-used-datum\n    // TODO the following is only valable for oblate ellipsoid of revolution. do we want to support triaxial ellipsoid?\n    const R = Math.sqrt(position.x * position.x + position.y * position.y + position.z * position.z);\n    const a = this.rayon_1; // x\n    const b = this.rayon_3; // z\n    const e = Math.abs((a * a - b * b) / (a * a));\n    const f = 1 - Math.sqrt(1 - e);\n    const rsqXY = Math.sqrt(position.x * position.x + position.y * position.y);\n\n    const theta = Math.atan2(position.y, position.x);\n    const nu = Math.atan(position.z / rsqXY * ((1 - f) + e * a / R));\n\n    const sinu = Math.sin(nu);\n    const cosu = Math.cos(nu);\n\n    const phi = Math.atan((position.z * (1 - f) + e * a * sinu * sinu * sinu) / ((1 - f) * (rsqXY - e * a * cosu * cosu * cosu)));\n\n    const h = (rsqXY * Math.cos(phi)) + position.z * Math.sin(phi) - a * Math.sqrt(1 - e * Math.sin(phi) * Math.sin(phi));\n\n    return { longitude: theta * 180 / Math.PI, latitude: phi * 180 / Math.PI, h };\n};\n\nEllipsoid.prototype.cartographicToCartesianArray = function cartographicToCartesianArray(coordCartoArray) {\n    var cartesianArray = [];\n    for (var i = 0; i < coordCartoArray.length; i++) {\n        cartesianArray.push(this.cartographicToCartesian(coordCartoArray[i]));\n    }\n\n    return cartesianArray;\n};\n\nEllipsoid.prototype.intersection = function intersection(ray) {\n    var EPSILON = 0.0001;\n    var O_C = ray.origin;\n    var dir = ray.direction;\n    // normalizeVector( dir );\n\n    var a =\n        ((dir.x * dir.x) / (this.size.x * this.size.x)) + ((dir.y * dir.y) / (this.size.y * this.size.y)) + ((dir.z * dir.z) / (this.size.z * this.size.z));\n\n    var b =\n        ((2 * O_C.x * dir.x) / (this.size.x * this.size.x)) + ((2 * O_C.y * dir.y) / (this.size.y * this.size.y)) + ((2 * O_C.z * dir.z) / (this.size.z * this.size.z));\n    var c =\n        ((O_C.x * O_C.x) / (this.size.x * this.size.x)) + ((O_C.y * O_C.y) / (this.size.y * this.size.y)) + ((O_C.z * O_C.z) / (this.size.z * this.size.z)) - 1;\n\n    var d = ((b * b) - (4 * a * c));\n    if (d < 0 || a === 0 || b === 0 || c === 0)\n        { return false; }\n\n    d = Math.sqrt(d);\n\n    var t1 = (-b + d) / (2 * a);\n    var t2 = (-b - d) / (2 * a);\n\n    if (t1 <= EPSILON && t2 <= EPSILON) return false; // both intersections are behind the ray origin\n    // var back = (t1 <= EPSILON || t2 <= EPSILON); // If only one intersection (t>0) then we are inside the ellipsoid and the intersection is at the back of the ellipsoid\n    var t = 0;\n    if (t1 <= EPSILON)\n        { t = t2; }\n    else\n    if (t2 <= EPSILON)\n        { t = t1; }\n    else\n        { t = (t1 < t2) ? t1 : t2; }\n\n    if (t < EPSILON) return false; // Too close to intersection\n\n    var inter = new THREE.Vector3();\n\n    inter.addVectors(ray.origin, dir.clone().setLength(t));\n\n    return inter;\n    /*\n    var normal = intersection.clone();//-ellipsoid.center;\n    normal.x = 2*normal.x/(this.size.x*this.size.x);\n    normal.y = 2*normal.y/(this.size.y*this.size.y);\n    normal.z = 2*normal.z/(this.size.z*this.size.z);\n\n    //normal.w = 0.f;\n    normal *= (back) ? -1.f : 1.f;\n    normalizeVector(normal);\n    */\n};\n\nEllipsoid.prototype.computeDistance = function computeDistance(coordCarto1, coordCarto2) {\n    var longitude1 = coordCarto1.longitude() * Math.PI / 180;\n    var latitude1 = coordCarto1.latitude() * Math.PI / 180;\n    var longitude2 = coordCarto2.longitude() * Math.PI / 180;\n    var latitude2 = coordCarto2.latitude() * Math.PI / 180;\n\n    var distRad = Math.acos(Math.sin(latitude1) * Math.sin(latitude2) + Math.cos(latitude1) * Math.cos(latitude2) * Math.cos(longitude2 - longitude1));\n\n    var a = this.rayon_1;\n    var b = this.rayon_3;\n    var e = Math.sqrt((a * a - b * b) / (a * a));\n    var latMoy = (latitude1 + latitude2) / 2;\n    var rho = (a * (1 - e * e)) / Math.sqrt(1 - e * e * Math.sin(latMoy) * Math.sin(latMoy));\n    var N = a / Math.sqrt(1 - e * e * Math.sin(latMoy) * Math.sin(latMoy));\n\n    var distMeter = distRad * Math.sqrt(rho * N);\n    return distMeter;\n};\n\n\nexport default Ellipsoid;\n"]}