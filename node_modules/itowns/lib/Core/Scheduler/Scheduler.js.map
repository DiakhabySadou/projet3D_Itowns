{"version":3,"sources":["../../../src/Core/Scheduler/Scheduler.js"],"names":["instanceScheduler","_instanciateQueue","storage","comparator","a","b","cmp","priority","timestamp","counters","executing","executed","failed","cancelled","execute","cmd","provider","executingCounterUpToDate","p","executeCommand","resolve","then","result","err","reject","Scheduler","defaultQueue","hostQueues","providers","maxConcurrentCommands","maxCommandsPerHost","initDefaultProviders","prototype","constructor","wmtsProvider","addProtocolProvider","runCommand","command","queue","layer","protocol","Error","id","view","notifyChange","redraw","requester","deQueue","host","url","URL","document","location","undefined","promise","has","set","q","get","runNow","bind","window","setTimeout","Date","now","getProtocolProvider","commandsWaitingExecutionCount","sum","length","commandsRunningCount","resetCommandsCount","type","getProviders","slice","st","dequeue","earlyDropFunction"],"mappings":"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","file":"Scheduler.js","sourcesContent":["/**\n * Generated On: 2015-10-5\n * Class: Scheduler\n * Description: Cette classe singleton gère les requetes/Commandes  de la scène. Ces commandes peuvent etre synchrone ou asynchrone. Elle permet d'executer, de prioriser  et d'annuler les commandes de la pile. Les commandes executées sont placées dans une autre file d'attente.\n */\n\nimport PriorityQueue from 'js-priority-queue';\nimport WMTS_Provider from './Providers/WMTS_Provider';\nimport WMS_Provider from './Providers/WMS_Provider';\nimport TileProvider from './Providers/TileProvider';\nimport $3dTiles_Provider from './Providers/3dTiles_Provider';\nimport TMS_Provider from './Providers/TMS_Provider';\nimport PointCloudProvider from './Providers/PointCloudProvider';\nimport WFS_Provider from './Providers/WFS_Provider';\nimport Raster_Provider from './Providers/Raster_Provider';\nimport StaticProvider from './Providers/StaticProvider';\nimport CancelledCommandException from './CancelledCommandException';\n\nvar instanceScheduler = null;\n\nfunction _instanciateQueue() {\n    return {\n        storage: new PriorityQueue({\n            comparator(a, b) {\n                var cmp = b.priority - a.priority;\n                // Prioritize recent commands\n                if (cmp === 0) {\n                    return b.timestamp - a.timestamp;\n                }\n                return cmp;\n            },\n        }),\n        counters: {\n            // commands in progress\n            executing: 0,\n            // commands successfully executed\n            executed: 0,\n            // commands failed\n            failed: 0,\n            // commands cancelled\n            cancelled: 0,\n        },\n        execute(cmd, provider, executingCounterUpToDate) {\n            if (!executingCounterUpToDate) {\n                this.counters.executing++;\n            }\n\n            // If the provider returns a Promise, use it to handle counters\n            // Otherwise use a resolved Promise.\n            var p = provider.executeCommand(cmd) || Promise.resolve();\n\n            return p.then((result) => {\n                this.counters.executing--;\n                cmd.resolve(result);\n                // only count successul commands\n                this.counters.executed++;\n            }, (err) => {\n                this.counters.executing--;\n                cmd.reject(err);\n                this.counters.failed++;\n                if (__DEBUG__ && this.counters.failed < 3) {\n                    // eslint-disable-next-line no-console\n                    console.error(err);\n                }\n            });\n        },\n    };\n}\n\nfunction Scheduler() {\n    // Constructor\n    if (instanceScheduler !== null) {\n        throw new Error('Cannot instantiate more than one Scheduler');\n    }\n\n    this.defaultQueue = _instanciateQueue();\n    this.hostQueues = new Map();\n\n    this.providers = {};\n\n    this.maxConcurrentCommands = 16;\n    this.maxCommandsPerHost = 6;\n\n    // TODO: add an options to not instanciate default providers\n    this.initDefaultProviders();\n}\n\nScheduler.prototype.constructor = Scheduler;\n\nScheduler.prototype.initDefaultProviders = function initDefaultProviders() {\n    // Register all providers\n    var wmtsProvider = new WMTS_Provider();\n    this.addProtocolProvider('wmts', wmtsProvider);\n    this.addProtocolProvider('wmtsc', wmtsProvider);\n    this.addProtocolProvider('tile', new TileProvider());\n    this.addProtocolProvider('wms', new WMS_Provider());\n    this.addProtocolProvider('3d-tiles', new $3dTiles_Provider());\n    this.addProtocolProvider('tms', new TMS_Provider());\n    this.addProtocolProvider('potreeconverter', PointCloudProvider);\n    this.addProtocolProvider('wfs', new WFS_Provider());\n    this.addProtocolProvider('rasterizer', Raster_Provider);\n    this.addProtocolProvider('static', StaticProvider);\n};\n\nScheduler.prototype.runCommand = function runCommand(command, queue, executingCounterUpToDate) {\n    var provider = this.providers[command.layer.protocol];\n\n    if (!provider) {\n        throw new Error('No known provider for layer', command.layer.id);\n    }\n\n    queue.execute(command, provider, executingCounterUpToDate).then(() => {\n        // notify view that one command ended.\n        command.view.notifyChange('redraw' in command ? command.redraw : true, command.requester);\n\n        // try to execute next command\n        if (queue.counters.executing < this.maxCommandsPerHost) {\n            const cmd = this.deQueue(queue);\n            if (cmd) {\n                return this.runCommand(cmd, queue);\n            }\n        }\n    });\n};\n\nScheduler.prototype.execute = function execute(command) {\n    // TODO: check for mandatory commands fields\n\n\n    // parse host\n    const layer = command.layer;\n    const host = layer.url ? new URL(layer.url, document.location).host : undefined;\n\n    command.promise = new Promise((resolve, reject) => {\n        command.resolve = resolve;\n        command.reject = reject;\n    });\n\n    // init queue if needed\n    if (host && !(this.hostQueues.has(host))) {\n        this.hostQueues.set(host, _instanciateQueue());\n    }\n\n    const q = host ? this.hostQueues.get(host) : this.defaultQueue;\n\n    // execute command now if possible\n    if (q.counters.executing < this.maxCommandsPerHost) {\n        // increment before\n        q.counters.executing++;\n\n        var runNow = function runNow() {\n            this.runCommand(command, q, true);\n        }.bind(this);\n\n        // We use a setTimeout to defer processing but we avoid the\n        // queue mechanism (why setTimeout and not Promise? see tasks vs microtasks priorities)\n        window.setTimeout(runNow, 0);\n    } else {\n        command.timestamp = Date.now();\n        q.storage.queue(command);\n    }\n\n    return command.promise;\n};\n\n\nScheduler.prototype.addProtocolProvider = function addProtocolProvider(protocol, provider) {\n    this.providers[protocol] = provider;\n};\n\nScheduler.prototype.getProtocolProvider = function getProtocolProvider(protocol) {\n    return this.providers[protocol];\n};\n\nScheduler.prototype.commandsWaitingExecutionCount = function commandsWaitingExecutionCount() {\n    let sum = this.defaultQueue.storage.length + this.defaultQueue.counters.executing;\n    for (var q of this.hostQueues) {\n        sum += q[1].storage.length + q[1].counters.executing;\n    }\n    return sum;\n};\n\nScheduler.prototype.commandsRunningCount = function commandsRunningCount() {\n    let sum = this.defaultQueue.counters.executing;\n\n    for (var q of this.hostQueues) {\n        sum += q[1].counters.executing;\n    }\n    return sum;\n};\n\nScheduler.prototype.resetCommandsCount = function resetCommandsCount(type) {\n    let sum = this.defaultQueue.counters[type];\n    this.defaultQueue.counters[type] = 0;\n    for (var q of this.hostQueues) {\n        sum += q[1].counters[type];\n        q[1].counters[type] = 0;\n    }\n    return sum;\n};\n\nScheduler.prototype.getProviders = function getProviders() {\n    return this.providers.slice();\n};\n\nScheduler.prototype.deQueue = function deQueue(queue) {\n    var st = queue.storage;\n    while (st.length > 0) {\n        var cmd = st.dequeue();\n\n        if (cmd.earlyDropFunction && cmd.earlyDropFunction(cmd)) {\n            queue.counters.cancelled++;\n            cmd.reject(new CancelledCommandException(cmd));\n        } else {\n            return cmd;\n        }\n    }\n\n    return undefined;\n};\n\nexport default Scheduler;\n"]}