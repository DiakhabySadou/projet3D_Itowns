{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/Fetcher.js"],"names":["textureLoader","checkResponse","response","ok","error","Error","url","status","json","options","fetch","then","xml","text","window","DOMParser","parseFromString","texture","res","rej","crossOrigin","promise","resolve","reject","load","arrayBuffer"],"mappings":";;;;;;;;;;AAAA;;;;AAEA,IAAMA,gBAAgB,0BAAtB;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,QAAI,CAACA,SAASC,EAAd,EAAkB;AACd,YAAIC,QAAQ,IAAIC,KAAJ,oBAA2BH,SAASI,GAApC,iBAAmDJ,SAASK,MAA5D,CAAZ;AACAH,cAAMG,MAAN,GAAeL,SAASK,MAAxB;AACA,cAAMH,KAAN;AACH;AACJ;;kBAEc;;AAEX;;;;;;;;AAQAI,QAVW,gBAUNF,GAVM,EAUa;AAAA,YAAdG,OAAc,uEAAJ,EAAI;;AACpB,eAAOC,MAAMJ,GAAN,EAAWG,OAAX,EAAoBE,IAApB,CAAyB,UAACT,QAAD,EAAc;AAC1CD,0BAAcC,QAAd;AACA,mBAAOA,SAASM,IAAT,EAAP;AACH,SAHM,CAAP;AAIH,KAfU;;;AAiBX;;;;;;;;AAQAI,OAzBW,eAyBPN,GAzBO,EAyBY;AAAA,YAAdG,OAAc,uEAAJ,EAAI;;AACnB,eAAOC,MAAMJ,GAAN,EAAWG,OAAX,EAAoBE,IAApB,CAAyB,UAACT,QAAD,EAAc;AAC1CD,0BAAcC,QAAd;AACA,mBAAOA,SAASW,IAAT,EAAP;AACH,SAHM,EAGJF,IAHI,CAGC;AAAA,mBAAQ,IAAIG,OAAOC,SAAX,GAAuBC,eAAvB,CAAuCH,IAAvC,EAA6C,UAA7C,CAAR;AAAA,SAHD,CAAP;AAIH,KA9BU;;;AAgCX;;;;;AAKA;;;;;;;;;;AAUAI,WA/CW,YA+CHX,GA/CG,EA+CgB;AAAA,YAAdG,OAAc,uEAAJ,EAAI;;AACvB,YAAIS,YAAJ;AACA,YAAIC,YAAJ;;AAEAnB,sBAAcoB,WAAd,GAA4BX,QAAQW,WAApC;;AAEA,YAAMC,UAAU,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CL,kBAAMI,OAAN;AACAH,kBAAMI,MAAN;AACH,SAHe,CAAhB;;AAKA,YAAMN,UAAUjB,cAAcwB,IAAd,CAAmBlB,GAAnB,EAAwBY,GAAxB,EAA6B,YAAM,CAAE,CAArC,EAAuCC,GAAvC,CAAhB;AACA,eAAO,EAAEF,gBAAF,EAAWI,gBAAX,EAAP;AACH,KA5DU;;;AA8DX;;;;;;;;AAQAI,eAtEW,uBAsECnB,GAtED,EAsEoB;AAAA,YAAdG,OAAc,uEAAJ,EAAI;;AAC3B,eAAOC,MAAMJ,GAAN,EAAWG,OAAX,EAAoBE,IAApB,CAAyB,UAACT,QAAD,EAAc;AAC1CD,0BAAcC,QAAd;AACA,mBAAOA,SAASuB,WAAT,EAAP;AACH,SAHM,CAAP;AAIH;AA3EU,C","file":"Fetcher.js","sourcesContent":["import { TextureLoader } from 'three';\n\nconst textureLoader = new TextureLoader();\n\nfunction checkResponse(response) {\n    if (!response.ok) {\n        var error = new Error(`Error loading ${response.url}: status ${response.status}`);\n        error.status = response.status;\n        throw error;\n    }\n}\n\nexport default {\n\n    /**\n     * Little wrapper over fetch to get some json\n     *\n     * @param {string} url\n     * @param {Object} options - fetch options (passed directly to fetch)\n     *\n     * @return {Promise}\n     */\n    json(url, options = {}) {\n        return fetch(url, options).then((response) => {\n            checkResponse(response);\n            return response.json();\n        });\n    },\n\n    /**\n     * Wrapper over fetch to get some xml.\n     *\n     * @param {string} url\n     * @param {Object} options - fetch options (passed directly to fetch)\n     *\n     * @return {Promise}\n     */\n    xml(url, options = {}) {\n        return fetch(url, options).then((response) => {\n            checkResponse(response);\n            return response.text();\n        }).then(text => new window.DOMParser().parseFromString(text, 'text/xml'));\n    },\n\n    /**\n     * @typedef {Object} TexturePromise\n     * @property {Promise} promise - a promise that resolves when the texture is loaded\n     * @property {Object} texture - the loading texture\n     */\n    /**\n     * Wrapper around TextureLoader\n     *\n     * @param {string} url\n     * @param {Object} options - options to pass to TextureLoader. Note that\n     * THREE.js docs mention withCredentials, but it is not actually used in TextureLoader.js.\n     * @param {string} options.crossOrigin - passed directly to html elements supporting it\n     *\n     * @return {TexturePromise}\n     */\n    texture(url, options = {}) {\n        let res;\n        let rej;\n\n        textureLoader.crossOrigin = options.crossOrigin;\n\n        const promise = new Promise((resolve, reject) => {\n            res = resolve;\n            rej = reject;\n        });\n\n        const texture = textureLoader.load(url, res, () => {}, rej);\n        return { texture, promise };\n    },\n\n    /**\n     * Wrapper over fetch to get some ArrayBuffer\n     *\n     * @param {string} url\n     * @param {Object} options - fetch options (passed directly to fetch)\n     *\n     * @return {Promise}\n     */\n    arrayBuffer(url, options = {}) {\n        return fetch(url, options).then((response) => {\n            checkResponse(response);\n            return response.arrayBuffer();\n        });\n    },\n};\n"]}