{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/PotreeCinLoader.js"],"names":["THREE","parse","buffer","Error","view","DataView","min","Vector3","getFloat32","max","tightbbox","Box3","numPoints","Math","floor","byteLength","positions","Float32Array","colors","Uint8Array","geometry","BufferGeometry","addAttribute","BufferAttribute","material","points","Points","frustumCulled","matrixAutoUpdate","realPointCount"],"mappings":";;;;;;AAAA;;IAAYA,K;;AACZ;;;;;;;;AAEA;kBACe;AACXC,WAAO,UAAeC,MAAf,EAAuB;AAC1B,YAAI,CAACA,MAAL,EAAa;AACT,kBAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;;AAED;AACA,YAAMC,OAAO,IAAIC,QAAJ,CAAaH,MAAb,EAAqB,CAArB,EAAwB,IAAI,CAA5B,CAAb;AACA,YAAMI,MAAM,IAAIN,MAAMO,OAAV,CAAkBH,KAAKI,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,CAAlB,EAA4CJ,KAAKI,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,CAA5C,EAAsEJ,KAAKI,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,CAAtE,CAAZ;AACA,YAAMC,MAAM,IAAIT,MAAMO,OAAV,CAAkBH,KAAKI,UAAL,CAAgB,EAAhB,EAAoB,IAApB,CAAlB,EAA6CJ,KAAKI,UAAL,CAAgB,EAAhB,EAAoB,IAApB,CAA7C,EAAwEJ,KAAKI,UAAL,CAAgB,EAAhB,EAAoB,IAApB,CAAxE,CAAZ;AACA,YAAME,YAAY,IAAIV,MAAMW,IAAV,CAAeL,GAAf,EAAoBG,GAApB,CAAlB;;AAEA,YAAMG,YAAYC,KAAKC,KAAL,CAAW,CAACZ,OAAOa,UAAP,GAAoB,EAArB,IAA2B,EAAtC,CAAlB;;AAEA,YAAMC,YAAY,IAAIC,YAAJ,CAAiBf,MAAjB,EAAyB,EAAzB,EAA6B,IAAIU,SAAjC,CAAlB;AACA,YAAMM,SAAS,IAAIC,UAAJ,CAAejB,MAAf,EAAuB,KAAK,IAAI,CAAJ,GAAQU,SAApC,EAA+C,IAAIA,SAAnD,CAAf;;AAEA,YAAMQ,WAAW,IAAIpB,MAAMqB,cAAV,EAAjB;AACAD,iBAASE,YAAT,CAAsB,UAAtB,EAAkC,IAAItB,MAAMuB,eAAV,CAA0BP,SAA1B,EAAqC,CAArC,CAAlC;AACAI,iBAASE,YAAT,CAAsB,OAAtB,EAA+B,IAAItB,MAAMuB,eAAV,CAA0BL,MAA1B,EAAkC,CAAlC,EAAqC,IAArC,CAA/B;;AAEA,YAAMM,WAAW,8BAAjB;AACA,YAAMC,SAAS,IAAIzB,MAAM0B,MAAV,CAAiBN,QAAjB,EAA2BI,QAA3B,CAAf;;AAEAC,eAAOE,aAAP,GAAuB,KAAvB;AACAF,eAAOG,gBAAP,GAA0B,KAA1B;AACAH,eAAOI,cAAP,GAAwBjB,SAAxB;AACAa,eAAOf,SAAP,GAAmBA,SAAnB;;AAEA,eAAOe,MAAP;AACH;AA9BU,C","file":"PotreeCinLoader.js","sourcesContent":["import * as THREE from 'three';\nimport PointsMaterial from '../../../Renderer/PointsMaterial';\n\n// Parse .cin PotreeConverter format (see https://github.com/peppsac/PotreeConverter/tree/custom_bin)\nexport default {\n    parse: function parse(buffer) {\n        if (!buffer) {\n            throw new Error('No array buffer provided.');\n        }\n\n        // Format: MinX,MinY,MinZ,MaxX,MaxY,MaxZ,X1,Y1,Z1,[...],XN,YN,ZN,R1,G1,B1,A1,[...],RN,GN,BN,AN\n        const view = new DataView(buffer, 0, 6 * 4);\n        const min = new THREE.Vector3(view.getFloat32(0, true), view.getFloat32(4, true), view.getFloat32(8, true));\n        const max = new THREE.Vector3(view.getFloat32(12, true), view.getFloat32(16, true), view.getFloat32(20, true));\n        const tightbbox = new THREE.Box3(min, max);\n\n        const numPoints = Math.floor((buffer.byteLength - 24) / 16);\n\n        const positions = new Float32Array(buffer, 24, 3 * numPoints);\n        const colors = new Uint8Array(buffer, 24 + 3 * 4 * numPoints, 4 * numPoints);\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n        geometry.addAttribute('color', new THREE.BufferAttribute(colors, 4, true));\n\n        const material = new PointsMaterial();\n        const points = new THREE.Points(geometry, material);\n\n        points.frustumCulled = false;\n        points.matrixAutoUpdate = false;\n        points.realPointCount = numPoints;\n        points.tightbbox = tightbbox;\n\n        return points;\n    },\n};\n"]}