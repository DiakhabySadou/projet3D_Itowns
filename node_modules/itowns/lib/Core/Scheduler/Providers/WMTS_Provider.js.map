{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/WMTS_Provider.js"],"names":["THREE","WMTS_Provider","prototype","customUrl","layer","url","tilematrix","row","col","urld","replace","toString","preprocessDataLayer","fx","options","protocol","version","tileMatrixSet","mimetype","style","projection","newBaseUrl","name","zoom","arrayLimits","tileMatrixSetLimits","size","length","maxZoom","Number","min","max","coWMTS","getXbilTexture","tile","targetZoom","pitch","Vector4","coordWMTS","getCoordsForLayer","WMTS_WGS84Parent","getXBilTextureByUrl","networkOptions","then","texture","ioDXBIL","computeMinMaxElevation","image","data","coords","undefined","getColorTexture","getColorTextureByUrl","result","executeCommand","command","requester","supportedFormats","getColorTextures","bind","func","targetLevel","reject","Error","tileTextureCount","computeTileMatrixSetCoordinates","tileInsideLimit","coord","c","minTileRow","maxTileRow","minTileCol","maxTileCol","material","resolve","promises","bcoord","push","all"],"mappings":"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","file":"WMTS_Provider.js","sourcesContent":["/**\n * Generated On: 2015-10-5\n * Class: WMTS_Provider\n * Description: Fournisseur de données à travers un flux WMTS\n */\n\nimport * as THREE from 'three';\nimport OGCWebServiceHelper, { SIZE_TEXTURE_TILE } from './OGCWebServiceHelper';\n\nfunction WMTS_Provider() {\n}\n\nWMTS_Provider.prototype.customUrl = function customUrl(layer, url, tilematrix, row, col) {\n    let urld = url.replace('%TILEMATRIX', tilematrix.toString());\n    urld = urld.replace('%ROW', row.toString());\n    urld = urld.replace('%COL', col.toString());\n\n    return urld;\n};\n\nWMTS_Provider.prototype.preprocessDataLayer = function preprocessDataLayer(layer) {\n    layer.fx = layer.fx || 0.0;\n\n    layer.options = layer.options || {};\n\n    if (layer.protocol === 'wmts') {\n        const options = layer.options;\n        options.version = options.version || '1.0.0';\n        options.tileMatrixSet = options.tileMatrixSet || 'WGS84';\n        options.mimetype = options.mimetype || 'image/png';\n        options.style = options.style || 'normal';\n        options.projection = options.projection || 'EPSG:3857';\n        let newBaseUrl = `${layer.url}` +\n            `?LAYER=${options.name}` +\n            `&FORMAT=${options.mimetype}` +\n            '&SERVICE=WMTS' +\n            `&VERSION=${options.version}` +\n            '&REQUEST=GetTile' +\n            `&STYLE=${options.style}` +\n            `&TILEMATRIXSET=${options.tileMatrixSet}`;\n\n        newBaseUrl += '&TILEMATRIX=%TILEMATRIX&TILEROW=%ROW&TILECOL=%COL';\n\n        if (!layer.options.zoom) {\n            const arrayLimits = Object.keys(options.tileMatrixSetLimits);\n            const size = arrayLimits.length;\n            const maxZoom = Number(arrayLimits[size - 1]);\n            const minZoom = maxZoom - size + 1;\n\n            layer.options.zoom = {\n                min: minZoom,\n                max: maxZoom,\n            };\n        }\n        layer.customUrl = newBaseUrl;\n    }\n    layer.options.zoom = layer.options.zoom || { min: 2, max: 20 };\n};\n\n/**\n * Return url wmts orthophoto\n * @param {{zoom:number,row:number,col:number}} coWMTS\n * @param {Layer} layer\n * @returns {string}\n */\nWMTS_Provider.prototype.url = function url(coWMTS, layer) {\n    return this.customUrl(layer, layer.customUrl, coWMTS.zoom, coWMTS.row, coWMTS.col);\n};\n\n/**\n * return texture float alpha THREE.js of MNT\n * @param {TileMesh} tile\n * @param {Layer} layer\n * @param {number} targetZoom\n * @returns {Promise<portableXBIL>}\n */\nWMTS_Provider.prototype.getXbilTexture = function getXbilTexture(tile, layer, targetZoom) {\n    const pitch = new THREE.Vector4(0.0, 0.0, 1.0, 1.0);\n    let coordWMTS = tile.getCoordsForLayer(layer)[0];\n\n    if (targetZoom && targetZoom !== coordWMTS.zoom) {\n        coordWMTS = OGCWebServiceHelper.WMTS_WGS84Parent(coordWMTS, targetZoom, pitch);\n    }\n\n    const url = this.url(coordWMTS, layer);\n\n    return OGCWebServiceHelper.getXBilTextureByUrl(url, layer.networkOptions).then((texture) => {\n        const { min, max } = OGCWebServiceHelper.ioDXBIL.computeMinMaxElevation(\n            texture.image.data,\n            SIZE_TEXTURE_TILE, SIZE_TEXTURE_TILE,\n            pitch);\n\n        texture.coords = coordWMTS;\n\n        return {\n            texture,\n            pitch,\n            min: min === undefined ? 0 : min,\n            max: max === undefined ? 0 : max,\n        };\n    });\n};\n\n/**\n * Return texture RGBA THREE.js of orthophoto\n * TODO : RGBA --> RGB remove alpha canal\n * @param {{zoom:number,row:number,col:number}} coordWMTS\n * @param {Layer} layer\n * @returns {Promise<Texture>}\n */\nWMTS_Provider.prototype.getColorTexture = function getColorTexture(coordWMTS, layer) {\n    const url = this.url(coordWMTS, layer);\n    return OGCWebServiceHelper.getColorTextureByUrl(url, layer.networkOptions).then((texture) => {\n        const result = {};\n        result.texture = texture;\n        result.texture.coords = coordWMTS;\n        result.pitch = new THREE.Vector4(0, 0, 1, 1);\n\n        return result;\n    });\n};\n\nWMTS_Provider.prototype.executeCommand = function executeCommand(command) {\n    const layer = command.layer;\n    const tile = command.requester;\n\n    const supportedFormats = {\n        'image/png': this.getColorTextures.bind(this),\n        'image/jpg': this.getColorTextures.bind(this),\n        'image/jpeg': this.getColorTextures.bind(this),\n        'image/x-bil;bits=32': this.getXbilTexture.bind(this),\n    };\n\n    const func = supportedFormats[layer.options.mimetype];\n    if (func) {\n        return func(tile, layer, command.targetLevel);\n    } else {\n        return Promise.reject(new Error(`Unsupported mimetype ${layer.options.mimetype}`));\n    }\n};\n\nWMTS_Provider.prototype.tileTextureCount = function tileTextureCount(tile, layer) {\n    const tileMatrixSet = layer.options.tileMatrixSet;\n    OGCWebServiceHelper.computeTileMatrixSetCoordinates(tile, tileMatrixSet);\n    return tile.getCoordsForLayer(layer).length;\n};\n\nWMTS_Provider.prototype.tileInsideLimit = function tileInsideLimit(tile, layer, targetLevel) {\n    // This layer provides data starting at level = layer.options.zoom.min\n    // (the zoom.max property is used when building the url to make\n    //  sure we don't use invalid levels)\n    for (const coord of tile.getCoordsForLayer(layer)) {\n        let c = coord;\n        // override\n        if (targetLevel < c.zoom) {\n            c = OGCWebServiceHelper.WMTS_WGS84Parent(coord, targetLevel);\n        }\n        if (c.zoom < layer.options.zoom.min || c.zoom > layer.options.zoom.max) {\n            return false;\n        }\n        if (layer.options.tileMatrixSetLimits) {\n            if (c.row < layer.options.tileMatrixSetLimits[c.zoom].minTileRow ||\n                c.row > layer.options.tileMatrixSetLimits[c.zoom].maxTileRow ||\n                c.col < layer.options.tileMatrixSetLimits[c.zoom].minTileCol ||\n                c.col > layer.options.tileMatrixSetLimits[c.zoom].maxTileCol) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nWMTS_Provider.prototype.getColorTextures = function getColorTextures(tile, layer) {\n    if (tile.material === null) {\n        return Promise.resolve();\n    }\n    const promises = [];\n    const bcoord = tile.getCoordsForLayer(layer);\n\n    for (const coordWMTS of bcoord) {\n        promises.push(this.getColorTexture(coordWMTS, layer));\n    }\n\n    return Promise.all(promises);\n};\n\nexport default WMTS_Provider;\n"]}