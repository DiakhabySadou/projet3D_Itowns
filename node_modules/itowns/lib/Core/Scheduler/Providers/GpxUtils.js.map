{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/GpxUtils.js"],"names":["THREE","_gpxToWayPointsArray","gpxXML","getElementsByTagName","_gGpxToWTrackPointsArray","_gpxPtToCartesian","pt","crs","longitude","Number","attributes","lon","nodeValue","latitude","lat","elem","elevation","childNodes","as","xyz","geometryPoint","BoxGeometry","materialPoint","MeshBasicMaterial","color","positionCamera","Vector3","getDistance","object","camera","point","geometry","boundingSphere","center","clone","applyMatrix4","matrixWorld","setFromMatrixPosition","distanceTo","updatePointScale","renderer","scene","distance","scale","Math","max","min","getSize","height","set","updateMatrixWorld","_gpxToWayPointsMesh","wayPts","length","points","Group","lookAt","negate","wayPt","position","sub","mesh","Mesh","copy","onBeforeRender","add","updatePath","material","depthTest","radius","size","uniforms","resolution","value","width","_gpxToWTrackPointsMesh","options","trackPts","Geometry","trackPt","vertices","push","line","MeshLine","setGeometry","MeshLineMaterial","lineWidth","sizeAttenuation","Color","isLogDepthBufferSupported","fragmentShader","replace","substr","console","warn","pathMesh","_gpxToMesh","undefined","enablePin","gpxMesh","Object3D","matrixAutoUpdate","load","urlFile","xml","networkOptions","then"],"mappings":";;;;;;;;;;AAMA;;IAAYA,K;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAXA;;;;;;AAaA,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AAClC,WAAOA,OAAOC,oBAAP,CAA4B,KAA5B,CAAP;AACH;;AAED,SAASC,wBAAT,CAAkCF,MAAlC,EAA0C;AACtC,WAAOA,OAAOC,oBAAP,CAA4B,OAA5B,CAAP;AACH;;AAED,SAASE,iBAAT,CAA2BC,EAA3B,EAA+BC,GAA/B,EAAoC;AAChC,QAAIC,YAAYC,OAAOH,GAAGI,UAAH,CAAcC,GAAd,CAAkBC,SAAzB,CAAhB;AACA,QAAIC,WAAWJ,OAAOH,GAAGI,UAAH,CAAcI,GAAd,CAAkBF,SAAzB,CAAf;AACA;AACA,QAAMG,OAAOT,GAAGH,oBAAH,CAAwB,KAAxB,EAA+B,CAA/B,CAAb;AACA,QAAMa,YAAYD,OAAON,OAAOM,KAAKE,UAAL,CAAgB,CAAhB,EAAmBL,SAA1B,CAAP,GAA8C,CAAhE;;AAEA,WAAO,0BAAgB,WAAhB,EAA6BJ,SAA7B,EAAwCK,QAAxC,EAAkDG,SAAlD,EAA6DE,EAA7D,CAAgEX,GAAhE,EAAqEY,GAArE,EAAP;AACH;;AAED,IAAMC,gBAAgB,IAAIpB,MAAMqB,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,CAAtB;AACA,IAAMC,gBAAgB,IAAItB,MAAMuB,iBAAV,CAA4B,EAAEC,OAAO,QAAT,EAA5B,CAAtB;AACA,IAAMC,iBAAiB,IAAIzB,MAAM0B,OAAV,EAAvB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqC;AACjC,QAAMC,QAAQF,OAAOG,QAAP,CAAgBC,cAAhB,CAA+BC,MAA/B,CAAsCC,KAAtC,GAA8CC,YAA9C,CAA2DP,OAAOQ,WAAlE,CAAd;AACAX,mBAAeY,qBAAf,CAAqCR,OAAOO,WAA5C;AACA,WAAOX,eAAea,UAAf,CAA0BR,KAA1B,CAAP;AACH;;AAED,SAASS,gBAAT,CAA0BC,QAA1B,EAAoCC,KAApC,EAA2CZ,MAA3C,EAAmD;AAC/C,QAAMa,WAAWf,YAAY,IAAZ,EAAkBE,MAAlB,CAAjB;AACA,QAAMc,QAAQC,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKE,GAAL,CAAS,GAAT,EAAcJ,WAAWF,SAASO,OAAT,GAAmBC,MAA5C,CAAZ,CAAd;AACA,SAAKL,KAAL,CAAWM,GAAX,CAAeN,KAAf,EAAsBA,KAAtB,EAA6BA,KAA7B;AACA,SAAKO,iBAAL;AACH;;AAED,SAASC,mBAAT,CAA6BjD,MAA7B,EAAqCK,GAArC,EAA0C;AACtC,QAAI6C,SAASnD,qBAAqBC,MAArB,CAAb;;AAEA,QAAIkD,OAAOC,MAAX,EAAmB;AACf,YAAMC,SAAS,IAAItD,MAAMuD,KAAV,EAAf;;AAEArD,eAAO+B,MAAP,GAAgB/B,OAAO+B,MAAP,IAAiB5B,kBAAkB+C,OAAO,CAAP,CAAlB,EAA6B7C,GAA7B,CAAjC;;AAEA,YAAMiD,SAAStD,OAAO+B,MAAP,CAAcC,KAAd,GAAsBuB,MAAtB,EAAf;;AALe;AAAA;AAAA;;AAAA;AAOf,4DAAoBL,MAApB,4GAA4B;AAAA,oBAAjBM,KAAiB;;AACxB,oBAAMC,WAAWtD,kBAAkBqD,KAAlB,EAAyBnD,GAAzB,EAA8BqD,GAA9B,CAAkC1D,OAAO+B,MAAzC,CAAjB;AACA;AACA,oBAAM4B,OAAO,IAAI7D,MAAM8D,IAAV,CAAe1C,aAAf,EAA8BE,aAA9B,CAAb;AACAuC,qBAAKF,QAAL,CAAcI,IAAd,CAAmBJ,QAAnB;AACAE,qBAAKL,MAAL,CAAYA,MAAZ;;AAEA;AACAK,qBAAKG,cAAL,GAAsBzB,gBAAtB;;AAEAe,uBAAOW,GAAP,CAAWJ,IAAX;AACH;AAlBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBf,eAAOP,MAAP;AACH,KApBD,MAoBO;AACH,eAAO,IAAP;AACH;AACJ;;AAED,SAASY,UAAT,CAAoB1B,QAApB,EAA8BC,KAA9B,EAAqCZ,MAArC,EAA6C;AACzC,QAAMa,WAAWf,YAAY,IAAZ,EAAkBE,MAAlB,CAAjB;AACA,SAAKsC,QAAL,CAAcC,SAAd,GAA0B1B,WAAW,KAAKX,QAAL,CAAcC,cAAd,CAA6BqC,MAA7B,GAAsC,CAA3E;AACA,QAAMC,OAAO9B,SAASO,OAAT,EAAb;AACA,SAAKoB,QAAL,CAAcI,QAAd,CAAuBC,UAAvB,CAAkCC,KAAlC,CAAwCxB,GAAxC,CAA4CqB,KAAKI,KAAjD,EAAwDJ,KAAKtB,MAA7D;AACH;;AAED,SAAS2B,sBAAT,CAAgCzE,MAAhC,EAAwC0E,OAAxC,EAAiD;AAC7C,QAAIC,WAAWzE,yBAAyBF,MAAzB,CAAf;;AAEA,QAAI2E,SAASxB,MAAb,EAAqB;AACjBnD,eAAO+B,MAAP,GAAgB/B,OAAO+B,MAAP,IAAiB5B,kBAAkBwE,SAAS,CAAT,CAAlB,EAA+BD,QAAQrE,GAAvC,CAAjC;;AAEA,YAAIwB,WAAW,IAAI/B,MAAM8E,QAAV,EAAf;;AAHiB;AAAA;AAAA;;AAAA;AAKjB,6DAAsBD,QAAtB,iHAAgC;AAAA,oBAArBE,OAAqB;;AAC5B,oBAAMjD,QAAQzB,kBAAkB0E,OAAlB,EAA2BH,QAAQrE,GAAnC,EAAwCqD,GAAxC,CAA4C1D,OAAO+B,MAAnD,CAAd;AACAF,yBAASiD,QAAT,CAAkBC,IAAlB,CAAuBnD,KAAvB;AACH;AARgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUjB,YAAIoD,OAAO,IAAI,gBAAKC,QAAT,EAAX;AACAD,aAAKE,WAAL,CAAiBrD,QAAjB;AACA;AACA;AACA;AACA;AACA,YAAIoC,WAAW,IAAI,gBAAKkB,gBAAT,CAA0B;AACrCC,uBAAWV,QAAQU,SAAR,IAAqB,EADK;AAErCC,6BAAiB,CAFoB;AAGrC/D,mBAAO,IAAIxB,MAAMwF,KAAV,CAAgB,QAAhB;AAH8B,SAA1B,CAAf;;AAMA,YAAI,uBAAaC,yBAAb,EAAJ,EAA8C;AAC1CtB,qBAASuB,cAAT,GAA0BvB,SAASuB,cAAT,CAAwBC,OAAxB,CAAgC,IAAhC,EAAsC,EAAtC,EAA0CC,MAA1C,CAAiD,CAAjD,CAA1B;AACA,kEAAgCzB,QAAhC;AACA;AACA0B,oBAAQC,IAAR,CAAa,0EAAb;AACH;;AAED,YAAMC,WAAW,IAAI/F,MAAM8D,IAAV,CAAeoB,KAAKnD,QAApB,EAA8BoC,QAA9B,CAAjB;AACA;AACA;AACA4B,iBAAS/B,cAAT,GAA0BE,UAA1B;;AAEA,eAAO6B,QAAP;AACH,KAnCD,MAmCO;AACH,eAAO,IAAP;AACH;AACJ;;AAED,SAASC,UAAT,CAAoB9F,MAApB,EAA0C;AAAA,QAAd0E,OAAc,uEAAJ,EAAI;;AACtC,QAAI,CAAC1E,MAAL,EAAa;AACT,eAAO+F,SAAP;AACH;;AAED,QAAIrB,QAAQsB,SAAR,IAAqBD,SAAzB,EAAoC;AAChCrB,gBAAQsB,SAAR,GAAoB,IAApB;AACH;;AAED,QAAIC,UAAU,IAAInG,MAAMoG,QAAV,EAAd;;AAEA;AACA,QAAIvB,WAAWF,uBAAuBzE,MAAvB,EAA+B0E,OAA/B,CAAf;;AAEA,QAAIC,QAAJ,EAAc;AACVsB,gBAAQlC,GAAR,CAAYY,QAAZ;AACH;;AAED,QAAID,QAAQsB,SAAZ,EAAuB;AACnB;AACA,YAAI9C,SAASD,oBAAoBjD,MAApB,EAA4B0E,QAAQrE,GAApC,CAAb;;AAEA,YAAI6C,MAAJ,EAAY;AACR+C,oBAAQlC,GAAR,CAAYb,MAAZ;AACH;AACJ;;AAED+C,YAAQxC,QAAR,CAAiBI,IAAjB,CAAsB7D,OAAO+B,MAA7B;AACAkE,YAAQjD,iBAAR;AACA;AACAiD,YAAQE,gBAAR,GAA2B,KAA3B;;AAEA,WAAOF,OAAP;AACH;;kBAEc;AACX;AACA;;;;;;;;;;;;;;;;;;;AAmBAG,QArBW,gBAqBNC,OArBM,EAqBGhG,GArBH,EAqBsB;AAAA,YAAdqE,OAAc,uEAAJ,EAAI;;AAC7BA,gBAAQrE,GAAR,GAAcA,GAAd;AACA,eAAO,kBAAQiG,GAAR,CAAYD,OAAZ,EAAqB3B,QAAQ6B,cAA7B,EAA6CC,IAA7C,CAAkD;AAAA,mBAAUV,WAAW9F,MAAX,EAAmB0E,OAAnB,CAAV;AAAA,SAAlD,CAAP;AACH;AAxBU,C","file":"GpxUtils.js","sourcesContent":["/**\n * Generated On: 2016-07-07\n * Class: GpxUtils\n * Description: Parse Gpx file to get [lat, lon, alt]\n */\n\nimport * as THREE from 'three';\nimport Line from 'three.meshline';\nimport Fetcher from './Fetcher';\nimport Coordinates from '../../Geographic/Coordinates';\nimport Capabilities from '../../System/Capabilities';\nimport { patchMaterialForLogDepthSupport } from './3dTiles_Provider';\n\nfunction _gpxToWayPointsArray(gpxXML) {\n    return gpxXML.getElementsByTagName('wpt');\n}\n\nfunction _gGpxToWTrackPointsArray(gpxXML) {\n    return gpxXML.getElementsByTagName('trkpt');\n}\n\nfunction _gpxPtToCartesian(pt, crs) {\n    var longitude = Number(pt.attributes.lon.nodeValue);\n    var latitude = Number(pt.attributes.lat.nodeValue);\n    // TODO: get elevation with terrain\n    const elem = pt.getElementsByTagName('ele')[0];\n    const elevation = elem ? Number(elem.childNodes[0].nodeValue) : 0;\n\n    return new Coordinates('EPSG:4326', longitude, latitude, elevation).as(crs).xyz();\n}\n\nconst geometryPoint = new THREE.BoxGeometry(1, 1, 80);\nconst materialPoint = new THREE.MeshBasicMaterial({ color: 0xffffff });\nconst positionCamera = new THREE.Vector3();\n\nfunction getDistance(object, camera) {\n    const point = object.geometry.boundingSphere.center.clone().applyMatrix4(object.matrixWorld);\n    positionCamera.setFromMatrixPosition(camera.matrixWorld);\n    return positionCamera.distanceTo(point);\n}\n\nfunction updatePointScale(renderer, scene, camera) {\n    const distance = getDistance(this, camera);\n    const scale = Math.max(2, Math.min(100, distance / renderer.getSize().height));\n    this.scale.set(scale, scale, scale);\n    this.updateMatrixWorld();\n}\n\nfunction _gpxToWayPointsMesh(gpxXML, crs) {\n    var wayPts = _gpxToWayPointsArray(gpxXML);\n\n    if (wayPts.length) {\n        const points = new THREE.Group();\n\n        gpxXML.center = gpxXML.center || _gpxPtToCartesian(wayPts[0], crs);\n\n        const lookAt = gpxXML.center.clone().negate();\n\n        for (const wayPt of wayPts) {\n            const position = _gpxPtToCartesian(wayPt, crs).sub(gpxXML.center);\n            // use Pin to make it more visible\n            const mesh = new THREE.Mesh(geometryPoint, materialPoint);\n            mesh.position.copy(position);\n            mesh.lookAt(lookAt);\n\n            // Scale pin in function of distance\n            mesh.onBeforeRender = updatePointScale;\n\n            points.add(mesh);\n        }\n        return points;\n    } else {\n        return null;\n    }\n}\n\nfunction updatePath(renderer, scene, camera) {\n    const distance = getDistance(this, camera);\n    this.material.depthTest = distance < this.geometry.boundingSphere.radius * 2;\n    const size = renderer.getSize();\n    this.material.uniforms.resolution.value.set(size.width, size.height);\n}\n\nfunction _gpxToWTrackPointsMesh(gpxXML, options) {\n    var trackPts = _gGpxToWTrackPointsArray(gpxXML);\n\n    if (trackPts.length) {\n        gpxXML.center = gpxXML.center || _gpxPtToCartesian(trackPts[0], options.crs);\n\n        var geometry = new THREE.Geometry();\n\n        for (const trackPt of trackPts) {\n            const point = _gpxPtToCartesian(trackPt, options.crs).sub(gpxXML.center);\n            geometry.vertices.push(point);\n        }\n\n        var line = new Line.MeshLine();\n        line.setGeometry(geometry);\n        // Due to limitations in the ANGLE layer,\n        // with the WebGL renderer on Windows platforms\n        // lineWidth will always be 1 regardless of the set value\n        // Use MeshLine to fix it\n        var material = new Line.MeshLineMaterial({\n            lineWidth: options.lineWidth || 12,\n            sizeAttenuation: 0,\n            color: new THREE.Color(0xFF0000),\n        });\n\n        if (Capabilities.isLogDepthBufferSupported()) {\n            material.fragmentShader = material.fragmentShader.replace(/.*/, '').substr(1);\n            patchMaterialForLogDepthSupport(material);\n            // eslint-disable-next-line no-console\n            console.warn('MeshLineMaterial shader has been patched to add log depth buffer support');\n        }\n\n        const pathMesh = new THREE.Mesh(line.geometry, material);\n        // update size screen uniform\n        // update depth test for visibilty path, because of the proximity of the terrain and gpx mesh\n        pathMesh.onBeforeRender = updatePath;\n\n        return pathMesh;\n    } else {\n        return null;\n    }\n}\n\nfunction _gpxToMesh(gpxXML, options = {}) {\n    if (!gpxXML) {\n        return undefined;\n    }\n\n    if (options.enablePin == undefined) {\n        options.enablePin = true;\n    }\n\n    var gpxMesh = new THREE.Object3D();\n\n    // Getting the track points\n    var trackPts = _gpxToWTrackPointsMesh(gpxXML, options);\n\n    if (trackPts) {\n        gpxMesh.add(trackPts);\n    }\n\n    if (options.enablePin) {\n        // Getting the waypoint points\n        var wayPts = _gpxToWayPointsMesh(gpxXML, options.crs);\n\n        if (wayPts) {\n            gpxMesh.add(wayPts);\n        }\n    }\n\n    gpxMesh.position.copy(gpxXML.center);\n    gpxMesh.updateMatrixWorld();\n    // gpxMesh is static data, it doens't need matrix update\n    gpxMesh.matrixAutoUpdate = false;\n\n    return gpxMesh;\n}\n\nexport default {\n    /** @module gpxUtils */\n    /** Load gpx file and convert to THREE.Mesh\n     * @function load\n     * @param {string} urlFile  The url of gpx file\n     * @param {string} crs - The default CRS of Three.js coordinates. Should be a cartesian CRS.\n     * @param {Object=} options Optional properties.\n     * @param {boolean=} [options.enablePin=true] draw pin for way points\n     * @param {NetworkOptions=} options.networkOptions Options for fetching resources over network\n     * @param {number=} [options.lineWidth=12] set line width to track line\n     * @return {THREE.Mesh} Three.js Mesh see {@link https://threejs.org/docs/#api/objects/Mesh}\n     * @example\n     * // How add gpx object\n     * itowns.GpxUtils.load(url, viewer.referenceCrs).then((gpx) => {\n     *      if (gpx) {\n     *         viewer.scene.add(gpx);\n     *         viewer.notifyChange(true);\n     *      }\n     * });\n     *\n     */\n    load(urlFile, crs, options = {}) {\n        options.crs = crs;\n        return Fetcher.xml(urlFile, options.networkOptions).then(gpxXML => _gpxToMesh(gpxXML, options));\n    },\n};\n"]}