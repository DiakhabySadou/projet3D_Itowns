{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/OGCWebServiceHelper.js"],"names":["THREE","SIZE_TEXTURE_TILE","cache","cachePending","ioDXBIL","projection","getTextureFloat","buffer","texture","DataTexture","AlphaFormat","FloatType","needsUpdate","getColorTextureByUrl","url","networkOptions","cachedTexture","getRessource","resolve","has","get","promise","generateMipmaps","magFilter","LinearFilter","minFilter","anisotropy","set","then","addRessource","delete","getXBilTextureByUrl","textureCache","undefined","pending","promiseXBil","read","result","textureConcurrence","floatArray","computeTileMatrixSetCoordinates","tile","tileMatrixSet","wmtsCoords","tileCoord","WGS84toWMTS","extent","getCoordWMTS_WGS84","computeTMSCoordinates","crs","Error","c","center","layerDimension","dimensions","tileCount","Math","round","x","zoom","floor","west","y","north","WMTS_WGS84Parent","cWMTS","levelParent","pitch","diffLevel","diff","pow","invDiff","r","row","col","z"],"mappings":"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","file":"OGCWebServiceHelper.js","sourcesContent":["import * as THREE from 'three';\nimport Fetcher from './Fetcher';\nimport CacheRessource from './CacheRessource';\nimport IoDriver_XBIL from './IoDriver_XBIL';\nimport Projection from '../../Geographic/Projection';\nimport Extent from '../../Geographic/Extent';\n\n\nexport const SIZE_TEXTURE_TILE = 256;\n\n// CacheRessource is necessary for neighboring PM textures\n// The PM textures overlap several tiles WGS84, it is to avoid net requests\n// Info : THREE.js have cache image https://github.com/mrdoob/three.js/blob/master/src/loaders/ImageLoader.js#L25\nconst cache = CacheRessource();\nconst cachePending = new Map();\nconst ioDXBIL = new IoDriver_XBIL();\nconst projection = new Projection();\n\nconst getTextureFloat = function getTextureFloat(buffer) {\n    const texture = new THREE.DataTexture(buffer, SIZE_TEXTURE_TILE, SIZE_TEXTURE_TILE, THREE.AlphaFormat, THREE.FloatType);\n    texture.needsUpdate = true;\n    return texture;\n};\n\nexport default {\n    ioDXBIL,\n    getColorTextureByUrl(url, networkOptions) {\n        const cachedTexture = cache.getRessource(url);\n\n        if (cachedTexture) {\n            return Promise.resolve(cachedTexture);\n        }\n\n        const { texture, promise } = (cachePending.has(url)) ?\n            cachePending.get(url) :\n            Fetcher.texture(url, networkOptions);\n\n        texture.generateMipmaps = false;\n        texture.magFilter = THREE.LinearFilter;\n        texture.minFilter = THREE.LinearFilter;\n        texture.anisotropy = 16;\n\n\n        cachePending.set(url, { texture, promise });\n\n        return promise.then(() => {\n            if (!cache.getRessource(url)) {\n                cache.addRessource(url, texture);\n            }\n            cachePending.delete(url);\n            return texture;\n        });\n    },\n    getXBilTextureByUrl(url, networkOptions) {\n        const textureCache = cache.getRessource(url);\n\n        if (textureCache !== undefined) {\n            return Promise.resolve(textureCache);\n        }\n\n        const pending = cachePending.get(url);\n        if (pending) {\n            return pending;\n        }\n\n        const promiseXBil = ioDXBIL.read(url, networkOptions).then((result) => {\n            // TODO  RGBA is needed for navigator with no support in texture float\n            // In RGBA elevation texture LinearFilter give some errors with nodata value.\n            // need to rewrite sample function in shader\n\n            // loading concurrence\n            const textureConcurrence = cache.getRessource(url);\n            if (textureConcurrence) {\n                cachePending.delete(url);\n                return textureConcurrence;\n            }\n\n            const texture = getTextureFloat(result.floatArray);\n            texture.magFilter = THREE.LinearFilter;\n            texture.minFilter = THREE.LinearFilter;\n            texture.needsUpdate = true;\n            texture.generateMipmaps = false;\n            cache.addRessource(url, texture);\n            cachePending.delete(url);\n\n            return texture;\n        });\n\n        cachePending.set(url, promiseXBil);\n\n        return promiseXBil;\n    },\n    computeTileMatrixSetCoordinates(tile, tileMatrixSet) {\n        // Are WMTS coordinates ready?\n        if (!tile.wmtsCoords) {\n            tile.wmtsCoords = {};\n        }\n\n        tileMatrixSet = tileMatrixSet || 'WGS84G';\n        if (!(tileMatrixSet in tile.wmtsCoords)) {\n            const tileCoord = projection.WGS84toWMTS(tile.extent);\n\n            tile.wmtsCoords[tileMatrixSet] =\n                projection.getCoordWMTS_WGS84(tileCoord, tile.extent, tileMatrixSet);\n        }\n    },\n    computeTMSCoordinates(tile, extent) {\n        if (tile.extent.crs() != extent.crs()) {\n            throw new Error('Unsupported configuration. TMS is only supported when geometry has the same crs than TMS layer');\n        }\n        const c = tile.extent.center();\n        const layerDimension = extent.dimensions();\n\n        // Each level has 2^n * 2^n tiles...\n        // ... so we count how many tiles of the same width as tile we can fit in the layer\n        const tileCount = Math.round(layerDimension.x / tile.extent.dimensions().x);\n        // ... 2^zoom = tilecount => zoom = log2(tilecount)\n        const zoom = Math.floor(Math.log2(tileCount));\n\n        // Now that we have computed zoom, we can deduce x and y (or row / column)\n        const x = (c.x() - extent.west()) / layerDimension.x;\n        const y = (extent.north() - c.y()) / layerDimension.y;\n\n        return [new Extent('TMS', zoom, Math.floor(y * tileCount), Math.floor(x * tileCount))];\n    },\n    WMTS_WGS84Parent(cWMTS, levelParent, pitch) {\n        const diffLevel = cWMTS.zoom - levelParent;\n        const diff = Math.pow(2, diffLevel);\n        const invDiff = 1 / diff;\n\n        const r = (cWMTS.row - (cWMTS.row % diff)) * invDiff;\n        const c = (cWMTS.col - (cWMTS.col % diff)) * invDiff;\n\n        if (pitch) {\n            pitch.x = cWMTS.col * invDiff - c;\n            pitch.y = cWMTS.row * invDiff - r;\n            pitch.z = invDiff;\n        }\n\n        return new Extent(cWMTS.crs(), levelParent, r, c);\n    },\n};\n"]}