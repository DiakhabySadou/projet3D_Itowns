{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/PotreeBinLoader.js"],"names":["THREE","parse","buffer","Error","view","DataView","numPoints","Math","floor","byteLength","positions","Float32Array","colors","Uint8Array","tightbbox","Box3","min","set","Infinity","max","tmp","Vector3","offset","i","getUint32","fromArray","getUint8","geometry","BufferGeometry","addAttribute","BufferAttribute","material","points","Points","frustumCulled","matrixAutoUpdate","realPointCount"],"mappings":";;;;;;AAAA;;IAAYA,K;;AACZ;;;;;;;;AAEA;kBACe;AACXC,WAAO,UAAeC,MAAf,EAAuB;AAC1B,YAAI,CAACA,MAAL,EAAa;AACT,kBAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;;AAED,YAAMC,OAAO,IAAIC,QAAJ,CAAaH,MAAb,CAAb;AACA;AACA,YAAMI,YAAYC,KAAKC,KAAL,CAAWN,OAAOO,UAAP,GAAoB,EAA/B,CAAlB;;AAEA,YAAMC,YAAY,IAAIC,YAAJ,CAAiB,IAAIL,SAArB,CAAlB;AACA,YAAMM,SAAS,IAAIC,UAAJ,CAAe,IAAIP,SAAnB,CAAf;;AAEA,YAAMQ,YAAY,IAAId,MAAMe,IAAV,EAAlB;AACAD,kBAAUE,GAAV,CAAcC,GAAd,CAAkBC,QAAlB,EAA4BA,QAA5B,EAAsCA,QAAtC;AACAJ,kBAAUK,GAAV,CAAcF,GAAd,CAAkB,CAACC,QAAnB,EAA6B,CAACA,QAA9B,EAAwC,CAACA,QAAzC;AACA,YAAME,MAAM,IAAIpB,MAAMqB,OAAV,EAAZ;;AAEA,YAAIC,SAAS,CAAb;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIjB,SAApB,EAA+BiB,GAA/B,EAAoC;AAChCb,sBAAU,IAAIa,CAAd,IAAmBnB,KAAKoB,SAAL,CAAeF,SAAS,CAAxB,EAA2B,IAA3B,CAAnB;AACAZ,sBAAU,IAAIa,CAAJ,GAAQ,CAAlB,IAAuBnB,KAAKoB,SAAL,CAAeF,SAAS,CAAxB,EAA2B,IAA3B,CAAvB;AACAZ,sBAAU,IAAIa,CAAJ,GAAQ,CAAlB,IAAuBnB,KAAKoB,SAAL,CAAeF,SAAS,CAAxB,EAA2B,IAA3B,CAAvB;;AAEAF,gBAAIK,SAAJ,CAAcf,SAAd,EAAyB,IAAIa,CAA7B;AACAT,sBAAUE,GAAV,CAAcA,GAAd,CAAkBI,GAAlB;AACAN,sBAAUK,GAAV,CAAcA,GAAd,CAAkBC,GAAlB;;AAEAR,mBAAO,IAAIW,CAAX,IAAgBnB,KAAKsB,QAAL,CAAcJ,SAAS,EAAvB,CAAhB;AACAV,mBAAO,IAAIW,CAAJ,GAAQ,CAAf,IAAoBnB,KAAKsB,QAAL,CAAcJ,SAAS,EAAvB,CAApB;AACAV,mBAAO,IAAIW,CAAJ,GAAQ,CAAf,IAAoBnB,KAAKsB,QAAL,CAAcJ,SAAS,EAAvB,CAApB;AACAV,mBAAO,IAAIW,CAAJ,GAAQ,CAAf,IAAoB,GAApB;;AAEAD,sBAAU,EAAV;AACH;;AAED,YAAMK,WAAW,IAAI3B,MAAM4B,cAAV,EAAjB;AACAD,iBAASE,YAAT,CAAsB,UAAtB,EAAkC,IAAI7B,MAAM8B,eAAV,CAA0BpB,SAA1B,EAAqC,CAArC,CAAlC;AACAiB,iBAASE,YAAT,CAAsB,OAAtB,EAA+B,IAAI7B,MAAM8B,eAAV,CAA0BlB,MAA1B,EAAkC,CAAlC,EAAqC,IAArC,CAA/B;;AAEA,YAAMmB,WAAW,8BAAjB;AACA,YAAMC,SAAS,IAAIhC,MAAMiC,MAAV,CAAiBN,QAAjB,EAA2BI,QAA3B,CAAf;;AAEAC,eAAOE,aAAP,GAAuB,KAAvB;AACAF,eAAOG,gBAAP,GAA0B,KAA1B;AACAH,eAAOI,cAAP,GAAwB9B,SAAxB;AACA0B,eAAOlB,SAAP,GAAmBA,SAAnB;;AAEA,eAAOkB,MAAP;AACH;AAjDU,C","file":"PotreeBinLoader.js","sourcesContent":["import * as THREE from 'three';\nimport PointsMaterial from '../../../Renderer/PointsMaterial';\n\n// Parse .bin PotreeConverter format\nexport default {\n    parse: function parse(buffer) {\n        if (!buffer) {\n            throw new Error('No array buffer provided.');\n        }\n\n        const view = new DataView(buffer);\n        // Format: X1,Y1,Z1,R1,G1,B1,A1,[...],XN,YN,ZN,RN,GN,BN,AN\n        const numPoints = Math.floor(buffer.byteLength / 16);\n\n        const positions = new Float32Array(3 * numPoints);\n        const colors = new Uint8Array(4 * numPoints);\n\n        const tightbbox = new THREE.Box3();\n        tightbbox.min.set(Infinity, Infinity, Infinity);\n        tightbbox.max.set(-Infinity, -Infinity, -Infinity);\n        const tmp = new THREE.Vector3();\n\n        let offset = 0;\n        for (let i = 0; i < numPoints; i++) {\n            positions[3 * i] = view.getUint32(offset + 0, true);\n            positions[3 * i + 1] = view.getUint32(offset + 4, true);\n            positions[3 * i + 2] = view.getUint32(offset + 8, true);\n\n            tmp.fromArray(positions, 3 * i);\n            tightbbox.min.min(tmp);\n            tightbbox.max.max(tmp);\n\n            colors[4 * i] = view.getUint8(offset + 12);\n            colors[4 * i + 1] = view.getUint8(offset + 13);\n            colors[4 * i + 2] = view.getUint8(offset + 14);\n            colors[4 * i + 3] = 255;\n\n            offset += 16;\n        }\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n        geometry.addAttribute('color', new THREE.BufferAttribute(colors, 4, true));\n\n        const material = new PointsMaterial();\n        const points = new THREE.Points(geometry, material);\n\n        points.frustumCulled = false;\n        points.matrixAutoUpdate = false;\n        points.realPointCount = numPoints;\n        points.tightbbox = tightbbox;\n\n        return points;\n    },\n};\n"]}