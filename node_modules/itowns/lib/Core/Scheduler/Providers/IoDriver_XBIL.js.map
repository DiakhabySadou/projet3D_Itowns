{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/IoDriver_XBIL.js"],"names":["portableXBIL","buffer","floatArray","Float32Array","max","undefined","min","texture","IoDriver_XBIL","prototype","computeMinMaxElevation","width","height","offsetScale","sizeX","Math","floor","z","length","sizeY","xs","x","ys","y","inc","pit","val","parseXBil","url","Error","result","elevation","read","networkOptions","arrayBuffer","then"],"mappings":"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","file":"IoDriver_XBIL.js","sourcesContent":["import Fetcher from './Fetcher';\n\n\nvar portableXBIL = function portableXBIL(buffer) {\n    this.floatArray = new Float32Array(buffer);\n    this.max = undefined;\n    this.min = undefined;\n    this.texture = null;\n};\n\n\nfunction IoDriver_XBIL() {\n}\n\nIoDriver_XBIL.prototype.computeMinMaxElevation = function computeMinMaxElevation(buffer, width, height, offsetScale) {\n    let min = 1000000;\n    let max = -1000000;\n\n    if (!buffer) {\n        return { min: undefined, max: undefined };\n    }\n\n    const sizeX = offsetScale ? Math.floor(offsetScale.z * width) : buffer.length;\n    const sizeY = offsetScale ? Math.floor(offsetScale.z * height) : 1;\n    const xs = offsetScale ? Math.floor(offsetScale.x * width) : 0;\n    const ys = offsetScale ? Math.floor(offsetScale.y * height) : 0;\n\n    const inc = offsetScale ? Math.max(Math.floor(sizeX / 8), 2) : 16;\n\n    for (let y = ys; y < ys + sizeY; y += inc) {\n        const pit = y * (width || 0);\n        for (let x = xs; x < xs + sizeX; x += inc) {\n            const val = buffer[pit + x];\n            if (val > -10.0 && val !== undefined) {\n                max = Math.max(max, val);\n                min = Math.min(min, val);\n            }\n        }\n    }\n\n    if (max === -1000000 || min === 1000000) {\n        return { min: undefined, max: undefined };\n    }\n    return { min, max };\n};\n\nIoDriver_XBIL.prototype.parseXBil = function parseXBil(buffer, url) {\n    if (!buffer) {\n        throw new Error('Error processing XBIL');\n    }\n\n    var result = new portableXBIL(buffer);\n\n    var elevation = this.computeMinMaxElevation(result.floatArray);\n\n    result.min = elevation.min;\n    result.max = elevation.max;\n\n    result.url = url;\n\n    return result;\n};\n\n\nIoDriver_XBIL.prototype.read = function read(url, networkOptions) {\n    return Fetcher.arrayBuffer(url, networkOptions).then(buffer => this.parseXBil(buffer, url));\n};\n\n\nexport default IoDriver_XBIL;\n"]}