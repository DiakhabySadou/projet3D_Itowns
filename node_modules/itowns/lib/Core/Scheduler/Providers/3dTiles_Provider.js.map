{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/3dTiles_Provider.js"],"names":["patchMaterialForLogDepthSupport","THREE","$3dTilesIndex","tileset","baseURL","counter","index","inverseTileTransform","Matrix4","recurse","node","parent","transform","fromArray","undefined","_worldFromLocalTransform","multiplyMatrices","viewerRequestVolume","region","boundingVolume","getInverse","identity","getBox","tileId","children","child","bind","root","extendTileset","nodeId","$3dTiles_Provider","call","prototype","constructor","removeLayer","preprocessDataLayer","layer","view","scheduler","sseThreshold","cleanupDelay","_cleanableTiles","json","url","networkOptions","then","urlPrefix","slice","lastIndexOf","tileIndex","asset","volume","extent","radToDeg","box","extentToOBB","position","add","center","as","xyz","updateMatrix","matrix","premultiply","decompose","quaternion","scale","Vector3","w","x","e","s","y","n","b","z","t","Box3","sphere","Sphere","rePosition","RegExp","reMain","material","vertexShader","indexOf","re","exec","idx","length","fragmentShader","defines","USE_LOGDEPTHBUF","USE_LOGDEPTHBUF_EXT","b3dmToMesh","data","_b3dmLoader","parse","gltfUpAxis","_textDecoder","result","gltf","scene","traverse","mesh","frustumCulled","overrideMaterials","dispose","isMaterial","clone","MeshLambertMaterial","color","isLogDepthBufferSupported","isRawShaderMaterial","doNotPatchMaterial","console","warn","transparent","opacity","batchTable","object3d","pntsParse","resolve","point","configureTile","tile","metadata","id","applyMatrix","geometricError","refine","additiveRefinement","toUpperCase","updateMatrixWorld","executeCommand","command","Object3D","requester","path","content","TextDecoder","textDecoder","setLayer","obj","layers","set","threejsLayer","startsWith","supportedFormats","b3dm","pnts","arrayBuffer","func","magic","decode","Uint8Array","JSON","newPrefix","reject"],"mappings":"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","file":"3dTiles_Provider.js","sourcesContent":["import * as THREE from 'three';\nimport Provider from './Provider';\nimport B3dmLoader from '../../../Renderer/ThreeExtended/B3dmLoader';\nimport PntsLoader from '../../../Renderer/ThreeExtended/PntsLoader';\nimport Fetcher from './Fetcher';\nimport OBB from '../../../Renderer/ThreeExtended/OBB';\nimport Extent from '../../Geographic/Extent';\nimport MathExtended from '../../Math/MathExtended';\nimport Capabilities from '../../System/Capabilities';\nimport PrecisionQualifier from '../../../Renderer/Shader/Chunk/PrecisionQualifier.glsl';\nimport { init3dTilesLayer } from '../../../Process/3dTilesProcessing';\n\n\nfunction $3dTilesIndex(tileset, baseURL) {\n    let counter = 0;\n    this.index = {};\n    const inverseTileTransform = new THREE.Matrix4();\n    const recurse = function recurse_f(node, baseURL, parent) {\n        // compute transform (will become Object3D.matrix when the object is downloaded)\n        node.transform = node.transform ? (new THREE.Matrix4()).fromArray(node.transform) : undefined;\n\n        // The only reason to store _worldFromLocalTransform is because of extendTileset where we need the\n        // transform chain for one node.\n        node._worldFromLocalTransform = node.transform;\n        if (parent && parent._worldFromLocalTransform) {\n            if (node.transform) {\n                node._worldFromLocalTransform = new THREE.Matrix4().multiplyMatrices(\n                    parent._worldFromLocalTransform, node.transform);\n            } else {\n                node._worldFromLocalTransform = parent._worldFromLocalTransform;\n            }\n        }\n\n        // getBox only use inverseTileTransform for volume.region so let's not\n        // compute the inverse matrix each time\n        if ((node.viewerRequestVolume && node.viewerRequestVolume.region)\n            || (node.boundingVolume && node.boundingVolume.region)) {\n            if (node._worldFromLocalTransform) {\n                inverseTileTransform.getInverse(node._worldFromLocalTransform);\n            } else {\n                inverseTileTransform.identity();\n            }\n        }\n\n        node.viewerRequestVolume = node.viewerRequestVolume ? getBox(node.viewerRequestVolume, inverseTileTransform) : undefined;\n        node.boundingVolume = getBox(node.boundingVolume, inverseTileTransform);\n\n        this.index[counter] = node;\n        node.tileId = counter;\n        node.baseURL = baseURL;\n        counter++;\n        if (node.children) {\n            for (const child of node.children) {\n                recurse(child, baseURL, node);\n            }\n        }\n    }.bind(this);\n    recurse(tileset.root, baseURL);\n\n    this.extendTileset = function extendTileset(tileset, nodeId, baseURL) {\n        recurse(tileset.root, baseURL, this.index[nodeId]);\n        this.index[nodeId].children = [tileset.root];\n    };\n}\n\nfunction $3dTiles_Provider() {\n    Provider.call(this);\n}\n\n$3dTiles_Provider.prototype = Object.create(Provider.prototype);\n\n$3dTiles_Provider.prototype.constructor = $3dTiles_Provider;\n\n$3dTiles_Provider.prototype.removeLayer = function removeLayer() {\n\n};\n\n$3dTiles_Provider.prototype.preprocessDataLayer = function preprocessDataLayer(layer, view, scheduler) {\n    layer.sseThreshold = layer.sseThreshold || 16;\n    layer.cleanupDelay = layer.cleanupDelay || 1000;\n\n    layer._cleanableTiles = [];\n    return Fetcher.json(layer.url, layer.networkOptions).then((tileset) => {\n        layer.tileset = tileset;\n        const urlPrefix = layer.url.slice(0, layer.url.lastIndexOf('/') + 1);\n        layer.tileIndex = new $3dTilesIndex(tileset, urlPrefix);\n        layer.asset = tileset.asset;\n        return init3dTilesLayer(view, scheduler, layer, tileset.root);\n    });\n};\n\nfunction getBox(volume, inverseTileTransform) {\n    if (volume.region) {\n        const region = volume.region;\n        const extent = new Extent('EPSG:4326', MathExtended.radToDeg(region[0]), MathExtended.radToDeg(region[2]), MathExtended.radToDeg(region[1]), MathExtended.radToDeg(region[3]));\n        const box = OBB.extentToOBB(extent, region[4], region[5]);\n        // update position\n        box.position.add(extent.center().as('EPSG:4978').xyz());\n        // compute box.matrix from box.position/rotation.\n        box.updateMatrix();\n        // at this point box.matrix = box.epsg4978_from_local, so\n        // we transform it in parent_from_local by using parent's epsg4978_from_local\n        // which from our point of view is epsg4978_from_parent.\n        // box.matrix = (epsg4978_from_parent ^ -1) * epsg4978_from_local\n        //            =  parent_from_epsg4978 * epsg4978_from_local\n        //            =  parent_from_local\n        box.matrix.premultiply(inverseTileTransform);\n        // update position, rotation and scale\n        box.matrix.decompose(box.position, box.quaternion, box.scale);\n        return { region: box };\n    } else if (volume.box) {\n        // TODO: only works for axis aligned boxes\n        const box = volume.box;\n        // box[0], box[1], box[2] = center of the box\n        // box[3], box[4], box[5] = x axis direction and half-length\n        // box[6], box[7], box[8] = y axis direction and half-length\n        // box[9], box[10], box[11] = z axis direction and half-length\n        const center = new THREE.Vector3(box[0], box[1], box[2]);\n        const w = center.x - box[3];\n        const e = center.x + box[3];\n        const s = center.y - box[7];\n        const n = center.y + box[7];\n        const b = center.z - box[11];\n        const t = center.z + box[11];\n\n        return { box: new THREE.Box3(new THREE.Vector3(w, s, b), new THREE.Vector3(e, n, t)) };\n    } else if (volume.sphere) {\n        const sphere = new THREE.Sphere(new THREE.Vector3(volume.sphere[0], volume.sphere[1], volume.sphere[2]), volume.sphere[3]);\n        return { sphere };\n    }\n}\n\nconst rePosition = new RegExp('gl_Position.*(?![^]*gl_Position)');\nconst reMain = new RegExp('[^\\\\w]*main[^\\\\w]*(void)?[^\\\\w]*{');\nexport function patchMaterialForLogDepthSupport(material) {\n    // Check if the shader does not already use the log depth buffer\n    if (material.vertexShader.indexOf('USE_LOGDEPTHBUF') !== -1\n        || material.vertexShader.indexOf('logdepthbuf_pars_vertex') !== -1) {\n        return;\n    }\n\n    // Add vertex shader log depth buffer header\n    material.vertexShader = `#include <logdepthbuf_pars_vertex>\\n#define EPSILON 1e-6\\n${material.vertexShader}`;\n    // Add log depth buffer code snippet after last gl_Position modification\n    let re = rePosition.exec(material.vertexShader);\n    let idx = re[0].length + re.index;\n    material.vertexShader = `${material.vertexShader.slice(0, idx)}\\n#include <logdepthbuf_vertex>\\n${material.vertexShader.slice(idx)}`;\n\n    // Add fragment shader log depth buffer header\n    material.fragmentShader = `${PrecisionQualifier}\\n#include <logdepthbuf_pars_fragment>\\n${material.fragmentShader}`;\n    // Add log depth buffer code snippet at the first line of the main function\n    re = reMain.exec(material.fragmentShader);\n    idx = re[0].length + re.index;\n    material.fragmentShader = `${material.fragmentShader.slice(0, idx)}\\n#include <logdepthbuf_fragment>\\n${material.fragmentShader.slice(idx)}`;\n\n    material.defines = {\n        USE_LOGDEPTHBUF: 1,\n        USE_LOGDEPTHBUF_EXT: 1,\n    };\n}\n\n$3dTiles_Provider.prototype.b3dmToMesh = function b3dmToMesh(data, layer) {\n    this._b3dmLoader = this._b3dmLoader || new B3dmLoader();\n    return this._b3dmLoader.parse(data, layer.asset.gltfUpAxis, this._textDecoder).then((result) => {\n        const init = function f_init(mesh) {\n            mesh.frustumCulled = false;\n            if (mesh.material) {\n                if (layer.overrideMaterials) {\n                    mesh.material.dispose();\n                    if (typeof (layer.overrideMaterials) === 'object' &&\n                        layer.overrideMaterials.isMaterial) {\n                        mesh.material = layer.overrideMaterials.clone();\n                    } else {\n                        mesh.material = new THREE.MeshLambertMaterial({ color: 0xffffff });\n                    }\n                } else if (Capabilities.isLogDepthBufferSupported()\n                            && mesh.material.isRawShaderMaterial\n                            && !layer.doNotPatchMaterial) {\n                    patchMaterialForLogDepthSupport(mesh.material);\n                    // eslint-disable-next-line no-console\n                    console.warn('b3dm shader has been patched to add log depth buffer support');\n                }\n                mesh.material.transparent = layer.opacity < 1.0;\n                mesh.material.opacity = layer.opacity;\n            }\n        };\n        result.gltf.scene.traverse(init);\n        const batchTable = result.batchTable;\n        const object3d = result.gltf.scene;\n        return { batchTable, object3d };\n    });\n};\n\n$3dTiles_Provider.prototype.pntsParse = function pntsParse(data) {\n    return new Promise((resolve) => {\n        resolve({ object3d: PntsLoader.parse(data, this._textDecoder).point });\n    });\n};\n\nfunction configureTile(tile, layer, metadata, parent) {\n    tile.frustumCulled = false;\n    tile.layer = layer.id;\n\n    // parse metadata\n    if (metadata.transform) {\n        tile.applyMatrix(metadata.transform);\n    }\n    tile.geometricError = metadata.geometricError;\n    tile.tileId = metadata.tileId;\n    if (metadata.refine) {\n        tile.additiveRefinement = (metadata.refine.toUpperCase() === 'ADD');\n    } else {\n        tile.additiveRefinement = parent ? (parent.additiveRefinement) : false;\n    }\n    tile.viewerRequestVolume = metadata.viewerRequestVolume;\n    tile.boundingVolume = metadata.boundingVolume;\n    if (tile.boundingVolume.region) {\n        tile.add(tile.boundingVolume.region);\n    }\n    tile.updateMatrixWorld();\n}\n\n$3dTiles_Provider.prototype.executeCommand = function executeCommand(command) {\n    const layer = command.layer;\n    const metadata = command.metadata;\n    const tile = new THREE.Object3D();\n    configureTile(tile, layer, metadata, command.requester);\n    const path = metadata.content ? metadata.content.url : undefined;\n    this._textDecoder = this._textDecoder || new TextDecoder('utf-8');\n    const textDecoder = this._textDecoder;\n\n    const setLayer = (obj) => {\n        obj.layers.set(layer.threejsLayer);\n    };\n    if (path) {\n        // Check if we have relative or absolute url (with tileset's lopocs for example)\n        const url = path.startsWith('http') ? path : metadata.baseURL + path;\n        const supportedFormats = {\n            b3dm: this.b3dmToMesh.bind(this),\n            pnts: this.pntsParse.bind(this),\n        };\n        return Fetcher.arrayBuffer(url, layer.networkOptions).then((result) => {\n            if (result !== undefined) {\n                let func;\n                const magic = textDecoder.decode(new Uint8Array(result, 0, 4));\n                if (magic[0] === '{') {\n                    result = JSON.parse(textDecoder.decode(new Uint8Array(result)));\n                    const newPrefix = url.slice(0, url.lastIndexOf('/') + 1);\n                    layer.tileIndex.extendTileset(result, metadata.tileId, newPrefix);\n                } else if (magic == 'b3dm') {\n                    func = supportedFormats.b3dm;\n                } else if (magic == 'pnts') {\n                    func = supportedFormats.pnts;\n                } else {\n                    Promise.reject(`Unsupported magic code ${magic}`);\n                }\n                if (func) {\n                    // TODO: request should be delayed if there is a viewerRequestVolume\n                    return func(result, layer).then((content) => {\n                        tile.content = content.object3d;\n                        if (content.batchTable) {\n                            tile.batchTable = content.batchTable;\n                        }\n                        tile.add(content.object3d);\n                        tile.traverse(setLayer);\n                        return tile;\n                    });\n                }\n            }\n            tile.traverse(setLayer);\n            return tile;\n        });\n    } else {\n        return new Promise((resolve) => {\n            tile.traverse(setLayer);\n            resolve(tile);\n        });\n    }\n};\n\nexport default $3dTiles_Provider;\n"]}