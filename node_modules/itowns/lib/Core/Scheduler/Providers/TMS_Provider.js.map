{"version":3,"sources":["../../../../src/Core/Scheduler/Providers/TMS_Provider.js"],"names":["THREE","TMS_Provider","prototype","preprocessDataLayer","layer","extent","Error","id","projection","options","zoom","min","max","url","coTMS","replace","row","col","executeCommand","command","tile","requester","coordTMS","getCoordsForLayer","coordTMSParent","targetLevel","WMTS_WGS84Parent","undefined","getColorTextureByUrl","networkOptions","then","texture","result","coords","pitch","offsetToParent","Vector4","tileTextureCount","tileInsideLimit","tmsCoord"],"mappings":"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","file":"TMS_Provider.js","sourcesContent":["import * as THREE from 'three';\nimport OGCWebServiceHelper from './OGCWebServiceHelper';\nimport Extent from '../../Geographic/Extent';\n\nfunction TMS_Provider() {\n}\n\nTMS_Provider.prototype.preprocessDataLayer = function preprocessDataLayer(layer) {\n    if (!layer.extent) {\n        throw new Error(`Missing extent property for layer '${layer.id}'`);\n    }\n    if (!layer.projection) {\n        throw new Error(`Missing projection property for layer '${layer.id}'`);\n    }\n    layer.extent = new Extent(layer.projection, ...layer.extent);\n    if (!layer.options.zoom) {\n        layer.options.zoom = {\n            min: 0,\n            max: 18,\n        };\n    }\n};\n\nTMS_Provider.prototype.url = function url(coTMS, layer) {\n    /* eslint-disable no-template-curly-in-string */\n    return layer.url.replace('${z}', coTMS.zoom)\n        .replace('${y}', coTMS.row)\n        .replace('${x}', coTMS.col);\n    /* eslint-enable no-template-curly-in-string */\n};\n\nTMS_Provider.prototype.executeCommand = function executeCommand(command) {\n    const layer = command.layer;\n    const tile = command.requester;\n    const coordTMS = tile.getCoordsForLayer(layer)[0];\n    const coordTMSParent = (command.targetLevel < coordTMS.zoom) ?\n        OGCWebServiceHelper.WMTS_WGS84Parent(coordTMS, command.targetLevel) :\n        undefined;\n\n    const url = this.url(coordTMSParent || coordTMS, layer);\n\n    return OGCWebServiceHelper.getColorTextureByUrl(url, layer.networkOptions).then((texture) => {\n        const result = {};\n        result.texture = texture;\n        result.texture.coords = coordTMSParent || coordTMS;\n        result.pitch = coordTMSParent ?\n            coordTMS.offsetToParent(coordTMSParent) :\n            new THREE.Vector4(0, 0, 1, 1);\n        return result;\n    });\n};\n\nTMS_Provider.prototype.tileTextureCount = function tileTextureCount(tile, layer) {\n    return this.tileInsideLimit(tile, layer) ? 1 : 0;\n};\n\nTMS_Provider.prototype.tileInsideLimit = function tileInsideLimit(tile, layer, targetLevel) {\n    // assume 1 TMS texture per tile (ie: tile geometry CRS is the same as layer's CRS)\n    let tmsCoord = tile.getCoordsForLayer(layer)[0];\n\n    if (targetLevel < tmsCoord.zoom) {\n        tmsCoord = OGCWebServiceHelper.WMTS_WGS84Parent(tmsCoord, targetLevel);\n    }\n\n    return layer.options.zoom.min <= tmsCoord.zoom &&\n            tmsCoord.zoom <= layer.options.zoom.max;\n};\n\nexport default TMS_Provider;\n"]}