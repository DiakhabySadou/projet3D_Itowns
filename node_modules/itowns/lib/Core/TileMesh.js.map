{"version":3,"sources":["../../src/Core/TileMesh.js"],"names":["THREE","TileMesh","geometry","material","params","Mesh","call","matrixAutoUpdate","rotationAutoUpdate","extent","Error","level","normal","center","clone","normalize","boundingSphereOffset","Vector3","frustumCulled","updateGeometricError","setDisplayed","layerUpdateState","setUuid","id","prototype","constructor","updateMatrixWorld","force","OBB","update","isVisible","visible","show","setVisibility","isDisplayed","changeState","state","DEPTH","defines","DEPTH_MODE","MATTE_ID_MODE","ID","needsUpdate","setFog","fog","setFogDistance","setSelected","select","setTextureElevation","elevation","offsetScale","pitch","Vector4","setBBoxZ","min","max","setTexture","texture","undefined","Math","floor","z","delta","updateZ","trans","setLength","y","boundingSphere","radius","sqrt","x","geometricError","setTexturesLayer","textures","layerType","layerId","getLayerTextures","mat","isColorLayerLoaded","getColorLayerLevelById","isElevationLayerLoaded","loadedTexturesCount","isColorLayerDownscaled","layer","getZoomForLayer","normals","fourCorners","getIndexLayerColor","idLayer","indexOfColorLayer","removeColorLayer","changeSequenceLayers","sequence","layerCount","getColorLayersCount","setSequence","getCoordsForLayer","protocol","indexOf","computeTileMatrixSetCoordinates","options","tileMatrixSet","wmtsCoords","crs","projection","tilematrixset","computeTMSCoordinates","zoom"],"mappings":";;;;;;;;;;AAMA;;IAAYA,K;;AACZ;;AACA;;;;AACA;;;;;;;;AATA;;;;;;AAWA,SAASC,QAAT,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCC,MAAtC,EAA8C;AAC1C;AACAJ,UAAMK,IAAN,CAAWC,IAAX,CAAgB,IAAhB;;AAEA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,kBAAL,GAA0B,KAA1B;;AAEA,QAAI,CAACJ,OAAOK,MAAZ,EAAoB;AAChB,cAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAED,SAAKC,KAAL,GAAaP,OAAOO,KAApB;AACA,SAAKF,MAAL,GAAcL,OAAOK,MAArB;;AAEA,SAAKP,QAAL,GAAgBA,QAAhB;AACA,SAAKU,MAAL,GAAcR,OAAOS,MAAP,CAAcC,KAAd,GAAsBC,SAAtB,EAAd;;AAEA,SAAKC,oBAAL,GAA4B,IAAIhB,MAAMiB,OAAV,EAA5B;;AAEA,SAAKd,QAAL,GAAgBA,QAAhB;;AAEA,SAAKe,aAAL,GAAqB,KAArB;;AAEA,SAAKC,oBAAL;;AAEA;AACA,SAAKC,YAAL,CAAkB,KAAlB;;AAEA,SAAKC,gBAAL,GAAwB,EAAxB;;AAEA,SAAKlB,QAAL,CAAcmB,OAAd,CAAsB,KAAKC,EAA3B;AACH;;AAEDtB,SAASuB,SAAT,GAAqB,sBAAcxB,MAAMK,IAAN,CAAWmB,SAAzB,CAArB;AACAvB,SAASuB,SAAT,CAAmBC,WAAnB,GAAiCxB,QAAjC;;AAEAA,SAASuB,SAAT,CAAmBE,iBAAnB,GAAuC,UAA2BC,KAA3B,EAAkC;AACrE3B,UAAMK,IAAN,CAAWmB,SAAX,CAAqBE,iBAArB,CAAuCpB,IAAvC,CAA4C,IAA5C,EAAkDqB,KAAlD;AACA,SAAKzB,QAAL,CAAc0B,GAAd,CAAkBC,MAAlB;AACH,CAHD;;AAKA5B,SAASuB,SAAT,CAAmBM,SAAnB,GAA+B,YAAqB;AAChD,WAAO,KAAKC,OAAZ;AACH,CAFD;;AAIA9B,SAASuB,SAAT,CAAmBJ,YAAnB,GAAkC,UAAsBY,IAAtB,EAA4B;AAC1D,SAAK7B,QAAL,CAAc4B,OAAd,GAAwBC,IAAxB;AACH,CAFD;;AAIA/B,SAASuB,SAAT,CAAmBS,aAAnB,GAAmC,UAAuBD,IAAvB,EAA6B;AAC5D,SAAKD,OAAL,GAAeC,IAAf;AACH,CAFD;;AAIA/B,SAASuB,SAAT,CAAmBU,WAAnB,GAAiC,YAAuB;AACpD,WAAO,KAAK/B,QAAL,CAAc4B,OAArB;AACH,CAFD;;AAIA;AACA9B,SAASuB,SAAT,CAAmBW,WAAnB,GAAiC,UAAqBC,KAArB,EAA4B;AACzD,QAAIA,SAAS,2BAAiBC,KAA9B,EAAqC;AACjC,aAAKlC,QAAL,CAAcmC,OAAd,CAAsBC,UAAtB,GAAmC,CAAnC;AACA,eAAO,KAAKpC,QAAL,CAAcmC,OAAd,CAAsBE,aAA7B;AACH,KAHD,MAGO,IAAIJ,SAAS,2BAAiBK,EAA9B,EAAkC;AACrC,aAAKtC,QAAL,CAAcmC,OAAd,CAAsBE,aAAtB,GAAsC,CAAtC;AACA,eAAO,KAAKrC,QAAL,CAAcmC,OAAd,CAAsBC,UAA7B;AACH,KAHM,MAGA;AACH,eAAO,KAAKpC,QAAL,CAAcmC,OAAd,CAAsBE,aAA7B;AACA,eAAO,KAAKrC,QAAL,CAAcmC,OAAd,CAAsBC,UAA7B;AACH;;AAED,SAAKpC,QAAL,CAAcuC,WAAd,GAA4B,IAA5B;AACH,CAbD;;AAeAzC,SAASuB,SAAT,CAAmBmB,MAAnB,GAA4B,UAAgBC,GAAhB,EAAqB;AAC7C,QAAI,KAAKzC,QAAL,CAAc0C,cAAlB,EAAkC;AAC9B,aAAK1C,QAAL,CAAc0C,cAAd,CAA6BD,GAA7B;AACH;AACJ,CAJD;;AAMA3C,SAASuB,SAAT,CAAmBsB,WAAnB,GAAiC,UAAqBC,MAArB,EAA6B;AAC1D,SAAK5C,QAAL,CAAc2C,WAAd,CAA0BC,MAA1B;AACH,CAFD;;AAIA9C,SAASuB,SAAT,CAAmBwB,mBAAnB,GAAyC,UAA6BC,SAA7B,EAAwC;AAC7E,QAAI,KAAK9C,QAAL,KAAkB,IAAtB,EAA4B;AACxB;AACH;;AAED,QAAM+C,cAAcD,UAAUE,KAAV,IAAmB,IAAInD,MAAMoD,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAvC;AACA,SAAKC,QAAL,CAAcJ,UAAUK,GAAxB,EAA6BL,UAAUM,GAAvC;;AAEA,SAAKpD,QAAL,CAAcqD,UAAd,CAAyBP,UAAUQ,OAAnC,yCAAyD,CAAzD,EAA4DP,WAA5D;AACH,CATD;;AAYAjD,SAASuB,SAAT,CAAmB6B,QAAnB,GAA8B,UAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AACtD,QAAID,OAAOI,SAAP,IAAoBH,OAAOG,SAA/B,EAA0C;AACtC;AACH;AACD,QAAIC,KAAKC,KAAL,CAAWN,GAAX,MAAoBK,KAAKC,KAAL,CAAW,KAAK1D,QAAL,CAAc0B,GAAd,CAAkBiC,CAAlB,CAAoBP,GAA/B,CAApB,IAA2DK,KAAKC,KAAL,CAAWL,GAAX,MAAoBI,KAAKC,KAAL,CAAW,KAAK1D,QAAL,CAAc0B,GAAd,CAAkBiC,CAAlB,CAAoBN,GAA/B,CAAnF,EAAwH;AACpH,YAAMO,QAAQ,KAAK5D,QAAL,CAAc0B,GAAd,CAAkBmC,OAAlB,CAA0BT,GAA1B,EAA+BC,GAA/B,CAAd;AACA,YAAMS,QAAQ,KAAKpD,MAAL,CAAYE,KAAZ,GAAoBmD,SAApB,CAA8BH,MAAMI,CAApC,CAAd;;AAEA,aAAKhE,QAAL,CAAciE,cAAd,CAA6BC,MAA7B,GAAsCT,KAAKU,IAAL,CAAUP,MAAMQ,CAAN,GAAUR,MAAMQ,CAAhB,GAAoB,KAAKpE,QAAL,CAAciE,cAAd,CAA6BC,MAA7B,GAAsC,KAAKlE,QAAL,CAAciE,cAAd,CAA6BC,MAAjG,CAAtC;AACA,aAAKjD,oBAAL;AACA,aAAKH,oBAAL,GAA4BgD,KAA5B;AACH;AACJ,CAZD;;AAcA/D,SAASuB,SAAT,CAAmBL,oBAAnB,GAA0C,YAAgC;AACtE;AACA;AACA,SAAKoD,cAAL,GAAsB,KAAKrE,QAAL,CAAciE,cAAd,CAA6BC,MAA7B,yCAAtB;AACH,CAJD;;AAMAnE,SAASuB,SAAT,CAAmBgD,gBAAnB,GAAsC,UAA0BC,QAA1B,EAAoCC,SAApC,EAA+CC,OAA/C,EAAwD;AAC1F,QAAI,KAAKxE,QAAL,KAAkB,IAAtB,EAA4B;AACxB;AACH;AACD,QAAIsE,QAAJ,EAAc;AACV,aAAKtE,QAAL,CAAcqE,gBAAd,CAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,OAApD;AACH;AACJ,CAPD;;AASA1E,SAASuB,SAAT,CAAmBoD,gBAAnB,GAAsC,UAA0BF,SAA1B,EAAqCC,OAArC,EAA8C;AAChF,QAAME,MAAM,KAAK1E,QAAjB;AACA,WAAO0E,IAAID,gBAAJ,CAAqBF,SAArB,EAAgCC,OAAhC,CAAP;AACH,CAHD;;AAKA1E,SAASuB,SAAT,CAAmBsD,kBAAnB,GAAwC,UAA4BH,OAA5B,EAAqC;AACzE,QAAME,MAAM,KAAK1E,QAAjB;AACA,WAAO0E,IAAIE,sBAAJ,CAA2BJ,OAA3B,IAAsC,CAAC,CAA9C;AACH,CAHD;;AAKA1E,SAASuB,SAAT,CAAmBwD,sBAAnB,GAA4C,YAAkC;AAC1E,WAAO,KAAK7E,QAAL,CAAc8E,mBAAd,0CAAiD,CAAxD;AACH,CAFD;;AAIAhF,SAASuB,SAAT,CAAmB0D,sBAAnB,GAA4C,UAAgCC,KAAhC,EAAuC;AAC/E,QAAMN,MAAM,KAAK1E,QAAjB;AACA,WAAO0E,IAAIK,sBAAJ,CAA2BC,MAAM5D,EAAjC,EAAqC,KAAK6D,eAAL,CAAqBD,KAArB,CAArC,CAAP;AACH,CAHD;;AAKAlF,SAASuB,SAAT,CAAmB6D,OAAnB,GAA6B,YAAmB;AAC5C,WAAO,KAAKnF,QAAL,CAAcmF,OAArB;AACH,CAFD;;AAIApF,SAASuB,SAAT,CAAmB8D,WAAnB,GAAiC,YAAuB;AACpD,WAAO,KAAKpF,QAAL,CAAcoF,WAArB;AACH,CAFD;;AAIArF,SAASuB,SAAT,CAAmBZ,MAAnB,GAA4B,YAAkB;AAC1C,WAAO,KAAKV,QAAL,CAAcU,MAArB;AACH,CAFD;;AAIAX,SAASuB,SAAT,CAAmBX,MAAnB,GAA4B,YAAkB;AAC1C,WAAO,KAAKX,QAAL,CAAcW,MAArB;AACH,CAFD;;AAIAZ,SAASuB,SAAT,CAAmBI,GAAnB,GAAyB,YAAe;AACpC,WAAO,KAAK1B,QAAL,CAAc0B,GAArB;AACH,CAFD;;AAIA3B,SAASuB,SAAT,CAAmB+D,kBAAnB,GAAwC,UAA4BC,OAA5B,EAAqC;AACzE,WAAO,KAAKrF,QAAL,CAAcsF,iBAAd,CAAgCD,OAAhC,CAAP;AACH,CAFD;;AAIAvF,SAASuB,SAAT,CAAmBkE,gBAAnB,GAAsC,UAA0BF,OAA1B,EAAmC;AACrE,QAAI,KAAKnE,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBmE,OAAtB,CAA7B,EAA6D;AACzD,eAAO,KAAKnE,gBAAL,CAAsBmE,OAAtB,CAAP;AACH;AACD,SAAKrF,QAAL,CAAcuF,gBAAd,CAA+BF,OAA/B;AACH,CALD;;AAOAvF,SAASuB,SAAT,CAAmBmE,oBAAnB,GAA0C,UAA8BC,QAA9B,EAAwC;AAC9E,QAAMC,aAAa,KAAK1F,QAAL,CAAc2F,mBAAd,EAAnB;;AAEA;AACA,QAAID,aAAa,CAAjB,EAAoB;AAChB;AACH;;AAED,SAAK1F,QAAL,CAAc4F,WAAd,CAA0BH,QAA1B;AACH,CATD;;AAWA3F,SAASuB,SAAT,CAAmBwE,iBAAnB,GAAuC,UAA2Bb,KAA3B,EAAkC;AACrE,QAAIA,MAAMc,QAAN,CAAeC,OAAf,CAAuB,MAAvB,KAAkC,CAAtC,EAAyC;AACrC,sCAAoBC,+BAApB,CAAoD,IAApD,EAA0DhB,MAAMiB,OAAN,CAAcC,aAAxE;AACA,eAAO,KAAKC,UAAL,CAAgBnB,MAAMiB,OAAN,CAAcC,aAA9B,CAAP;AACH,KAHD,MAGO,IAAIlB,MAAMc,QAAN,IAAkB,KAAlB,IAA2B,KAAKxF,MAAL,CAAY8F,GAAZ,MAAqBpB,MAAMqB,UAA1D,EAAsE;AACzE,YAAIrB,MAAMqB,UAAN,IAAoB,WAAxB,EAAqC;AACjC,gBAAMC,gBAAgB,IAAtB;AACA,0CAAoBN,+BAApB,CAAoD,IAApD,EAA0DM,aAA1D;AACA,mBAAO,KAAKH,UAAL,CAAgBG,aAAhB,CAAP;AACH,SAJD,MAIO;AACH,kBAAM,IAAI/F,KAAJ,CAAU,4CAAV,CAAN;AACH;AACJ,KARM,MAQA,IAAIyE,MAAMc,QAAN,IAAkB,KAAtB,EAA6B;AAChC,eAAO,8BAAoBS,qBAApB,CAA0C,IAA1C,EAAgDvB,MAAM1E,MAAtD,CAAP;AACH,KAFM,MAEA;AACH,eAAO,CAAC,KAAKA,MAAN,CAAP;AACH;AACJ,CAjBD;;AAmBAR,SAASuB,SAAT,CAAmB4D,eAAnB,GAAqC,UAAyBD,KAAzB,EAAgC;AACjE,QAAIA,MAAMc,QAAN,CAAeC,OAAf,CAAuB,MAAvB,KAAkC,CAAtC,EAAyC;AACrC,sCAAoBC,+BAApB,CAAoD,IAApD,EAA0DhB,MAAMiB,OAAN,CAAcC,aAAxE;AACA,eAAO,KAAKC,UAAL,CAAgBnB,MAAMiB,OAAN,CAAcC,aAA9B,EAA6C,CAA7C,EAAgDM,IAAvD;AACH,KAHD,MAGO;AACH,eAAO,KAAKhG,KAAZ;AACH;AACJ,CAPD;;kBASeV,Q","file":"TileMesh.js","sourcesContent":["/**\n * Generated On: 2015-10-5\n * Class: TileMesh\n * Description: Tuile de maillage, noeud du quadtree MNT. Le Materiel est issus du QuadTree ORTHO.\n */\n\nimport * as THREE from 'three';\nimport { l_ELEVATION } from '../Renderer/LayeredMaterialConstants';\nimport RendererConstant from '../Renderer/RendererConstant';\nimport OGCWebServiceHelper, { SIZE_TEXTURE_TILE } from './Scheduler/Providers/OGCWebServiceHelper';\n\nfunction TileMesh(geometry, material, params) {\n    // Constructor\n    THREE.Mesh.call(this);\n\n    this.matrixAutoUpdate = false;\n    this.rotationAutoUpdate = false;\n\n    if (!params.extent) {\n        throw new Error('params.extent is mandatory to build a TileMesh');\n    }\n\n    this.level = params.level;\n    this.extent = params.extent;\n\n    this.geometry = geometry;\n    this.normal = params.center.clone().normalize();\n\n    this.boundingSphereOffset = new THREE.Vector3();\n\n    this.material = material;\n\n    this.frustumCulled = false;\n\n    this.updateGeometricError();\n\n    // Layer\n    this.setDisplayed(false);\n\n    this.layerUpdateState = {};\n\n    this.material.setUuid(this.id);\n}\n\nTileMesh.prototype = Object.create(THREE.Mesh.prototype);\nTileMesh.prototype.constructor = TileMesh;\n\nTileMesh.prototype.updateMatrixWorld = function updateMatrixWorld(force) {\n    THREE.Mesh.prototype.updateMatrixWorld.call(this, force);\n    this.geometry.OBB.update();\n};\n\nTileMesh.prototype.isVisible = function isVisible() {\n    return this.visible;\n};\n\nTileMesh.prototype.setDisplayed = function setDisplayed(show) {\n    this.material.visible = show;\n};\n\nTileMesh.prototype.setVisibility = function setVisibility(show) {\n    this.visible = show;\n};\n\nTileMesh.prototype.isDisplayed = function isDisplayed() {\n    return this.material.visible;\n};\n\n// switch material in function of state\nTileMesh.prototype.changeState = function changeState(state) {\n    if (state == RendererConstant.DEPTH) {\n        this.material.defines.DEPTH_MODE = 1;\n        delete this.material.defines.MATTE_ID_MODE;\n    } else if (state == RendererConstant.ID) {\n        this.material.defines.MATTE_ID_MODE = 1;\n        delete this.material.defines.DEPTH_MODE;\n    } else {\n        delete this.material.defines.MATTE_ID_MODE;\n        delete this.material.defines.DEPTH_MODE;\n    }\n\n    this.material.needsUpdate = true;\n};\n\nTileMesh.prototype.setFog = function setFog(fog) {\n    if (this.material.setFogDistance) {\n        this.material.setFogDistance(fog);\n    }\n};\n\nTileMesh.prototype.setSelected = function setSelected(select) {\n    this.material.setSelected(select);\n};\n\nTileMesh.prototype.setTextureElevation = function setTextureElevation(elevation) {\n    if (this.material === null) {\n        return;\n    }\n\n    const offsetScale = elevation.pitch || new THREE.Vector4(0, 0, 1, 1);\n    this.setBBoxZ(elevation.min, elevation.max);\n\n    this.material.setTexture(elevation.texture, l_ELEVATION, 0, offsetScale);\n};\n\n\nTileMesh.prototype.setBBoxZ = function setBBoxZ(min, max) {\n    if (min == undefined && max == undefined) {\n        return;\n    }\n    if (Math.floor(min) !== Math.floor(this.geometry.OBB.z.min) || Math.floor(max) !== Math.floor(this.geometry.OBB.z.max)) {\n        const delta = this.geometry.OBB.updateZ(min, max);\n        const trans = this.normal.clone().setLength(delta.y);\n\n        this.geometry.boundingSphere.radius = Math.sqrt(delta.x * delta.x + this.geometry.boundingSphere.radius * this.geometry.boundingSphere.radius);\n        this.updateGeometricError();\n        this.boundingSphereOffset = trans;\n    }\n};\n\nTileMesh.prototype.updateGeometricError = function updateGeometricError() {\n    // The geometric error is calculated to have a correct texture display.\n    // For the projection of a texture's texel to be less than or equal to one pixel\n    this.geometricError = this.geometry.boundingSphere.radius / SIZE_TEXTURE_TILE;\n};\n\nTileMesh.prototype.setTexturesLayer = function setTexturesLayer(textures, layerType, layerId) {\n    if (this.material === null) {\n        return;\n    }\n    if (textures) {\n        this.material.setTexturesLayer(textures, layerType, layerId);\n    }\n};\n\nTileMesh.prototype.getLayerTextures = function getLayerTextures(layerType, layerId) {\n    const mat = this.material;\n    return mat.getLayerTextures(layerType, layerId);\n};\n\nTileMesh.prototype.isColorLayerLoaded = function isColorLayerLoaded(layerId) {\n    const mat = this.material;\n    return mat.getColorLayerLevelById(layerId) > -1;\n};\n\nTileMesh.prototype.isElevationLayerLoaded = function isElevationLayerLoaded() {\n    return this.material.loadedTexturesCount[l_ELEVATION] > 0;\n};\n\nTileMesh.prototype.isColorLayerDownscaled = function isColorLayerDownscaled(layer) {\n    const mat = this.material;\n    return mat.isColorLayerDownscaled(layer.id, this.getZoomForLayer(layer));\n};\n\nTileMesh.prototype.normals = function normals() {\n    return this.geometry.normals;\n};\n\nTileMesh.prototype.fourCorners = function fourCorners() {\n    return this.geometry.fourCorners;\n};\n\nTileMesh.prototype.normal = function normal() {\n    return this.geometry.normal;\n};\n\nTileMesh.prototype.center = function center() {\n    return this.geometry.center;\n};\n\nTileMesh.prototype.OBB = function OBB() {\n    return this.geometry.OBB;\n};\n\nTileMesh.prototype.getIndexLayerColor = function getIndexLayerColor(idLayer) {\n    return this.material.indexOfColorLayer(idLayer);\n};\n\nTileMesh.prototype.removeColorLayer = function removeColorLayer(idLayer) {\n    if (this.layerUpdateState && this.layerUpdateState[idLayer]) {\n        delete this.layerUpdateState[idLayer];\n    }\n    this.material.removeColorLayer(idLayer);\n};\n\nTileMesh.prototype.changeSequenceLayers = function changeSequenceLayers(sequence) {\n    const layerCount = this.material.getColorLayersCount();\n\n    // Quit if there is only one layer\n    if (layerCount < 2) {\n        return;\n    }\n\n    this.material.setSequence(sequence);\n};\n\nTileMesh.prototype.getCoordsForLayer = function getCoordsForLayer(layer) {\n    if (layer.protocol.indexOf('wmts') == 0) {\n        OGCWebServiceHelper.computeTileMatrixSetCoordinates(this, layer.options.tileMatrixSet);\n        return this.wmtsCoords[layer.options.tileMatrixSet];\n    } else if (layer.protocol == 'wms' && this.extent.crs() != layer.projection) {\n        if (layer.projection == 'EPSG:3857') {\n            const tilematrixset = 'PM';\n            OGCWebServiceHelper.computeTileMatrixSetCoordinates(this, tilematrixset);\n            return this.wmtsCoords[tilematrixset];\n        } else {\n            throw new Error('unsupported projection wms for this viewer');\n        }\n    } else if (layer.protocol == 'tms') {\n        return OGCWebServiceHelper.computeTMSCoordinates(this, layer.extent);\n    } else {\n        return [this.extent];\n    }\n};\n\nTileMesh.prototype.getZoomForLayer = function getZoomForLayer(layer) {\n    if (layer.protocol.indexOf('wmts') == 0) {\n        OGCWebServiceHelper.computeTileMatrixSetCoordinates(this, layer.options.tileMatrixSet);\n        return this.wmtsCoords[layer.options.tileMatrixSet][0].zoom;\n    } else {\n        return this.level;\n    }\n};\n\nexport default TileMesh;\n"]}