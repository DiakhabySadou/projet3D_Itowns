{"version":3,"sources":["../../../src/Core/Geographic/Projection.js"],"names":["Projection","prototype","WGS84ToY","latitude","Math","log","tan","PI_OV_FOUR","INV_TWO_PI","YToWGS84","y","atan","exp","WGS84ToOneSubY","WGS84LatitudeClamp","min","PI","max","getCoordWMTS_WGS84","tileCoord","bbox","tileMatrixSet","WMTS_WGS84ToWMTS_PM","Error","getAllCoordsWMTS","tileMatrixSets","tilesMT","key","Object","hasOwnProperty","call","getCoordsWMTS","box","row","push","zoom","col","cWMTS","wmtsBox","level","nbRow","pow","sizeRow","yMin","north","RADIAN","yMax","south","maxRow","minRow","floor","ceil","minCol","r","c","WGS84toWMTS","dim","dimensions","LOG_TWO","nY","uX","TWO_PI","uY","center","longitude","PI_OV_TWO","UnitaryToLongitudeWGS84","u","west","x","UnitaryToLatitudeWGS84","v","wgs84_to_lambert93","a","e","deg2rad","lc","phi0","phi1","phi2","phi","l","gN1","sqrt","sin","gN2","gl1","gl2","gl0","gl","n","cos","ys","x93","y93"],"mappings":"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","file":"Projection.js","sourcesContent":["/**\n * Generated On: 2015-10-5\n * Class: Projection\n * Description: Outils de projections cartographiques et de convertion\n */\nimport MathExt from '../Math/MathExtended';\nimport { UNIT } from './Coordinates';\nimport Extent from './Extent';\n\n\nfunction Projection() {\n    // Constructor\n\n}\n\nProjection.prototype.WGS84ToY = function WGS84ToY(latitude) {\n    return 0.5 - Math.log(Math.tan(MathExt.PI_OV_FOUR + latitude * 0.5)) * MathExt.INV_TWO_PI;\n};\n\nProjection.prototype.YToWGS84 = function YToWGS84(y) {\n    return 2 * (Math.atan(Math.exp(-(y - 0.5) / MathExt.INV_TWO_PI)) - MathExt.PI_OV_FOUR);\n};\n\nProjection.prototype.WGS84ToOneSubY = function WGS84ToOneSubY(latitude) {\n    // TODO remove me\n    return 0.5 + Math.log(Math.tan(MathExt.PI_OV_FOUR + latitude * 0.5)) * MathExt.INV_TWO_PI;\n};\n\nProjection.prototype.WGS84LatitudeClamp = function WGS84LatitudeClamp(latitude) {\n    // var min = -68.1389  / 180 * Math.PI;\n    var min = -86 / 180 * Math.PI;\n    var max = 84 / 180 * Math.PI;\n\n    latitude = Math.max(min, latitude);\n    latitude = Math.min(max, latitude);\n\n    return latitude;\n};\n\nProjection.prototype.getCoordWMTS_WGS84 = function getCoordWMTS_WGS84(tileCoord, bbox, tileMatrixSet) {\n    // TODO: PM, WGS84G are hard-coded reference to IGN's TileMatrixSet\n    if (tileMatrixSet === 'PM') {\n        return this.WMTS_WGS84ToWMTS_PM(tileCoord, bbox);\n    } else if (tileMatrixSet === 'WGS84G') {\n        return [tileCoord];\n    } else {\n        throw new Error(`Unsupported TileMatrixSet '${tileMatrixSet}'`);\n    }\n};\n\nProjection.prototype.getAllCoordsWMTS = function getAllCoordsWMTS(tileCoord, bbox, tileMatrixSets) {\n    var tilesMT = [];\n\n    for (var key in tileMatrixSets) {\n        if (Object.prototype.hasOwnProperty.call(tileMatrixSets, key)) {\n            tilesMT[key] = this.getCoordsWMTS(tileCoord, bbox, key);\n        }\n    }\n\n    return tilesMT;\n};\n\nProjection.prototype.getCoordsWMTS = function getCoordsWMTS(tileCoord, bbox, tileMatrixSet) {\n    var box = this.getCoordWMTS_WGS84(tileCoord, bbox, tileMatrixSet);\n    var tilesMT = [];\n\n    for (var row = box[0].row; row < box[1].row + 1; row++) {\n        tilesMT.push(new Extent(`WMTS:${tileMatrixSet}`, box[0].zoom, row, box[0].col));\n    }\n\n    return tilesMT;\n};\n\n\n/**\n *\n * @param {type} cWMTS\n * @param {type} bbox\n * @returns {Array} coord WMTS array in pseudo mercator\n */\nProjection.prototype.WMTS_WGS84ToWMTS_PM = function WMTS_WGS84ToWMTS_PM(cWMTS, bbox) {\n    var wmtsBox = [];\n    var level = cWMTS.zoom + 1;\n    var nbRow = Math.pow(2, level);\n\n    // var sY      = this.WGS84ToY(this.WGS84LatitudeClamp(-Math.PI*0.5)) - this.WGS84ToY(this.WGS84LatitudeClamp(Math.PI*0.5));\n    var sizeRow = 1.0 / nbRow;\n\n    var yMin = this.WGS84ToY(this.WGS84LatitudeClamp(bbox.north(UNIT.RADIAN)));\n    var yMax = this.WGS84ToY(this.WGS84LatitudeClamp(bbox.south(UNIT.RADIAN)));\n\n    let maxRow;\n\n    const min = yMin / sizeRow;\n    const max = yMax / sizeRow;\n\n    const minRow = Math.floor(min);\n    // ]N; N+1] => N\n    maxRow = Math.ceil(max) - 1;\n    // make sure we don't exceed boundaries\n    maxRow = Math.min(maxRow, nbRow - 1);\n\n    var minCol = cWMTS.col;\n    var maxCol = minCol;\n\n    for (let r = maxRow; r >= minRow; r--) {\n        for (let c = minCol; c <= maxCol; c++) {\n            wmtsBox.push(new Extent('WMTS:PM', level, r, c));\n        }\n    }\n\n    return wmtsBox;\n};\n\nProjection.prototype.WGS84toWMTS = function WGS84toWMTS(bbox) {\n    const dim = bbox.dimensions(UNIT.RADIAN);\n\n    var zoom = Math.floor(Math.log(MathExt.PI / dim.y) / MathExt.LOG_TWO + 0.5);\n\n    var nY = Math.pow(2, zoom);\n    var nX = 2 * nY;\n\n    var uX = MathExt.TWO_PI / nX;\n    var uY = MathExt.PI / nY;\n\n    const center = bbox.center();\n    var col = Math.floor((MathExt.PI + center.longitude(UNIT.RADIAN)) / uX);\n    var row = Math.floor(nY - (MathExt.PI_OV_TWO + center.latitude(UNIT.RADIAN)) / uY);\n\n    return new Extent('WMTS:WGS84G', zoom, row, col);\n};\n\nProjection.prototype.UnitaryToLongitudeWGS84 = function UnitaryToLongitudeWGS84(u, bbox) {\n    const dim = bbox.dimensions(UNIT.RADIAN);\n    return bbox.west(UNIT.RADIAN) + u * dim.x;\n};\n\nProjection.prototype.UnitaryToLatitudeWGS84 = function UnitaryToLatitudeWGS84(v, bbox) {\n    const dim = bbox.dimensions(UNIT.RADIAN);\n    return bbox.south(UNIT.RADIAN) + v * dim.y;\n};\n\nProjection.prototype.wgs84_to_lambert93 = function wgs84_to_lambert93(latitude, longitude) // , x93, y93)\n    {\n        /*\n        rfrences :\n        Mthode de calcul pour une projection de type lambert conique conforme scante (\n        NTG_71.pdf):\n        http://www.ign.fr/affiche_rubrique.asp?rbr_id=1700&lng_id=FR\n        */\n\n        // variables:\n\n        // systme WGS84\n    var a = 6378137; // demi grand axe de l'ellipsoide (m)\n    var e = 0.08181919106; // premire excentricit de l'ellipsoide\n\n\n    var deg2rad = function deg2rad() {};\n\n        // paramtres de projections\n        // var l0 =deg2rad(3);\n    var lc = deg2rad(3); // longitude de rfrence\n    var phi0 = deg2rad(46.5); // latitude d'origine en radian\n    var phi1 = deg2rad(44); // 1er parallele automcoque\n    var phi2 = deg2rad(49); // 2eme parallele automcoque\n\n    var x0 = 700000; // coordonnes l'origine\n    var y0 = 6600000; // coordonnes l'origine\n\n        // coordonnes du point traduire\n    var phi = deg2rad(latitude);\n    var l = deg2rad(longitude);\n\n        // calcul des grandes normales\n    var gN1 = a / Math.sqrt(1 - e * e * Math.sin(phi1) * Math.sin(phi1));\n    var gN2 = a / Math.sqrt(1 - e * e * Math.sin(phi2) * Math.sin(phi2));\n\n        // calculs de slatitudes isomtriques\n    var gl1 = Math.log(Math.tan(Math.PI / 4 + phi1 / 2) * Math.pow((1 - e * Math.sin(phi1)) / (1 + e * Math.sin(phi1)), e / 2));\n\n    var gl2 = Math.log(Math.tan(Math.PI / 4 + phi2 / 2) * Math.pow((1 - e * Math.sin(phi2)) / (1 + e * Math.sin(phi2)), e / 2));\n\n    var gl0 = Math.log(Math.tan(Math.PI / 4 + phi0 / 2) * Math.pow((1 - e * Math.sin(phi0)) / (1 + e * Math.sin(phi0)), e / 2));\n\n    var gl = Math.log(Math.tan(Math.PI / 4 + phi / 2) * Math.pow((1 - e * Math.sin(phi)) / (1 + e * Math.sin(phi)), e / 2));\n\n        // calcul de l'exposant de la projection\n    var n = (Math.log((gN2 * Math.cos(phi2)) / (gN1 * Math.cos(phi1)))) / (gl1 - gl2); // ok\n\n        // calcul de la constante de projection\n    var c = ((gN1 * Math.cos(phi1)) / n) * Math.exp(n * gl1); // ok\n\n        // calcul des coordonnes\n    var ys = y0 + c * Math.exp(-1 * n * gl0);\n\n        // calcul des coordonnes lambert\n    var x93 = x0 + c * Math.exp(-1 * n * gl) * Math.sin(n * (l - lc));\n    var y93 = ys - c * Math.exp(-1 * n * gl) * Math.cos(n * (l - lc));\n\n    return {\n        x: x93,\n        y: y93,\n    };\n};\n\n\nexport default Projection;\n"]}