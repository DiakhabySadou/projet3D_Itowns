{"version":3,"sources":["../../../src/Core/Layer/LayerUpdateState.js"],"names":["UPDATE_STATE","IDLE","PENDING","ERROR","DEFINITIVE_ERROR","FINISHED","PAUSE_BETWEEN_ERRORS","LayerUpdateState","state","lastErrorTimestamp","errorCount","prototype","canTryUpdate","timestamp","errorDuration","secondsUntilNextTry","idx","Math","max","min","length","newTry","success","noMoreUpdatePossible","failure","definitive","inError"],"mappings":";;;;;AAAA,IAAMA,eAAe;AACjBC,UAAM,CADW;AAEjBC,aAAS,CAFQ;AAGjBC,WAAO,CAHU;AAIjBC,sBAAkB,CAJD;AAKjBC,cAAU;AALO,CAArB;AAOA,IAAMC,uBAAuB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAA7B;;AAEA;;;;;;AAMA,SAASC,gBAAT,GAA4B;AACxB,SAAKC,KAAL,GAAaR,aAAaC,IAA1B;AACA,SAAKQ,kBAAL,GAA0B,CAA1B;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH;;AAEDH,iBAAiBI,SAAjB,CAA2BC,YAA3B,GAA0C,UAAsBC,SAAtB,EAAiC;AACvE,YAAQ,KAAKL,KAAb;AACI,aAAKR,aAAaC,IAAlB;AAAwB;AACpB,uBAAO,IAAP;AACH;AACD,aAAKD,aAAaI,gBAAlB;AACA,aAAKJ,aAAaE,OAAlB;AACA,aAAKF,aAAaK,QAAlB;AAA4B;AACxB,uBAAO,KAAP;AACH;AACD,aAAKL,aAAaG,KAAlB;AACA;AAAS;AACL,oBAAMW,gBAAgB,KAAKC,mBAAL,KAA6B,IAAnD;AACA,uBAAOD,iBAAkBD,YAAY,KAAKJ,kBAA1C;AACH;AAbL;AAeH,CAhBD;;AAkBAF,iBAAiBI,SAAjB,CAA2BI,mBAA3B,GAAiD,YAA+B;AAC5E,QAAI,KAAKP,KAAL,KAAeR,aAAaG,KAAhC,EAAuC;AACnC,eAAO,CAAP;AACH;AACD,QAAMa,MACFC,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKE,GAAL,CAAS,KAAKT,UAAd,EAA0BJ,qBAAqBc,MAA/C,IAAyD,CAArE,CADJ;;AAGA,WAAOd,qBAAqBU,GAArB,CAAP;AACH,CARD;;AAUAT,iBAAiBI,SAAjB,CAA2BU,MAA3B,GAAoC,YAAkB;AAClD,SAAKb,KAAL,GAAaR,aAAaE,OAA1B;AACH,CAFD;;AAIAK,iBAAiBI,SAAjB,CAA2BW,OAA3B,GAAqC,YAAmB;AACpD,SAAKb,kBAAL,GAA0B,CAA1B;AACA,SAAKD,KAAL,GAAaR,aAAaC,IAA1B;AACH,CAHD;;AAKAM,iBAAiBI,SAAjB,CAA2BY,oBAA3B,GAAkD,YAAgC;AAC9E,SAAKf,KAAL,GAAaR,aAAaK,QAA1B;AACH,CAFD;;AAIAE,iBAAiBI,SAAjB,CAA2Ba,OAA3B,GAAqC,UAAiBX,SAAjB,EAA4BY,UAA5B,EAAwC;AACzE,SAAKhB,kBAAL,GAA0BI,SAA1B;AACA,SAAKL,KAAL,GAAaiB,aAAazB,aAAaI,gBAA1B,GAA6CJ,aAAaG,KAAvE;AACA,SAAKO,UAAL;AACH,CAJD;;AAMAH,iBAAiBI,SAAjB,CAA2Be,OAA3B,GAAqC,YAAmB;AACpD,WAAO,KAAKlB,KAAL,IAAcR,aAAaI,gBAA3B,IAA+C,KAAKI,KAAL,IAAcR,aAAaG,KAAjF;AACH,CAFD;;kBAIeI,gB","file":"LayerUpdateState.js","sourcesContent":["const UPDATE_STATE = {\n    IDLE: 0,\n    PENDING: 1,\n    ERROR: 2,\n    DEFINITIVE_ERROR: 3,\n    FINISHED: 4,\n};\nconst PAUSE_BETWEEN_ERRORS = [1.0, 3.0, 7.0, 60.0];\n\n/**\n * LayerUpdateState is the update state of a layer, for a given object (e.g tile).\n * It stores information to allow smart update decisions, and especially network\n * error handling.\n * @constructor\n */\nfunction LayerUpdateState() {\n    this.state = UPDATE_STATE.IDLE;\n    this.lastErrorTimestamp = 0;\n    this.errorCount = 0;\n}\n\nLayerUpdateState.prototype.canTryUpdate = function canTryUpdate(timestamp) {\n    switch (this.state) {\n        case UPDATE_STATE.IDLE: {\n            return true;\n        }\n        case UPDATE_STATE.DEFINITIVE_ERROR:\n        case UPDATE_STATE.PENDING:\n        case UPDATE_STATE.FINISHED: {\n            return false;\n        }\n        case UPDATE_STATE.ERROR:\n        default: {\n            const errorDuration = this.secondsUntilNextTry() * 1000;\n            return errorDuration <= (timestamp - this.lastErrorTimestamp);\n        }\n    }\n};\n\nLayerUpdateState.prototype.secondsUntilNextTry = function secondsUntilNextTry() {\n    if (this.state !== UPDATE_STATE.ERROR) {\n        return 0;\n    }\n    const idx =\n        Math.max(0, Math.min(this.errorCount, PAUSE_BETWEEN_ERRORS.length) - 1);\n\n    return PAUSE_BETWEEN_ERRORS[idx];\n};\n\nLayerUpdateState.prototype.newTry = function newTry() {\n    this.state = UPDATE_STATE.PENDING;\n};\n\nLayerUpdateState.prototype.success = function success() {\n    this.lastErrorTimestamp = 0;\n    this.state = UPDATE_STATE.IDLE;\n};\n\nLayerUpdateState.prototype.noMoreUpdatePossible = function noMoreUpdatePossible() {\n    this.state = UPDATE_STATE.FINISHED;\n};\n\nLayerUpdateState.prototype.failure = function failure(timestamp, definitive) {\n    this.lastErrorTimestamp = timestamp;\n    this.state = definitive ? UPDATE_STATE.DEFINITIVE_ERROR : UPDATE_STATE.ERROR;\n    this.errorCount++;\n};\n\nLayerUpdateState.prototype.inError = function inError() {\n    return this.state == UPDATE_STATE.DEFINITIVE_ERROR || this.state == UPDATE_STATE.ERROR;\n};\n\nexport default LayerUpdateState;\n"]}