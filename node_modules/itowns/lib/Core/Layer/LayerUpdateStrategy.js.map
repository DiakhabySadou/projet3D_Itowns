{"version":3,"sources":["../../../src/Core/Layer/LayerUpdateStrategy.js"],"names":["chooseNextLevelToFetch","STRATEGY_MIN_NETWORK_TRAFFIC","STRATEGY_GROUP","STRATEGY_PROGRESSIVE","STRATEGY_DICHOTOMY","_minimizeNetworkTraffic","node","nodeLevel","currentLevel","pendingSubdivision","_group","options","f","groups","filter","val","length","_progressive","Math","min","increment","_dichotomy","zoom","ceil","strategy","layer","updateStrategy"],"mappings":";;;;;;QAgDgBA,sB,GAAAA,sB;;AAhDhB;;AACA;;;;;;;AAOO,IAAMC,sEAA+B,CAArC;AACA,IAAMC,0CAAiB,CAAvB;AACA,IAAMC,sDAAuB,CAA7B;AACA,IAAMC,kDAAqB,CAA3B;;AAEP,SAASC,uBAAT,CAAiCC,IAAjC,EAAuCC,SAAvC,EAAkDC,YAAlD,EAAgE;AAC5D,QAAIF,KAAKG,kBAAT,EAA6B;AACzB,eAAOD,YAAP;AACH;AACD,WAAOD,SAAP;AACH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,MAAT,CAAgBH,SAAhB,EAA2BC,YAA3B,EAAyCG,OAAzC,EAAkD;AAC9C,QAAIC,IAAID,QAAQE,MAAR,CAAeC,MAAf,CAAsB;AAAA,eAAQC,OAAOR,SAAf;AAAA,KAAtB,CAAR;AACA,WAAOK,EAAEI,MAAF,GAAWJ,EAAEA,EAAEI,MAAF,GAAW,CAAb,CAAX,GAA6BL,QAAQE,MAAR,CAAe,CAAf,CAApC;AACH;;AAED,SAASI,YAAT,CAAsBV,SAAtB,EAAiCC,YAAjC,EAA+CG,OAA/C,EAAwD;AACpD,WAAOO,KAAKC,GAAL,CAASZ,SAAT,EACHC,gBAAgBG,QAAQS,SAAR,IAAqB,CAArC,CADG,CAAP;AAEH;;AAED;AACA;AACA;AACA,SAASC,UAAT,CAAoBd,SAApB,EAA+BC,YAA/B,EAA6CG,OAA7C,EAAsD;AAClD,QAAIH,4DAAJ,EAAwC;AACpC,eAAOG,QAAQW,IAAR,CAAaH,GAApB;AACH;AACD,WAAOD,KAAKC,GAAL,CACHZ,SADG,EAEHW,KAAKK,IAAL,CAAU,CAACf,eAAeD,SAAhB,IAA6B,CAAvC,CAFG,CAAP;AAGH;;AAEM,SAASP,sBAAT,CAAgCwB,QAAhC,EAA0ClB,IAA1C,EAAgDC,SAAhD,EAA2DC,YAA3D,EAAyEiB,KAAzE,EAAgF;AACnF,YAAQD,QAAR;AACI,aAAKtB,cAAL;AACI,mBAAOQ,OAAOH,SAAP,EAAkBC,YAAlB,EAAgCiB,MAAMC,cAAN,CAAqBf,OAArD,CAAP;AACJ,aAAKR,oBAAL;AACI,mBAAOc,aAAaV,SAAb,EAAwBC,YAAxB,EAAsCiB,MAAMC,cAAN,CAAqBf,OAA3D,CAAP;AACJ,aAAKP,kBAAL;AACI,mBAAOiB,WAAWd,SAAX,EAAsBC,YAAtB,EAAoCiB,MAAMd,OAA1C,CAAP;AACJ;AACA,aAAKV,4BAAL;AACA;AACI,mBAAOI,wBAAwBC,IAAxB,EAA8BC,SAA9B,EAAyCC,YAAzC,CAAP;AAVR;AAYH","file":"LayerUpdateStrategy.js","sourcesContent":["import { EMPTY_TEXTURE_ZOOM } from '../../Renderer/LayeredMaterialConstants';\n/**\n * This modules implements various layer update strategies.\n *\n * Default strategy is STRATEGY_MIN_NETWORK_TRAFFIC which aims\n * to reduce the amount of network traffic.\n */\n\nexport const STRATEGY_MIN_NETWORK_TRAFFIC = 0;\nexport const STRATEGY_GROUP = 1;\nexport const STRATEGY_PROGRESSIVE = 2;\nexport const STRATEGY_DICHOTOMY = 3;\n\nfunction _minimizeNetworkTraffic(node, nodeLevel, currentLevel) {\n    if (node.pendingSubdivision) {\n        return currentLevel;\n    }\n    return nodeLevel;\n}\n\n// Maps nodeLevel to groups defined in layer's options\n// eg with groups = [3, 7, 12]:\n//     * nodeLevel = 2 -> 3\n//     * nodeLevel = 4 -> 3\n//     * nodeLevel = 7 -> 7\n//     * nodeLevel = 15 -> 12\nfunction _group(nodeLevel, currentLevel, options) {\n    var f = options.groups.filter(val => (val <= nodeLevel));\n    return f.length ? f[f.length - 1] : options.groups[0];\n}\n\nfunction _progressive(nodeLevel, currentLevel, options) {\n    return Math.min(nodeLevel,\n        currentLevel + (options.increment || 1));\n}\n\n// Load textures at mid-point between current level and node's level.\n// This produces smoother transitions and a single fetch updates multiple\n// tiles thanks to caching.\nfunction _dichotomy(nodeLevel, currentLevel, options) {\n    if (currentLevel == EMPTY_TEXTURE_ZOOM) {\n        return options.zoom.min;\n    }\n    return Math.min(\n        nodeLevel,\n        Math.ceil((currentLevel + nodeLevel) / 2));\n}\n\nexport function chooseNextLevelToFetch(strategy, node, nodeLevel, currentLevel, layer) {\n    switch (strategy) {\n        case STRATEGY_GROUP:\n            return _group(nodeLevel, currentLevel, layer.updateStrategy.options);\n        case STRATEGY_PROGRESSIVE:\n            return _progressive(nodeLevel, currentLevel, layer.updateStrategy.options);\n        case STRATEGY_DICHOTOMY:\n            return _dichotomy(nodeLevel, currentLevel, layer.options);\n        // default strategy\n        case STRATEGY_MIN_NETWORK_TRAFFIC:\n        default:\n            return _minimizeNetworkTraffic(node, nodeLevel, currentLevel);\n    }\n}\n"]}