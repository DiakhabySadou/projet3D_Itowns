{"version":3,"sources":["../../../../src/Core/Prefab/Panorama/PanoramaTileBuilder.js"],"names":["THREE","PanoramaTileBuilder","ratio","tmp","coords","position","Vector3","normal","Error","equirectangular","radius","height","Math","PI","prototype","constructor","Prepare","params","projected","theta","phi","y","Center","uProjecte","vProjecte","center","VertexPosition","clone","setFromSpherical","setFromCylindrical","swap","z","VertexNormal","negate","normalize","u","lerp","extent","west","RADIAN","east","v","south","north","OBB","pts","uvs","uv","push","cardinalsXYZToOBB","longitude","direction","diffExtent","subVectors","length","diff","thickness","dot","min","max","translate"],"mappings":";;;;;;;;;;AAAA;;IAAYA,K;;AACZ;;;;AACA;;;;;;;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChC,SAAKC,GAAL,GAAW;AACPC,gBAAQ,0BAAgB,WAAhB,EAA6B,CAA7B,EAAgC,CAAhC,CADD;AAEPC,kBAAU,IAAIL,MAAMM,OAAV,EAFH;AAGPC,gBAAQ,IAAIP,MAAMM,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AAHD,KAAX;;AAMA,QAAI,CAACJ,KAAL,EAAY;AACR,cAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACH;AACD,QAAIN,UAAU,CAAd,EAAiB;AACb,aAAKO,eAAL,GAAuB,IAAvB;AACA,aAAKC,MAAL,GAAc,GAAd;AACH,KAHD,MAGO;AACH,aAAKD,eAAL,GAAuB,KAAvB,CADG,CAC2B;AAC9B,aAAKE,MAAL,GAAc,GAAd;AACA,aAAKD,MAAL,GAAeR,QAAQ,KAAKS,MAAd,IAAyB,IAAIC,KAAKC,EAAlC,CAAd;AACH;AACJ;;AAEDZ,oBAAoBa,SAApB,CAA8BC,WAA9B,GAA4Cd,mBAA5C;;AAEA;AACA;AACAA,oBAAoBa,SAApB,CAA8BE,OAA9B,GAAwC,UAAiBC,MAAjB,EAAyB;AAC7D,QAAI,KAAKR,eAAT,EAA0B;AACtBQ,eAAOC,SAAP,GAAmB;AACfC,mBAAO,CADQ;AAEfC,iBAAK,CAFU;AAGfV,oBAAQ,KAAKA;AAHE,SAAnB;AAKH,KAND,MAMO;AACHO,eAAOC,SAAP,GAAmB;AACfC,mBAAO,CADQ;AAEfT,oBAAQ,KAAKA,MAFE;AAGfW,eAAG;AAHY,SAAnB;AAKH;AACJ,CAdD;;AAgBApB,oBAAoBa,SAApB,CAA8BQ,MAA9B,GAAuC,UAAgBL,MAAhB,EAAwB;AAC3D,SAAKD,OAAL,CAAaC,MAAb;;AAEA,SAAKM,SAAL,CAAe,GAAf,EAAoBN,MAApB;AACA,SAAKO,SAAL,CAAe,GAAf,EAAoBP,MAApB;;AAEAA,WAAOQ,MAAP,GAAgB,KAAKC,cAAL,CAAoBT,MAApB,EAA4BU,KAA5B,EAAhB;;AAEA,WAAOV,OAAOQ,MAAd;AACH,CATD;;AAWA;AACAxB,oBAAoBa,SAApB,CAA8BY,cAA9B,GAA+C,UAAwBT,MAAxB,EAAgC;AAC3E,QAAI,KAAKR,eAAT,EAA0B;AACtB,aAAKN,GAAL,CAASE,QAAT,CAAkBuB,gBAAlB,CAAmCX,OAAOC,SAA1C;AACH,KAFD,MAEO;AACH,aAAKf,GAAL,CAASE,QAAT,CAAkBwB,kBAAlB,CAAqCZ,OAAOC,SAA5C;AACH;AACD,QAAMY,OAAO,KAAK3B,GAAL,CAASE,QAAT,CAAkBgB,CAA/B;AACA,SAAKlB,GAAL,CAASE,QAAT,CAAkBgB,CAAlB,GAAsB,KAAKlB,GAAL,CAASE,QAAT,CAAkB0B,CAAxC;AACA,SAAK5B,GAAL,CAASE,QAAT,CAAkB0B,CAAlB,GAAsB,KAAKtB,eAAL,GAAuB,CAACqB,IAAxB,GAA+BA,IAArD;;AAEA,WAAO,KAAK3B,GAAL,CAASE,QAAhB;AACH,CAXD;;AAaA;AACAJ,oBAAoBa,SAApB,CAA8BkB,YAA9B,GAA6C,YAAwB;AACjE,WAAO,KAAK7B,GAAL,CAASE,QAAT,CAAkBsB,KAAlB,GAA0BM,MAA1B,GAAmCC,SAAnC,EAAP;AACH,CAFD;;AAIA;AACAjC,oBAAoBa,SAApB,CAA8BS,SAA9B,GAA0C,UAAmBY,CAAnB,EAAsBlB,MAAtB,EAA8B;AACpE;AACAA,WAAOC,SAAP,CAAiBC,KAAjB,GAAyBnB,MAAMY,IAAN,CAAWwB,IAAX,CACrBnB,OAAOoB,MAAP,CAAcC,IAAd,CAAmB,kBAAKC,MAAxB,CADqB,EAErBtB,OAAOoB,MAAP,CAAcG,IAAd,CAAmB,kBAAKD,MAAxB,CAFqB,EAGrBJ,CAHqB,CAAzB;AAIH,CAND;;AAQA;AACAlC,oBAAoBa,SAApB,CAA8BU,SAA9B,GAA0C,UAAmBiB,CAAnB,EAAsBxB,MAAtB,EAA8B;AACpE,QAAI,KAAKR,eAAT,EAA0B;AACtBQ,eAAOC,SAAP,CAAiBE,GAAjB,GAAuBR,KAAKC,EAAL,GAAU,GAAV,GACnBb,MAAMY,IAAN,CAAWwB,IAAX,CACInB,OAAOoB,MAAP,CAAcK,KAAd,CAAoB,kBAAKH,MAAzB,CADJ,EAEItB,OAAOoB,MAAP,CAAcM,KAAd,CAAoB,kBAAKJ,MAAzB,CAFJ,EAGIE,CAHJ,CADJ;AAKH,KAND,MAMO;AACHxB,eAAOC,SAAP,CAAiBG,CAAjB,GACI,KAAKV,MAAL,GACAX,MAAMY,IAAN,CAAWwB,IAAX,CAAgBnB,OAAOoB,MAAP,CAAcK,KAAd,EAAhB,EAAuCzB,OAAOoB,MAAP,CAAcM,KAAd,EAAvC,EAA8DF,CAA9D,CADA,GACmE,GAFvE;AAGH;AACJ,CAZD;;AAcA;AACAxC,oBAAoBa,SAApB,CAA8B8B,GAA9B,GAAoC,UAAc3B,MAAd,EAAsB;AACtD,QAAI,KAAKR,eAAT,EAA0B;AACtB,YAAMoC,MAAM,EAAZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,MAAM,CACR,CAAC,CAAD,EAAI,GAAJ,CADQ,EACE,CAAC,GAAD,EAAM,CAAN,CADF,EACY,CAAC,CAAD,EAAI,GAAJ,CADZ,EAER,CAAC,CAAD,EAAI,GAAJ,CAFQ,EAEE,CAAC,CAAD,EAAI,GAAJ,CAFF,EAEY,CAAC,GAAD,EAAM,CAAN,CAFZ,EAGR,CAAC,CAAD,EAAI,GAAJ,CAHQ,EAGE,CAAC,CAAD,EAAI,GAAJ,CAHF,EAGY,CAAC,GAAD,EAAM,GAAN,CAHZ,CAAZ;AAPsB;AAAA;AAAA;;AAAA;AAWtB,4DAAiBA,GAAjB,4GAAsB;AAAA,oBAAXC,EAAW;;AAClB,qBAAKxB,SAAL,CAAewB,GAAG,CAAH,CAAf,EAAsB9B,MAAtB;AACA,qBAAKO,SAAL,CAAeuB,GAAG,CAAH,CAAf,EAAsB9B,MAAtB;AACA4B,oBAAIG,IAAJ,CAAS,KAAKtB,cAAL,CAAoBT,MAApB,EAA4BU,KAA5B,EAAT;AACH;AAfqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBtB,eAAO,cAAIsB,iBAAJ,CAAsBJ,GAAtB,EAA2B5B,OAAOoB,MAAP,CAAcZ,MAAd,GAAuByB,SAAvB,CAAiC,kBAAKX,MAAtC,CAA3B,EAA0E,KAA1E,CAAP;AACH,KAjBD,MAiBO;AACH;AACA,YAAMM,OAAM,EAAZ;AACA,aAAKtB,SAAL,CAAe,GAAf,EAAoBN,MAApB;AACA,aAAKO,SAAL,CAAe,GAAf,EAAoBP,MAApB;AACA4B,aAAIG,IAAJ,CAAS,KAAKtB,cAAL,CAAoBT,MAApB,EAA4BU,KAA5B,EAAT;AACA,aAAKJ,SAAL,CAAe,CAAf,EAAkBN,MAAlB;AACA,aAAKO,SAAL,CAAe,CAAf,EAAkBP,MAAlB;AACA4B,aAAIG,IAAJ,CAAS,KAAKtB,cAAL,CAAoBT,MAApB,EAA4BU,KAA5B,EAAT;AACA,aAAKJ,SAAL,CAAe,CAAf,EAAkBN,MAAlB;AACA,aAAKO,SAAL,CAAe,CAAf,EAAkBP,MAAlB;AACA4B,aAAIG,IAAJ,CAAS,KAAKtB,cAAL,CAAoBT,MAApB,EAA4BU,KAA5B,EAAT;;AAEA,YAAMwB,YAAYlC,OAAOQ,MAAP,CAAcE,KAAd,EAAlB;AACAwB,kBAAUpB,CAAV,GAAc,CAAd;AACAoB,kBAAUjB,SAAV;;AAEA,YAAMkB,aAAa,IAAIpD,MAAMM,OAAV,GAAoB+C,UAApB,CAA+BR,KAAI,CAAJ,CAA/B,EAAuCA,KAAI,CAAJ,CAAvC,CAAnB;AACA,YAAMlC,SAASyC,WAAWrB,CAA1B;AACAqB,mBAAWrB,CAAX,GAAe,CAAf;;AAEA,YAAMuB,SAASF,WAAWE,MAAX,EAAf;;AAEA,YAAMC,OAAO,IAAIvD,MAAMM,OAAV,GAAoB+C,UAApB,CAA+BpC,OAAOQ,MAAtC,EAA8CoB,KAAI,CAAJ,CAA9C,CAAb;AACAU,aAAKxB,CAAL,GAAS,CAAT;AACA,YAAMyB,YAAYD,KAAKE,GAAL,CAASN,SAAT,CAAlB;;AAEA,YAAMO,MAAM,IAAI1D,MAAMM,OAAV,CAAkB,CAACgD,MAAD,GAAU,GAA5B,EAAiC,CAAC3C,MAAD,GAAU,GAA3C,EAAgD,CAAC6C,SAAD,GAAa,GAA7D,CAAZ;AACA,YAAMG,MAAM,IAAI3D,MAAMM,OAAV,CAAkBgD,SAAS,GAA3B,EAAgC3C,SAAS,GAAzC,EAA8C6C,YAAY,GAA1D,CAAZ;;AAEA,YAAMI,YAAY,IAAI5D,MAAMM,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwBkD,YAAY,CAAC,GAArC,CAAlB;AACA,eAAO,kBAAQE,GAAR,EAAaC,GAAb,EAAkBR,SAAlB,EAA6BS,SAA7B,CAAP;AACH;AACJ,CAnDD;;kBAqDe3D,mB","file":"PanoramaTileBuilder.js","sourcesContent":["import * as THREE from 'three';\nimport OBB from '../../../Renderer/ThreeExtended/OBB';\nimport Coordinates, { UNIT } from '../../Geographic/Coordinates';\n\nfunction PanoramaTileBuilder(ratio) {\n    this.tmp = {\n        coords: new Coordinates('EPSG:4326', 0, 0),\n        position: new THREE.Vector3(),\n        normal: new THREE.Vector3(0, 0, 1),\n    };\n\n    if (!ratio) {\n        throw new Error('ratio must be defined');\n    }\n    if (ratio === 2) {\n        this.equirectangular = true;\n        this.radius = 100;\n    } else {\n        this.equirectangular = false; // cylindrical proj\n        this.height = 200;\n        this.radius = (ratio * this.height) / (2 * Math.PI);\n    }\n}\n\nPanoramaTileBuilder.prototype.constructor = PanoramaTileBuilder;\n\n// prepare params\n// init projected object -> params.projected\nPanoramaTileBuilder.prototype.Prepare = function Prepare(params) {\n    if (this.equirectangular) {\n        params.projected = {\n            theta: 0,\n            phi: 0,\n            radius: this.radius,\n        };\n    } else {\n        params.projected = {\n            theta: 0,\n            radius: this.radius,\n            y: 0,\n        };\n    }\n};\n\nPanoramaTileBuilder.prototype.Center = function Center(params) {\n    this.Prepare(params);\n\n    this.uProjecte(0.5, params);\n    this.vProjecte(0.5, params);\n\n    params.center = this.VertexPosition(params).clone();\n\n    return params.center;\n};\n\n// get position 3D cartesian\nPanoramaTileBuilder.prototype.VertexPosition = function VertexPosition(params) {\n    if (this.equirectangular) {\n        this.tmp.position.setFromSpherical(params.projected);\n    } else {\n        this.tmp.position.setFromCylindrical(params.projected);\n    }\n    const swap = this.tmp.position.y;\n    this.tmp.position.y = this.tmp.position.z;\n    this.tmp.position.z = this.equirectangular ? -swap : swap;\n\n    return this.tmp.position;\n};\n\n// get normal for last vertex\nPanoramaTileBuilder.prototype.VertexNormal = function VertexNormal() {\n    return this.tmp.position.clone().negate().normalize();\n};\n\n// coord u tile to projected\nPanoramaTileBuilder.prototype.uProjecte = function uProjecte(u, params) {\n    // both (theta, phi) and (y, z) are swapped in setFromSpherical\n    params.projected.theta = THREE.Math.lerp(\n        params.extent.west(UNIT.RADIAN),\n        params.extent.east(UNIT.RADIAN),\n        u);\n};\n\n// coord v tile to projected\nPanoramaTileBuilder.prototype.vProjecte = function vProjecte(v, params) {\n    if (this.equirectangular) {\n        params.projected.phi = Math.PI * 0.5 +\n            THREE.Math.lerp(\n                params.extent.south(UNIT.RADIAN),\n                params.extent.north(UNIT.RADIAN),\n                v);\n    } else {\n        params.projected.y =\n            this.height *\n            THREE.Math.lerp(params.extent.south(), params.extent.north(), v) / 180;\n    }\n};\n\n// get oriented bounding box of tile\nPanoramaTileBuilder.prototype.OBB = function _OBB(params) {\n    if (this.equirectangular) {\n        const pts = [];\n        //      0---1---2\n        //      |       |\n        //      7   8   3\n        //      |       |\n        //      6---5---4\n        const uvs = [\n            [0, 0.0], [0.5, 0], [1, 0.0],\n            [1, 0.5], [1, 1.0], [0.5, 1],\n            [0, 1.0], [0, 0.5], [0.5, 0.5]];\n        for (const uv of uvs) {\n            this.uProjecte(uv[0], params);\n            this.vProjecte(uv[1], params);\n            pts.push(this.VertexPosition(params).clone());\n        }\n        return OBB.cardinalsXYZToOBB(pts, params.extent.center().longitude(UNIT.RADIAN), false);\n    } else {\n        // 3 points: corners + center\n        const pts = [];\n        this.uProjecte(0.5, params);\n        this.vProjecte(0.5, params);\n        pts.push(this.VertexPosition(params).clone());\n        this.uProjecte(0, params);\n        this.vProjecte(0, params);\n        pts.push(this.VertexPosition(params).clone());\n        this.uProjecte(1, params);\n        this.vProjecte(1, params);\n        pts.push(this.VertexPosition(params).clone());\n\n        const direction = params.center.clone();\n        direction.z = 0;\n        direction.normalize();\n\n        const diffExtent = new THREE.Vector3().subVectors(pts[2], pts[1]);\n        const height = diffExtent.z;\n        diffExtent.z = 0;\n\n        const length = diffExtent.length();\n\n        const diff = new THREE.Vector3().subVectors(params.center, pts[1]);\n        diff.z = 0;\n        const thickness = diff.dot(direction);\n\n        const min = new THREE.Vector3(-length * 0.5, -height * 0.5, -thickness * 0.5);\n        const max = new THREE.Vector3(length * 0.5, height * 0.5, thickness * 0.5);\n\n        const translate = new THREE.Vector3(0, 0, thickness * -0.5);\n        return new OBB(min, max, direction, translate);\n    }\n};\n\nexport default PanoramaTileBuilder;\n"]}