{"version":3,"sources":["../../../../src/Core/Prefab/Globe/BuilderEllipsoidTile.js"],"names":["THREE","BuilderEllipsoidTile","projector","tmp","coords","EPSG_4326_Radians","position","Vector3","normal","prototype","constructor","Prepare","params","nbRow","Math","pow","level","st1","WGS84ToOneSubY","extent","south","isFinite","sizeTexture","start","deltaUV1","projected","longitudeRad","latitudeRad","Center","center","as","xyz","VertexPosition","_values","copy","normalize","VertexNormal","uProjecte","u","UnitaryToLongitudeWGS84","vProjecte","v","UnitaryToLatitudeWGS84","getUV_PM","t","OBB","extentToOBB"],"mappings":"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","file":"BuilderEllipsoidTile.js","sourcesContent":["import * as THREE from 'three';\nimport { C } from '../../Geographic/Coordinates';\nimport Projection from '../../Geographic/Projection';\nimport OBB from '../../../Renderer/ThreeExtended/OBB';\n\nfunction BuilderEllipsoidTile() {\n    this.projector = new Projection();\n\n    this.tmp = {\n        coords: [\n            C.EPSG_4326_Radians(0, 0),\n            C.EPSG_4326_Radians(0, 0)],\n        position: new THREE.Vector3(),\n        normal: new THREE.Vector3(),\n    };\n}\n\nBuilderEllipsoidTile.prototype.constructor = BuilderEllipsoidTile;\n\n// prepare params\n// init projected object -> params.projected\nBuilderEllipsoidTile.prototype.Prepare = function Prepare(params) {\n    params.nbRow = Math.pow(2.0, params.level + 1.0);\n\n    var st1 = this.projector.WGS84ToOneSubY(params.extent.south());\n\n    if (!isFinite(st1))\n        { st1 = 0; }\n\n    var sizeTexture = 1.0 / params.nbRow;\n\n    var start = (st1 % (sizeTexture));\n\n    params.deltaUV1 = (st1 - start) * params.nbRow;\n\n    // let's avoid building too much temp objects\n    params.projected = { longitudeRad: 0, latitudeRad: 0 };\n};\n\n// get center tile in cartesian 3D\nBuilderEllipsoidTile.prototype.Center = function Center(params) {\n    params.center = params.extent.center(this.tmp.coords[0])\n        .as('EPSG:4978', this.tmp.coords[1]).xyz();\n    return params.center;\n};\n\n// get position 3D cartesian\nBuilderEllipsoidTile.prototype.VertexPosition = function VertexPosition(params) {\n    this.tmp.coords[0]._values[0] = params.projected.longitudeRad;\n    this.tmp.coords[0]._values[1] = params.projected.latitudeRad;\n\n    this.tmp.coords[0].as('EPSG:4978', this.tmp.coords[1]).xyz(this.tmp.position);\n    this.tmp.normal.copy(this.tmp.position).normalize();\n    return this.tmp.position;\n};\n\n// get normal for last vertex\nBuilderEllipsoidTile.prototype.VertexNormal = function VertexNormal() {\n    return this.tmp.normal;\n};\n\n// coord u tile to projected\nBuilderEllipsoidTile.prototype.uProjecte = function uProjecte(u, params) {\n    params.projected.longitudeRad = this.projector.UnitaryToLongitudeWGS84(u, params.extent);\n};\n\n// coord v tile to projected\nBuilderEllipsoidTile.prototype.vProjecte = function vProjecte(v, params) {\n    params.projected.latitudeRad = this.projector.UnitaryToLatitudeWGS84(v, params.extent);\n};\n\n// Compute uv 1, if isn't defined the uv1 isn't computed\nBuilderEllipsoidTile.prototype.getUV_PM = function getUV_PM(params) {\n    var t = this.projector.WGS84ToOneSubY(params.projected.latitudeRad) * params.nbRow;\n\n    if (!isFinite(t))\n        { t = 0; }\n\n    return t - params.deltaUV1;\n};\n\n// use for region for adaptation boundingVolume\nBuilderEllipsoidTile.prototype.OBB = function OBBFn(params) {\n    return OBB.extentToOBB(params.extent);\n};\n\nexport default BuilderEllipsoidTile;\n"]}