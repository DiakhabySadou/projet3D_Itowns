{"version":3,"sources":["../../../../src/Core/Prefab/Globe/SkyShader.js"],"names":["THREE","skyShader","uniforms","luminance","type","value","turbidity","reileigh","mieCoefficient","mieDirectionalG","sunPosition","Vector3","up","vertexShader","join","fragmentShader","Sky","skyUniforms","UniformsUtils","clone","skyMat","ShaderMaterial","side","BackSide","skyGeo","SphereBufferGeometry","skyMesh","Mesh","mesh","prototype","constructor"],"mappings":"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","file":"SkyShader.js","sourcesContent":["/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n */\n\nimport * as THREE from 'three';\n\nvar skyShader = {\n\n    uniforms: {\n\n        luminance: {\n            type: 'f',\n            value: 1,\n        },\n        turbidity: {\n            type: 'f',\n            value: 2,\n        },\n        reileigh: {\n            type: 'f',\n            value: 1,\n        },\n        mieCoefficient: {\n            type: 'f',\n            value: 0.005,\n        },\n        mieDirectionalG: {\n            type: 'f',\n            value: 0.8,\n        },\n        sunPosition: {\n            type: 'v3',\n            value: new THREE.Vector3(),\n        },\n        up: {\n            type: 'v3',\n            value: new THREE.Vector3(0.0, 1.0, 0.0),\n        },\n\n    },\n\n    vertexShader: [\n\n        'varying vec3 vWorldPosition;',\n\n        'void main() {',\n\n        'vec4 worldPosition = modelMatrix *  vec4( cameraPosition + position, 1.0 );',\n        'vWorldPosition = worldPosition.xyz;',\n\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4( cameraPosition + position, 1.0 );',\n\n        '}',\n\n    ].join('\\n'),\n\n    fragmentShader: [\n\n        'uniform sampler2D skySampler;',\n        'uniform vec3 sunPosition;',\n        'uniform vec3 up;',\n        'varying vec3 vWorldPosition;',\n\n        // \"vec3 cameraPos = cameraPosition; //vec3(0., 0., 0.);\",\n        '// uniform sampler2D sDiffuse;',\n        '// const float turbidity = 10.0; //',\n        '// const float reileigh = 2.; //',\n        '// const float luminance = 1.0; //',\n        '// const float mieCoefficient = 0.005;',\n        '// const float mieDirectionalG = 0.8;',\n\n        'uniform float luminance;',\n        'uniform float turbidity;',\n        'uniform float reileigh;',\n        'uniform float mieCoefficient;',\n        'uniform float mieDirectionalG;',\n\n        '// constants for atmospheric scattering',\n        'const float e = 2.71828182845904523536028747135266249775724709369995957;',\n        'const float pi = 3.141592653589793238462643383279502884197169;',\n\n        'const float n = 1.0003; // refractive index of air',\n        'const float N = 2.545E25; // number of molecules per unit volume for air at',\n        '// 288.15K and 1013mb (sea level -45 celsius)',\n        'const float pn = 0.035; // depolatization factor for standard air',\n\n        '// wavelength of used primaries, according to preetham',\n        'const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);',\n\n        '// mie stuff',\n        '// K coefficient for the primaries',\n        'const vec3 K = vec3(0.686, 0.678, 0.666);',\n        'const float v = 4.0;',\n\n        '// optical length at zenith for molecules',\n        'const float rayleighZenithLength = 8.4E3;',\n        'const float mieZenithLength = 1.25E3;',\n        // \"const vec3 up = vec3(0.0, 1.0, 0.0);\",\n\n\n        'const float EE = 1000.0;',\n        'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n        '// 66 arc seconds -> degrees, and the cosine of that',\n\n        '// earth shadow hack',\n        'const float cutoffAngle = pi/1.95;',\n        'const float steepness = 1.5;',\n\n\n        'vec3 totalRayleigh(vec3 lambda)',\n        '{',\n        'return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));',\n        '}',\n\n        // see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n        '// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE',\n        'vec3 simplifiedRayleigh()',\n        '{',\n        'return 0.0005 / vec3(94, 40, 18);',\n        // return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n        '}',\n\n        'float rayleighPhase(float cosTheta)',\n        '{ ',\n        'return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));',\n        '// return (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));',\n        '// return (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));',\n        '}',\n\n        'vec3 totalMie(vec3 lambda, vec3 K, float T)',\n        '{',\n        'float c = (0.2 * T ) * 10E-18;',\n        'return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;',\n        '}',\n\n        'float hgPhase(float cosTheta, float g)',\n        '{',\n        'return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));',\n        '}',\n\n        'float sunIntensity(float zenithAngleCos)',\n        '{',\n        'return EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));',\n        '}',\n\n        '// float logLuminance(vec3 c)',\n        '// {',\n        '//     return log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);',\n        '// }',\n\n        '// Filmic ToneMapping http://filmicgames.com/archives/75',\n        'float A = 0.15;',\n        'float B = 0.50;',\n        'float C = 0.10;',\n        'float D = 0.20;',\n        'float E = 0.02;',\n        'float F = 0.30;',\n        'float W = 1000.0;',\n\n        'vec3 Uncharted2Tonemap(vec3 x)',\n        '{',\n        'return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;',\n        '}',\n\n\n        'void main() ',\n        '{',\n        'vec3 up2 = normalize(cameraPosition.xyz);',\n\n        'float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);',\n\n        'float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));',\n\n        'vec3 sunDirection = normalize(sunPosition);',\n\n        'float sunE = sunIntensity(dot(sunDirection, up2));',\n\n        '// extinction (absorbtion + out scattering) ',\n        '// rayleigh coefficients',\n\n        // \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n        'vec3 betaR = simplifiedRayleigh() * reileighCoefficient;',\n\n        '// mie coefficients',\n        'vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;',\n\n        '// optical length',\n        '// cutoff angle at 90 to avoid singularity in next formula.',\n        'float zenithAngle = acos(max(0.0, dot(up2, normalize(vWorldPosition - cameraPosition))));',\n        'float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\n        'float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\n\n\n        '// combined extinction factor',\n        'vec3 Fex = exp(-(betaR * sR + betaM * sM));',\n\n        '// in scattering',\n        'float cosTheta = dot(normalize(vWorldPosition - cameraPosition), sunDirection);',\n\n        'float rPhase = rayleighPhase(cosTheta*0.5+0.5);',\n        'vec3 betaRTheta = betaR * rPhase;',\n\n        'float mPhase = hgPhase(cosTheta, mieDirectionalG);',\n        'vec3 betaMTheta = betaM * mPhase;',\n\n\n        'vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));',\n        'Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up2, sunDirection),5.0),0.0,1.0));',\n\n        '//nightsky',\n        'vec3 direction = normalize(vWorldPosition - cameraPosition);',\n        'float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]',\n        'float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]',\n        'vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);',\n        '// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;',\n        'vec3 L0 = vec3(0.1) * Fex;',\n\n        '// composition + solar disc',\n        '//if (cosTheta > sunAngularDiameterCos)',\n        'float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);',\n        '// if (normalize(vWorldPosition - cameraPosition).y>0.0)',\n        'L0 += (sunE * 19000.0 * Fex)*sundisk;',\n\n\n        'vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));',\n\n        'vec3 texColor = (Lin+L0);   ',\n        'texColor *= 0.04 ;',\n        'texColor += vec3(0.0,0.001,0.0025)*0.3;',\n\n        'float g_fMaxLuminance = 1.0;',\n        'float fLumScaled = 0.1 / luminance;     ',\n        'float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); ',\n\n        'float ExposureBias = fLumCompressed;',\n\n        'vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);',\n        'vec3 color = curr*whiteScale;',\n\n        'vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));',\n\n\n        'gl_FragColor.rgb = retColor;',\n\n        'gl_FragColor.a = 1. - ( (length(cameraPosition) - 6400000.) / 1000.);',\n        '}',\n\n    ].join('\\n'),\n\n};\n\nfunction Sky() {\n    var skyUniforms = THREE.UniformsUtils.clone(skyShader.uniforms);\n\n    var skyMat = new THREE.ShaderMaterial({\n        fragmentShader: skyShader.fragmentShader,\n        vertexShader: skyShader.vertexShader,\n        uniforms: skyUniforms,\n        side: THREE.BackSide,\n    });\n\n    var skyGeo = new THREE.SphereBufferGeometry(40000, 32, 15);\n    var skyMesh = new THREE.Mesh(skyGeo, skyMat);\n\n\n    // Expose variables\n    this.mesh = skyMesh;\n    this.uniforms = skyUniforms;\n}\n// Sky.prototype = Object.create(THREE.EventDispatcher.prototype);\nSky.prototype.constructor = Sky;\n\nexport default Sky;\n"]}