{"version":3,"sources":["../../../../src/Core/Prefab/Globe/Atmosphere.js"],"names":["THREE","LIGHTING_POSITION","Vector3","Atmosphere","realistic","uniformsOut","atmoIN","type","value","screenSize","Vector2","window","innerWidth","innerHeight","material","ShaderMaterial","uniforms","vertexShader","fragmentShader","side","BackSide","blending","AdditiveBlending","transparent","wireframe","size","geometry","SphereGeometry","scale","x","y","z","Mesh","call","uniformsIn","materialAtmoIn","FrontSide","depthWrite","atmosphereIN","add","prototype","constructor","_initRealisticLighning","atmosphere","Kr","Km","ESun","g","innerRadius","outerRadius","wavelength","scaleDepth","mieScaleDepth","uniformsSky","v3LightPosition","clone","normalize","v3InvWavelength","Math","pow","fCameraHeight","fCameraHeight2","fInnerRadius","fInnerRadius2","fOuterRadius","fOuterRadius2","fKrESun","fKmESun","fKr4PI","PI","fKm4PI","fScale","fScaleDepth","fScaleOverScaleDepth","g2","nSamples","fSamples","tDisplacement","Texture","tSkyboxDiffuse","fNightScale","ground","depthTest","mesh","sky","visible","skyDome","frustumCulled","layers","mask","effectController","turbidity","reileigh","mieCoefficient","mieDirectionalG","luminance","inclination","azimuth","sun","up","setRealisticOn","bool","updateLightingPos","pos","sunPosition","copy"],"mappings":"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","file":"Atmosphere.js","sourcesContent":["/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport * as THREE from 'three';\nimport Sky from './SkyShader';\nimport skyFS from './Shaders/skyFS.glsl';\nimport skyVS from './Shaders/skyVS.glsl';\nimport groundFS from './Shaders/groundFS.glsl';\nimport groundVS from './Shaders/groundVS.glsl';\nimport GlowFS from './Shaders/GlowFS.glsl';\nimport GlowVS from './Shaders/GlowVS.glsl';\nimport { ellipsoidSizes } from '../../Geographic/Coordinates';\n\nexport const LIGHTING_POSITION = new THREE.Vector3(1, 0, 0);\n\nfunction Atmosphere() {\n    // default to non-realistic lightning\n    this.realistic = false;\n\n    this.uniformsOut = {\n        atmoIN: {\n            type: 'i',\n            value: 0,\n        },\n        screenSize: {\n            type: 'v2',\n            value: new THREE.Vector2(window.innerWidth, window.innerHeight),\n        }, // Should be updated on screen resize...\n    };\n\n    var material = new THREE.ShaderMaterial({\n        uniforms: this.uniformsOut,\n        vertexShader: GlowVS,\n        fragmentShader: GlowFS,\n        side: THREE.BackSide,\n        blending: THREE.AdditiveBlending,\n        transparent: true,\n        wireframe: false,\n    });\n\n    var size = ellipsoidSizes();\n    var geometry = (new THREE.SphereGeometry(1.14, 64, 64)).scale(size.x, size.y, size.z);\n\n    THREE.Mesh.call(this, geometry, material);\n\n    this.uniformsIn = {\n        atmoIN: {\n            type: 'i',\n            value: 1,\n        },\n        screenSize: {\n            type: 'v2',\n            value: new THREE.Vector2(window.innerWidth, window.innerHeight),\n        }, // Should be updated on screen resize...\n    };\n\n    var materialAtmoIn = new THREE.ShaderMaterial({\n        uniforms: this.uniformsIn,\n        vertexShader: GlowVS,\n        fragmentShader: GlowFS,\n        side: THREE.FrontSide,\n        blending: THREE.AdditiveBlending,\n        transparent: true,\n        depthWrite: false,\n    });\n\n    this.atmosphereIN = new THREE.Mesh((new THREE.SphereGeometry(1.002, 64, 64)).scale(size.x, size.y, size.z), materialAtmoIn);\n\n    this.add(this.atmosphereIN);\n}\n\nAtmosphere.prototype = Object.create(THREE.Mesh.prototype);\nAtmosphere.prototype.constructor = Atmosphere;\n\nAtmosphere.prototype._initRealisticLighning = function _initRealisticLighning() {\n    var atmosphere = {\n        Kr: 0.0025,\n        Km: 0.0010,\n        ESun: 20.0,\n        g: -0.950,\n        innerRadius: 6400000,\n        outerRadius: 6700000,\n        wavelength: [0.650, 0.570, 0.475],\n        scaleDepth: 0.25,\n        mieScaleDepth: 0.1,\n    };\n\n    var uniformsSky = {\n        v3LightPosition: { value: LIGHTING_POSITION.clone().normalize() },\n        v3InvWavelength: { value: new THREE.Vector3(1 / Math.pow(atmosphere.wavelength[0], 4), 1 / Math.pow(atmosphere.wavelength[1], 4), 1 / Math.pow(atmosphere.wavelength[2], 4)) },\n        fCameraHeight: { value: 0.0 },\n        fCameraHeight2: { value: 0.0 },\n        fInnerRadius: { value: atmosphere.innerRadius },\n        fInnerRadius2: { value: atmosphere.innerRadius * atmosphere.innerRadius },\n        fOuterRadius: { value: atmosphere.outerRadius },\n        fOuterRadius2: { value: atmosphere.outerRadius * atmosphere.outerRadius },\n        fKrESun: { value: atmosphere.Kr * atmosphere.ESun },\n        fKmESun: { value: atmosphere.Km * atmosphere.ESun },\n        fKr4PI: { value: atmosphere.Kr * 4.0 * Math.PI },\n        fKm4PI: { value: atmosphere.Km * 4.0 * Math.PI },\n        fScale: { value: 1 / (atmosphere.outerRadius - atmosphere.innerRadius) },\n        fScaleDepth: { value: atmosphere.scaleDepth },\n        fScaleOverScaleDepth: { value: 1 / (atmosphere.outerRadius - atmosphere.innerRadius) / atmosphere.scaleDepth },\n        g: { value: atmosphere.g },\n        g2: { value: atmosphere.g * atmosphere.g },\n        nSamples: { value: 3 },\n        fSamples: { value: 3.0 },\n        tDisplacement: { value: new THREE.Texture() },\n        tSkyboxDiffuse: { value: new THREE.Texture() },\n        fNightScale: { value: 1.0 },\n    };\n\n    this.ground = {\n        geometry: new THREE.SphereGeometry(atmosphere.innerRadius, 50, 50),\n        material: new THREE.ShaderMaterial({\n            uniforms: uniformsSky,\n            vertexShader: groundVS,\n            fragmentShader: groundFS,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n        }),\n    };\n\n    this.ground.mesh = new THREE.Mesh(this.ground.geometry, this.ground.material);\n\n    this.sky = {\n        geometry: new THREE.SphereGeometry(atmosphere.outerRadius, 196, 196),\n        material: new THREE.ShaderMaterial({\n            uniforms: uniformsSky,\n            vertexShader: skyVS,\n            fragmentShader: skyFS,\n        }),\n    };\n\n    this.sky.mesh = new THREE.Mesh(this.sky.geometry, this.sky.material);\n    this.sky.material.side = THREE.BackSide;\n    this.sky.material.transparent = true;\n\n    this.ground.mesh.visible = false;\n    this.sky.mesh.visible = false;\n\n    this.skyDome = new Sky();\n    this.skyDome.mesh.frustumCulled = false;\n    this.skyDome.mesh.material.transparent = true;\n    this.skyDome.mesh.visible = false;\n    this.skyDome.mesh.material.depthWrite = false;\n\n    this.ground.mesh.layers.mask = this.layers.mask;\n    this.sky.mesh.layers.mask = this.layers.mask;\n    this.skyDome.mesh.layers.mask = this.layers.mask;\n    this.add(this.ground.mesh);\n    this.add(this.sky.mesh);\n    this.add(this.skyDome.mesh);\n\n    var effectController = {\n        turbidity: 10,\n        reileigh: 2,\n        mieCoefficient: 0.005,\n        mieDirectionalG: 0.8,\n        luminance: 1,\n        inclination: 0.49, // elevation / inclination\n        azimuth: 0.25, // Facing front,\n        sun: !true,\n    };\n\n    var uniforms = this.skyDome.uniforms;\n    uniforms.turbidity.value = effectController.turbidity;\n    uniforms.reileigh.value = effectController.reileigh;\n    uniforms.luminance.value = effectController.luminance;\n    uniforms.mieCoefficient.value = effectController.mieCoefficient;\n    uniforms.mieDirectionalG.value = effectController.mieDirectionalG;\n    uniforms.up.value = new THREE.Vector3(); // no more necessary, estimate normal from cam..\n};\n\nAtmosphere.prototype.setRealisticOn = function setRealisticOn(bool) {\n    if (bool && !this.sky) {\n        this._initRealisticLighning();\n    }\n    this.realistic = bool;\n    this.material.visible = !this.realistic;\n    this.atmosphereIN.visible = !this.realistic;\n    this.ground.mesh.visible = this.realistic;\n    this.sky.mesh.visible = this.realistic;\n    this.skyDome.mesh.visible = this.realistic;\n};\n\nAtmosphere.prototype.updateLightingPos = function updateLightingPos(pos) {\n    if (this.realistic) {\n        this.ground.material.uniforms.v3LightPosition.value = pos.clone().normalize();\n        this.sky.material.uniforms.v3LightPosition.value = pos.clone().normalize();\n        this.skyDome.uniforms.sunPosition.value.copy(pos);\n    }\n};\n\nexport default Atmosphere;\n"]}