'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Coordinates = require('../../Geographic/Coordinates');

var _Projection = require('../../Geographic/Projection');

var _Projection2 = _interopRequireDefault(_Projection);

var _OBB = require('../../../Renderer/ThreeExtended/OBB');

var _OBB2 = _interopRequireDefault(_OBB);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function BuilderEllipsoidTile() {
    this.projector = new _Projection2.default();

    this.tmp = {
        coords: [_Coordinates.C.EPSG_4326_Radians(0, 0), _Coordinates.C.EPSG_4326_Radians(0, 0)],
        position: new THREE.Vector3(),
        normal: new THREE.Vector3()
    };
}

BuilderEllipsoidTile.prototype.constructor = BuilderEllipsoidTile;

// prepare params
// init projected object -> params.projected
BuilderEllipsoidTile.prototype.Prepare = function (params) {
    params.nbRow = Math.pow(2.0, params.level + 1.0);

    var st1 = this.projector.WGS84ToOneSubY(params.extent.south());

    if (!isFinite(st1)) {
        st1 = 0;
    }

    var sizeTexture = 1.0 / params.nbRow;

    var start = st1 % sizeTexture;

    params.deltaUV1 = (st1 - start) * params.nbRow;

    // let's avoid building too much temp objects
    params.projected = { longitudeRad: 0, latitudeRad: 0 };
};

// get center tile in cartesian 3D
BuilderEllipsoidTile.prototype.Center = function (params) {
    params.center = params.extent.center(this.tmp.coords[0]).as('EPSG:4978', this.tmp.coords[1]).xyz();
    return params.center;
};

// get position 3D cartesian
BuilderEllipsoidTile.prototype.VertexPosition = function (params) {
    this.tmp.coords[0]._values[0] = params.projected.longitudeRad;
    this.tmp.coords[0]._values[1] = params.projected.latitudeRad;

    this.tmp.coords[0].as('EPSG:4978', this.tmp.coords[1]).xyz(this.tmp.position);
    this.tmp.normal.copy(this.tmp.position).normalize();
    return this.tmp.position;
};

// get normal for last vertex
BuilderEllipsoidTile.prototype.VertexNormal = function () {
    return this.tmp.normal;
};

// coord u tile to projected
BuilderEllipsoidTile.prototype.uProjecte = function (u, params) {
    params.projected.longitudeRad = this.projector.UnitaryToLongitudeWGS84(u, params.extent);
};

// coord v tile to projected
BuilderEllipsoidTile.prototype.vProjecte = function (v, params) {
    params.projected.latitudeRad = this.projector.UnitaryToLatitudeWGS84(v, params.extent);
};

// Compute uv 1, if isn't defined the uv1 isn't computed
BuilderEllipsoidTile.prototype.getUV_PM = function (params) {
    var t = this.projector.WGS84ToOneSubY(params.projected.latitudeRad) * params.nbRow;

    if (!isFinite(t)) {
        t = 0;
    }

    return t - params.deltaUV1;
};

// use for region for adaptation boundingVolume
BuilderEllipsoidTile.prototype.OBB = function (params) {
    return _OBB2.default.extentToOBB(params.extent);
};

exports.default = BuilderEllipsoidTile;