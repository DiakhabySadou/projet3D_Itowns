{"version":3,"sources":["../../../src/Core/Prefab/PlanarView.js"],"names":["createPlanarLayer","THREE","id","extent","options","tileLayer","object3d","Group","schemeTile","tileParams","_commonAncestorLookup","a","b","undefined","level","parent","preUpdate","context","layer","changeSources","has","size","level0Nodes","commonAncestor","values","source","isCamera","material","maxSubdivisionLevel","update","node","hasEnoughTexturesToSubdivide","builder","onTileCreated","setLightingOn","lighting","enable","uniforms","lightPosition","value","position","noTextureColor","copy","showOutline","param","materialParams","Object","hasOwnProperty","call","type","protocol","visible","x","y","z","PlanarView","viewerDiv","Object3D","DefaultUp","set","crs","dim","dimensions","positionCamera","center","clone","_values","Math","max","lookat","xyz","camera","setPosition","camera3D","lookAt","near","far","updateProjectionMatrix","updateMatrixWorld","addLayer","_renderState","FINAL","_fullSizeDepthBuffer","prototype","constructor","reprojection","referenceCrs","selectNodeAt","mouse","selectedId","screenCoordsToNodeId","n","traverse","setSelected","console","info","notifyChange","mainLoop","gfxEngine","getWindowSize","previousRenderState","changeRenderState","ID","buffer","renderViewTobuffer","fullSizeRenderTarget","depthRGBA","Vector4","fromArray","divideScalar","unpack","pow","round","readDepthBuffer","width","height","g","DEPTH","matrix","Matrix4","screen","Vector2","pickWorldPosition","Vector3","ray","Ray","direction","getPickingPositionFromDepth","l","viewPaused","scheduler","commandsWaitingExecutionCount","renderingState","multiplyScalar","floor","prev","layers","mask","threejsLayer","slice","origin","multiplyMatrices","matrixWorld","getInverse","projectionMatrix","applyMatrix4","sub","angle","angleTo","orthoZ","depthBufferRGBAValueToOrthoZ","length","cos","addVectors","setLength","newRenderState","changeStateFunction","object3D","changeState","traverseVisible"],"mappings":";;;;;;;;;;;;;;QAegBA,iB,GAAAA,iB;;AAfhB;;IAAYC,K;;AAEZ;;;;AACA;;AACA;;;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;AAEO,SAASD,iBAAT,CAA2BE,EAA3B,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AACnD,QAAMC,YAAY,yBAAkBH,EAAlB,EAAsBE,QAAQE,QAAR,IAAoB,IAAIL,MAAMM,KAAV,EAA1C,CAAlB;AACAF,cAAUF,MAAV,GAAmBA,MAAnB;AACAE,cAAUG,UAAV,GAAuB,CAACL,MAAD,CAAvB;AACAE,cAAUI,UAAV,GAAuBL,QAAQK,UAA/B;;AAEA;;;AAsBA,aAASC,qBAAT,CAA+BC,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,YAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;AACV,mBAAOC,SAAP;AACH;AACD,YAAIF,EAAEG,KAAF,IAAWF,EAAEE,KAAjB,EAAwB;AACpB,gBAAIH,EAAET,EAAF,IAAQU,EAAEV,EAAd,EAAkB;AACd,uBAAOS,CAAP;AACH,aAFD,MAEO,IAAIA,EAAEG,KAAF,IAAW,CAAf,EAAkB;AACrB,uBAAOJ,sBAAsBC,EAAEI,MAAxB,EAAgCH,EAAEG,MAAlC,CAAP;AACH,aAFM,MAEA;AACH,uBAAOF,SAAP;AACH;AACJ,SARD,MAQO,IAAIF,EAAEG,KAAF,GAAUF,EAAEE,KAAhB,EAAuB;AAC1B,mBAAOJ,sBAAsBC,CAAtB,EAAyBC,EAAEG,MAA3B,CAAP;AACH,SAFM,MAEA;AACH,mBAAOL,sBAAsBC,EAAEI,MAAxB,EAAgCH,CAAhC,CAAP;AACH;AACJ;;AAEDP,cAAUW,SAAV,GAAsB,UAACC,OAAD,EAAUC,KAAV,EAAiBC,aAAjB,EAAmC;AACrD,qCAAmBH,SAAnB,CAA6BC,OAA7B,EAAsCC,KAAtC;;AAMA,YAAIC,cAAcC,GAAd,CAAkBP,SAAlB,KAAgCM,cAAcE,IAAd,IAAsB,CAA1D,EAA6D;AACzD,mBAAOH,MAAMI,WAAb;AACH;;AAED,YAAIC,uBAAJ;AAXqD;AAAA;AAAA;;AAAA;AAYrD,4DAAqBJ,cAAcK,MAAd,EAArB,4GAA6C;AAAA,oBAAlCC,MAAkC;;AACzC,oBAAIA,OAAOC,QAAX,EAAqB;AACjB;AACA;AACA;AACA,2BAAOR,MAAMI,WAAb;AACH;AACD,oBAAIG,OAAOP,KAAP,KAAiBA,MAAMhB,EAA3B,EAA+B;AAC3B,wBAAI,CAACqB,cAAL,EAAqB;AACjBA,yCAAiBE,MAAjB;AACH,qBAFD,MAEO;AACHF,yCAAiBb,sBAAsBa,cAAtB,EAAsCE,MAAtC,CAAjB;AACA,4BAAI,CAACF,cAAL,EAAqB;AACjB,mCAAOL,MAAMI,WAAb;AACH;AACJ;AACD,wBAAIC,eAAeI,QAAf,IAA2B,IAA/B,EAAqC;AACjCJ,yCAAiBV,SAAjB;AACH;AACJ;AACJ;AAhCoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiCrD,YAAIU,cAAJ,EAAoB;AAIhB,mBAAO,CAACA,cAAD,CAAP;AACH,SALD,MAKO;AACH,mBAAO,EAAP,CADG,CACQ;AACd;AACJ,KAzCD;;AAmDAlB,cAAUuB,mBAAV,GAAgCxB,QAAQwB,mBAAR,IAA+B,CAA/D;AACAvB,cAAUwB,MAAV,GAAmB,wFARnB,UAAqBZ,OAArB,EAA8BC,KAA9B,EAAqCY,IAArC,EAA2C;AACvC,YAAI,6BAAmBC,4BAAnB,CAAgDd,OAAhD,EAAyDC,KAAzD,EAAgEY,IAAhE,CAAJ,EAA2E;AACvE,mBAAO,oDAAyBb,OAAzB,EAAkCC,KAAlC,EAAyCY,IAAzC,CAAP;AACH;AACD,eAAO,KAAP;AACH,KAGkB,CAAnB;AACAzB,cAAU2B,OAAV,GAAoB,iCAApB;AACA3B,cAAU4B,aAAV,GAA0B7B,QAAQ6B,aAAR,GAAwB7B,QAAQ6B,aAAhC,GA9FP,UAAoBf,KAApB,EAA2BH,MAA3B,EAAmCe,IAAnC,EAAyC;AACxDA,aAAKH,QAAL,CAAcO,aAAd,CAA4BhB,MAAMiB,QAAN,CAAeC,MAA3C;AACAN,aAAKH,QAAL,CAAcU,QAAd,CAAuBC,aAAvB,CAAqCC,KAArC,GAA6CrB,MAAMiB,QAAN,CAAeK,QAA5D;;AAEA,YAAItB,MAAMuB,cAAV,EAA0B;AACtBX,iBAAKH,QAAL,CAAcU,QAAd,CAAuBI,cAAvB,CAAsCF,KAAtC,CAA4CG,IAA5C,CAAiDxB,MAAMuB,cAAvD;AACH;AACDX,aAAKH,QAAL,CAAcU,QAAd,CAAuBM,WAAvB,GAAqC,EAAEJ,OAAOrB,MAAMyB,WAAN,IAAqB,KAA9B,EAArC;;AAEA,aAAK,IAAMC,KAAX,IAAoB1B,MAAM2B,cAA1B,EAA0C;AACtC,gBAAIC,OAAOC,cAAP,CAAsBC,IAAtB,CAA2B9B,MAAM2B,cAAjC,EAAiDD,KAAjD,CAAJ,EAA6D;AACzDd,qBAAKH,QAAL,CAAciB,KAAd,IAAuB1B,MAAM2B,cAAN,CAAqBD,KAArB,CAAvB;AACH;AACJ;AAMJ,KA2ED;AACAvC,cAAU4C,IAAV,GAAiB,UAAjB;AACA5C,cAAU6C,QAAV,GAAqB,MAArB;AACA7C,cAAU8C,OAAV,GAAoB,IAApB;AACA9C,cAAU8B,QAAV,GAAqB;AACjBC,gBAAQ,KADS;AAEjBI,kBAAU,EAAEY,GAAG,CAAC,GAAN,EAAWC,GAAG,GAAd,EAAmBC,GAAG,GAAtB;AAFO,KAArB;;AAKA,WAAOjD,SAAP;AACH;;AAED,SAASkD,UAAT,CAAoBC,SAApB,EAA+BrD,MAA/B,EAAqD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACjDH,UAAMwD,QAAN,CAAeC,SAAf,CAAyBC,GAAzB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC;;AAEA;AACA,mBAAKX,IAAL,CAAU,IAAV,EAAgB7C,OAAOyD,GAAP,EAAhB,EAA8BJ,SAA9B,EAAyCpD,OAAzC;;AAEA;AACA,QAAMyD,MAAM1D,OAAO2D,UAAP,EAAZ;AACA,QAAMC,iBAAiB5D,OAAO6D,MAAP,GAAgBC,KAAhB,EAAvB;AACAF,mBAAeG,OAAf,CAAuB,CAAvB,IAA4BC,KAAKC,GAAL,CAASP,IAAIT,CAAb,EAAgBS,IAAIR,CAApB,CAA5B;AACA,QAAMgB,SAASN,eAAeO,GAAf,EAAf;AACAD,WAAOf,CAAP,GAAW,CAAX;;AAEA,SAAKiB,MAAL,CAAYC,WAAZ,CAAwBT,cAAxB;AACA,SAAKQ,MAAL,CAAYE,QAAZ,CAAqBC,MAArB,CAA4BL,MAA5B;AACA,SAAKE,MAAL,CAAYE,QAAZ,CAAqBE,IAArB,GAA4B,GAA5B;AACA,SAAKJ,MAAL,CAAYE,QAAZ,CAAqBG,GAArB,GAA2B,IAAIT,KAAKC,GAAL,CAASP,IAAIT,CAAb,EAAgBS,IAAIR,CAApB,CAA/B;AACA,SAAKkB,MAAL,CAAYE,QAAZ,CAAqBI,sBAArB;AACA,SAAKN,MAAL,CAAYE,QAAZ,CAAqBK,iBAArB,CAAuC,IAAvC;;AAEA,QAAMzE,YAAYL,kBAAkB,QAAlB,EAA4BG,MAA5B,EAAoCC,OAApC,CAAlB;;AAEA,SAAK2E,QAAL,CAAc1E,SAAd;;AAEA,SAAK2E,YAAL,GAAoB,2BAAiBC,KAArC;AACA,SAAKC,oBAAL,GAA4B,IAA5B;;AAEA,SAAK7E,SAAL,GAAiBA,SAAjB;AACH;;AAEDkD,WAAW4B,SAAX,GAAuB,sBAAc,eAAKA,SAAnB,CAAvB;AACA5B,WAAW4B,SAAX,CAAqBC,WAArB,GAAmC7B,UAAnC;;AAEAA,WAAW4B,SAAX,CAAqBJ,QAArB,GAAgC,UAAkB7D,KAAlB,EAAyB;AACrD,QAAIA,MAAM+B,IAAN,IAAc,OAAlB,EAA2B;AACvB/B,cAAMW,MAAN;AACA,YAAIX,MAAMgC,QAAN,KAAmB,YAAvB,EAAqC;AACjChC,kBAAMmE,YAAN,GAAqB,KAAKC,YAA1B;AACH;AACJ,KALD,MAKO,IAAIpE,MAAM+B,IAAN,IAAc,WAAlB,EAA+B;AAClC/B,cAAMW,MAAN;AACH;AACD,WAAO,eAAKsD,SAAL,CAAeJ,QAAf,CAAwB/B,IAAxB,CAA6B,IAA7B,EAAmC9B,KAAnC,EAA0C,KAAKb,SAA/C,CAAP;AACH,CAVD;;AAYAkD,WAAW4B,SAAX,CAAqBI,YAArB,GAAoC,UAAsBC,KAAtB,EAA6B;AAC7D,QAAMC,aAAa,KAAKC,oBAAL,CAA0BF,KAA1B,CAAnB;;AAD6D;AAAA;AAAA;;AAAA;AAG7D,yDAAgB,KAAKnF,SAAL,CAAeiB,WAA/B,iHAA4C;AAAA,gBAAjCqE,CAAiC;;AACxCA,cAAEC,QAAF,CAAW,UAAC9D,IAAD,EAAU;AACjB;AACA,oBAAIA,KAAK+D,WAAT,EAAsB;AAClB/D,yBAAK+D,WAAL,CAAiB/D,KAAK5B,EAAL,KAAYuF,UAA7B;;AAEA,wBAAI3D,KAAK5B,EAAL,KAAYuF,UAAhB,EAA4B;AACxB;AACAK,gCAAQC,IAAR,CAAajE,IAAb;AACH;AACJ;AACJ,aAVD;AAWH;AAf4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiB7D,SAAKkE,YAAL;AACH,CAlBD;;AAoBAzC,WAAW4B,SAAX,CAAqBO,oBAArB,GAA4C,UAA8BF,KAA9B,EAAqC;AAC7E,QAAM3B,MAAM,KAAKoC,QAAL,CAAcC,SAAd,CAAwBC,aAAxB,EAAZ;;AAEA,QAAMC,sBAAsB,KAAKpB,YAAjC;AACA,SAAKqB,iBAAL,CAAuB,2BAAiBC,EAAxC;;AAEA,QAAIC,SAAS,KAAKN,QAAL,CAAcC,SAAd,CAAwBM,kBAAxB,CACT,IADS,EAET,KAAKP,QAAL,CAAcC,SAAd,CAAwBO,oBAFf,EAGTjB,MAAMpC,CAHG,EAGAS,IAAIR,CAAJ,GAAQmC,MAAMnC,CAHd,EAIT,CAJS,EAIN,CAJM,CAAb;;AAMA,SAAKgD,iBAAL,CAAuBD,mBAAvB;;AAEA,QAAIM,YAAY,IAAIzG,MAAM0G,OAAV,GAAoBC,SAApB,CAA8BL,MAA9B,EAAsCM,YAAtC,CAAmD,KAAnD,CAAhB;;AAEA;AACA,QAAIC,SAAS,+BAASJ,SAAT,EAAoBvC,KAAK4C,GAAL,CAAS,GAAT,EAAc,CAAd,CAApB,CAAb;;AAEA,WAAO5C,KAAK6C,KAAL,CAAWF,MAAX,CAAP;AACH,CApBD;;AAsBAvD,WAAW4B,SAAX,CAAqB8B,eAArB,GAAuC,UAAyB7D,CAAzB,EAA4BC,CAA5B,EAA+B6D,KAA/B,EAAsCC,MAAtC,EAA8C;AACjF,QAAMC,IAAI,KAAKnB,QAAL,CAAcC,SAAxB;AACA,QAAME,sBAAsB,KAAKpB,YAAjC;AACA,SAAKqB,iBAAL,CAAuB,2BAAiBgB,KAAxC;AACA,QAAMd,SAASa,EAAEZ,kBAAF,CAAqB,IAArB,EAA2BY,EAAEX,oBAA7B,EAAmDrD,CAAnD,EAAsDC,CAAtD,EAAyD6D,KAAzD,EAAgEC,MAAhE,CAAf;AACA,SAAKd,iBAAL,CAAuBD,mBAAvB;AACA,WAAOG,MAAP;AACH,CAPD;;AASA,IAAMe,SAAS,IAAIrH,MAAMsH,OAAV,EAAf;AACA,IAAMC,SAAS,IAAIvH,MAAMwH,OAAV,EAAf;AACA,IAAMC,oBAAoB,IAAIzH,MAAM0H,OAAV,EAA1B;AACA,IAAMC,MAAM,IAAI3H,MAAM4H,GAAV,EAAZ;AACA,IAAMC,YAAY,IAAI7H,MAAM0H,OAAV,EAAlB;AACApE,WAAW4B,SAAX,CAAqB4C,2BAArB,GAAmD,UAAqCvC,KAArC,EAA4C;AAC3F,QAAMwC,IAAI,KAAK/B,QAAf;AACA,QAAMgC,aAAaD,EAAEE,SAAF,CAAYC,6BAAZ,MAA+C,CAA/C,IAAoDH,EAAEI,cAAF,8BAAvE;AACA,QAAMhB,IAAIY,EAAE9B,SAAZ;AACA,QAAMrC,MAAMuD,EAAEjB,aAAF,EAAZ;AACA,QAAM5B,SAAS,KAAKA,MAAL,CAAYE,QAA3B;;AAEAe,YAAQA,SAAS3B,IAAII,KAAJ,GAAYoE,cAAZ,CAA2B,GAA3B,CAAjB;AACA7C,UAAMpC,CAAN,GAAUe,KAAKmE,KAAL,CAAW9C,MAAMpC,CAAjB,CAAV;AACAoC,UAAMnC,CAAN,GAAUc,KAAKmE,KAAL,CAAW9C,MAAMnC,CAAjB,CAAV;;AAEA;AACA,QAAMkF,OAAOhE,OAAOiE,MAAP,CAAcC,IAA3B;AACAlE,WAAOiE,MAAP,CAAcC,IAAd,GAAqB,KAAK,KAAKpI,SAAL,CAAeqI,YAAzC;;AAEC;AACD,QAAInC,eAAJ;AACA,QAAI0B,UAAJ,EAAgB;AACZ,aAAK/C,oBAAL,GAA4B,KAAKA,oBAAL,IAA6B,KAAK+B,eAAL,CAAqB,CAArB,EAAwB,CAAxB,EAA2BpD,IAAIT,CAA/B,EAAkCS,IAAIR,CAAtC,CAAzD;AACA,YAAMnD,KAAK,CAAC,CAAC2D,IAAIR,CAAJ,GAAQmC,MAAMnC,CAAd,GAAkB,CAAnB,IAAwBQ,IAAIT,CAA5B,GAAgCoC,MAAMpC,CAAvC,IAA4C,CAAvD;AACAmD,iBAAS,KAAKrB,oBAAL,CAA0ByD,KAA1B,CAAgCzI,EAAhC,EAAoCA,KAAK,CAAzC,CAAT;AACH,KAJD,MAIO;AACHqG,iBAAS,KAAKU,eAAL,CAAqBzB,MAAMpC,CAA3B,EAA8BS,IAAIR,CAAJ,GAAQmC,MAAMnC,CAAd,GAAkB,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,CAAT;AACH;;AAEDmE,WAAOpE,CAAP,GAAYoC,MAAMpC,CAAN,GAAUS,IAAIT,CAAf,GAAoB,CAApB,GAAwB,CAAnC;AACAoE,WAAOnE,CAAP,GAAW,EAAEmC,MAAMnC,CAAN,GAAUQ,IAAIR,CAAhB,IAAqB,CAArB,GAAyB,CAApC;;AAEA;AACAuE,QAAIgB,MAAJ,CAAWlG,IAAX,CAAgB6B,OAAO/B,QAAvB;;AAEA;AACAoF,QAAIE,SAAJ,CAAcnE,GAAd,CAAkB6D,OAAOpE,CAAzB,EAA4BoE,OAAOnE,CAAnC,EAAsC,GAAtC;AACA;AACAiE,WAAOuB,gBAAP,CAAwBtE,OAAOuE,WAA/B,EAA4CxB,OAAOyB,UAAP,CAAkBxE,OAAOyE,gBAAzB,CAA5C;AACApB,QAAIE,SAAJ,CAAcmB,YAAd,CAA2B3B,MAA3B;AACAM,QAAIE,SAAJ,CAAcoB,GAAd,CAAkBtB,IAAIgB,MAAtB;;AAEAd,cAAUnE,GAAV,CAAc,CAAd,EAAiB,CAAjB,EAAoB,GAApB;AACAmE,cAAUmB,YAAV,CAAuB3B,MAAvB;AACAQ,cAAUoB,GAAV,CAActB,IAAIgB,MAAlB;;AAEA,QAAMO,QAAQrB,UAAUsB,OAAV,CAAkBxB,IAAIE,SAAtB,CAAd;AACA,QAAMuB,SAASjC,EAAEkC,4BAAF,CAA+B/C,MAA/B,EAAuChC,MAAvC,CAAf;AACA,QAAMgF,SAASF,SAASlF,KAAKqF,GAAL,CAASL,KAAT,CAAxB;;AAEAzB,sBAAkB+B,UAAlB,CAA6BlF,OAAO/B,QAApC,EAA8CoF,IAAIE,SAAJ,CAAc4B,SAAd,CAAwBH,MAAxB,CAA9C;;AAEAhF,WAAOiE,MAAP,CAAcC,IAAd,GAAqBF,IAArB;;AAEA,QAAIb,kBAAkB6B,MAAlB,KAA6B,QAAjC,EACI;AAAE,eAAO1I,SAAP;AAAmB;;AAEzB,WAAO6G,iBAAP;AACH,CAtDD;;AAwDAnE,WAAW4B,SAAX,CAAqBkB,iBAArB,GAAyC,UAA2BsD,cAA3B,EAA2C;AAChF,QAAI,KAAK3E,YAAL,IAAqB2E,cAArB,IAAuC,CAAC,KAAKtJ,SAAL,CAAeiB,WAA3D,EAAwE;AACpE;AACH;;AAED;AACA,QAAIsI,sBAAuB,YAAoC;AAC3D,eAAO,UAA6BC,QAA7B,EAAuC;AAC1C,gBAAIA,SAASC,WAAb,EAA0B;AACtBD,yBAASC,WAAT,CAAqBH,cAArB;AACH;AACJ,SAJD;AAKH,KAN0B,EAA3B;;AANgF;AAAA;AAAA;;AAAA;AAchF,yDAAgB,KAAKtJ,SAAL,CAAeiB,WAA/B,iHAA4C;AAAA,gBAAjCqE,CAAiC;;AACxCA,cAAEoE,eAAF,CAAkBH,mBAAlB;AACH;AAhB+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBhF,SAAK5E,YAAL,GAAoB2E,cAApB;AACH,CAlBD;;kBAoBepG,U","file":"PlanarView.js","sourcesContent":["import * as THREE from 'three';\n\nimport View from '../View';\nimport { RENDERING_PAUSED } from '../MainLoop';\nimport RendererConstant from '../../Renderer/RendererConstant';\nimport { unpack1K } from '../../Renderer/LayeredMaterial';\n\nimport { GeometryLayer } from '../Layer/Layer';\n\nimport { processTiledGeometryNode } from '../../Process/TiledNodeProcessing';\nimport { updateLayeredMaterialNodeImagery, updateLayeredMaterialNodeElevation } from '../../Process/LayeredMaterialNodeProcessing';\nimport { planarCulling, planarSubdivisionControl } from '../../Process/PlanarTileProcessing';\nimport PlanarTileBuilder from './Planar/PlanarTileBuilder';\nimport SubdivisionControl from '../../Process/SubdivisionControl';\n\nexport function createPlanarLayer(id, extent, options) {\n    const tileLayer = new GeometryLayer(id, options.object3d || new THREE.Group());\n    tileLayer.extent = extent;\n    tileLayer.schemeTile = [extent];\n    tileLayer.tileParams = options.tileParams;\n\n    // Configure tiles\n    const nodeInitFn = function nodeInitFn(layer, parent, node) {\n        node.material.setLightingOn(layer.lighting.enable);\n        node.material.uniforms.lightPosition.value = layer.lighting.position;\n\n        if (layer.noTextureColor) {\n            node.material.uniforms.noTextureColor.value.copy(layer.noTextureColor);\n        }\n        node.material.uniforms.showOutline = { value: layer.showOutline || false };\n\n        for (const param in layer.materialParams) {\n            if (Object.hasOwnProperty.call(layer.materialParams, param)) {\n                node.material[param] = layer.materialParams[param];\n            }\n        }\n\n\n        if (__DEBUG__) {\n            node.material.wireframe = layer.wireframe || false;\n        }\n    };\n\n    function _commonAncestorLookup(a, b) {\n        if (!a || !b) {\n            return undefined;\n        }\n        if (a.level == b.level) {\n            if (a.id == b.id) {\n                return a;\n            } else if (a.level != 0) {\n                return _commonAncestorLookup(a.parent, b.parent);\n            } else {\n                return undefined;\n            }\n        } else if (a.level < b.level) {\n            return _commonAncestorLookup(a, b.parent);\n        } else {\n            return _commonAncestorLookup(a.parent, b);\n        }\n    }\n\n    tileLayer.preUpdate = (context, layer, changeSources) => {\n        SubdivisionControl.preUpdate(context, layer);\n\n        if (__DEBUG__) {\n            layer._latestUpdateStartingLevel = 0;\n        }\n\n        if (changeSources.has(undefined) || changeSources.size == 0) {\n            return layer.level0Nodes;\n        }\n\n        let commonAncestor;\n        for (const source of changeSources.values()) {\n            if (source.isCamera) {\n                // if the change is caused by a camera move, no need to bother\n                // to find common ancestor: we need to update the whole tree:\n                // some invisible tiles may now be visible\n                return layer.level0Nodes;\n            }\n            if (source.layer === layer.id) {\n                if (!commonAncestor) {\n                    commonAncestor = source;\n                } else {\n                    commonAncestor = _commonAncestorLookup(commonAncestor, source);\n                    if (!commonAncestor) {\n                        return layer.level0Nodes;\n                    }\n                }\n                if (commonAncestor.material == null) {\n                    commonAncestor = undefined;\n                }\n            }\n        }\n        if (commonAncestor) {\n            if (__DEBUG__) {\n                layer._latestUpdateStartingLevel = commonAncestor.level;\n            }\n            return [commonAncestor];\n        } else {\n            return []; // layer.level0Nodes;\n        }\n    };\n\n\n    function subdivision(context, layer, node) {\n        if (SubdivisionControl.hasEnoughTexturesToSubdivide(context, layer, node)) {\n            return planarSubdivisionControl(context, layer, node);\n        }\n        return false;\n    }\n\n    tileLayer.maxSubdivisionLevel = options.maxSubdivisionLevel || 5;\n    tileLayer.update = processTiledGeometryNode(planarCulling, subdivision);\n    tileLayer.builder = new PlanarTileBuilder();\n    tileLayer.onTileCreated = options.onTileCreated ? options.onTileCreated : nodeInitFn;\n    tileLayer.type = 'geometry';\n    tileLayer.protocol = 'tile';\n    tileLayer.visible = true;\n    tileLayer.lighting = {\n        enable: false,\n        position: { x: -0.5, y: 0.0, z: 1.0 },\n    };\n\n    return tileLayer;\n}\n\nfunction PlanarView(viewerDiv, extent, options = {}) {\n    THREE.Object3D.DefaultUp.set(0, 0, 1);\n\n    // Setup View\n    View.call(this, extent.crs(), viewerDiv, options);\n\n    // Configure camera\n    const dim = extent.dimensions();\n    const positionCamera = extent.center().clone();\n    positionCamera._values[2] = Math.max(dim.x, dim.y);\n    const lookat = positionCamera.xyz();\n    lookat.z = 0;\n\n    this.camera.setPosition(positionCamera);\n    this.camera.camera3D.lookAt(lookat);\n    this.camera.camera3D.near = 0.1;\n    this.camera.camera3D.far = 2 * Math.max(dim.x, dim.y);\n    this.camera.camera3D.updateProjectionMatrix();\n    this.camera.camera3D.updateMatrixWorld(true);\n\n    const tileLayer = createPlanarLayer('planar', extent, options);\n\n    this.addLayer(tileLayer);\n\n    this._renderState = RendererConstant.FINAL;\n    this._fullSizeDepthBuffer = null;\n\n    this.tileLayer = tileLayer;\n}\n\nPlanarView.prototype = Object.create(View.prototype);\nPlanarView.prototype.constructor = PlanarView;\n\nPlanarView.prototype.addLayer = function addLayer(layer) {\n    if (layer.type == 'color') {\n        layer.update = updateLayeredMaterialNodeImagery;\n        if (layer.protocol === 'rasterizer') {\n            layer.reprojection = this.referenceCrs;\n        }\n    } else if (layer.type == 'elevation') {\n        layer.update = updateLayeredMaterialNodeElevation;\n    }\n    return View.prototype.addLayer.call(this, layer, this.tileLayer);\n};\n\nPlanarView.prototype.selectNodeAt = function selectNodeAt(mouse) {\n    const selectedId = this.screenCoordsToNodeId(mouse);\n\n    for (const n of this.tileLayer.level0Nodes) {\n        n.traverse((node) => {\n            // only take of selectable nodes\n            if (node.setSelected) {\n                node.setSelected(node.id === selectedId);\n\n                if (node.id === selectedId) {\n                    // eslint-disable-next-line no-console\n                    console.info(node);\n                }\n            }\n        });\n    }\n\n    this.notifyChange();\n};\n\nPlanarView.prototype.screenCoordsToNodeId = function screenCoordsToNodeId(mouse) {\n    const dim = this.mainLoop.gfxEngine.getWindowSize();\n\n    const previousRenderState = this._renderState;\n    this.changeRenderState(RendererConstant.ID);\n\n    var buffer = this.mainLoop.gfxEngine.renderViewTobuffer(\n        this,\n        this.mainLoop.gfxEngine.fullSizeRenderTarget,\n        mouse.x, dim.y - mouse.y,\n        1, 1);\n\n    this.changeRenderState(previousRenderState);\n\n    var depthRGBA = new THREE.Vector4().fromArray(buffer).divideScalar(255.0);\n\n    // unpack RGBA to float\n    var unpack = unpack1K(depthRGBA, Math.pow(256, 3));\n\n    return Math.round(unpack);\n};\n\nPlanarView.prototype.readDepthBuffer = function readDepthBuffer(x, y, width, height) {\n    const g = this.mainLoop.gfxEngine;\n    const previousRenderState = this._renderState;\n    this.changeRenderState(RendererConstant.DEPTH);\n    const buffer = g.renderViewTobuffer(this, g.fullSizeRenderTarget, x, y, width, height);\n    this.changeRenderState(previousRenderState);\n    return buffer;\n};\n\nconst matrix = new THREE.Matrix4();\nconst screen = new THREE.Vector2();\nconst pickWorldPosition = new THREE.Vector3();\nconst ray = new THREE.Ray();\nconst direction = new THREE.Vector3();\nPlanarView.prototype.getPickingPositionFromDepth = function getPickingPositionFromDepth(mouse) {\n    const l = this.mainLoop;\n    const viewPaused = l.scheduler.commandsWaitingExecutionCount() == 0 && l.renderingState == RENDERING_PAUSED;\n    const g = l.gfxEngine;\n    const dim = g.getWindowSize();\n    const camera = this.camera.camera3D;\n\n    mouse = mouse || dim.clone().multiplyScalar(0.5);\n    mouse.x = Math.floor(mouse.x);\n    mouse.y = Math.floor(mouse.y);\n\n    // Prepare state\n    const prev = camera.layers.mask;\n    camera.layers.mask = 1 << this.tileLayer.threejsLayer;\n\n     // Render/Read to buffer\n    let buffer;\n    if (viewPaused) {\n        this._fullSizeDepthBuffer = this._fullSizeDepthBuffer || this.readDepthBuffer(0, 0, dim.x, dim.y);\n        const id = ((dim.y - mouse.y - 1) * dim.x + mouse.x) * 4;\n        buffer = this._fullSizeDepthBuffer.slice(id, id + 4);\n    } else {\n        buffer = this.readDepthBuffer(mouse.x, dim.y - mouse.y - 1, 1, 1);\n    }\n\n    screen.x = (mouse.x / dim.x) * 2 - 1;\n    screen.y = -(mouse.y / dim.y) * 2 + 1;\n\n    // Origin\n    ray.origin.copy(camera.position);\n\n    // Direction\n    ray.direction.set(screen.x, screen.y, 0.5);\n    // Unproject\n    matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));\n    ray.direction.applyMatrix4(matrix);\n    ray.direction.sub(ray.origin);\n\n    direction.set(0, 0, 1.0);\n    direction.applyMatrix4(matrix);\n    direction.sub(ray.origin);\n\n    const angle = direction.angleTo(ray.direction);\n    const orthoZ = g.depthBufferRGBAValueToOrthoZ(buffer, camera);\n    const length = orthoZ / Math.cos(angle);\n\n    pickWorldPosition.addVectors(camera.position, ray.direction.setLength(length));\n\n    camera.layers.mask = prev;\n\n    if (pickWorldPosition.length() > 10000000)\n        { return undefined; }\n\n    return pickWorldPosition;\n};\n\nPlanarView.prototype.changeRenderState = function changeRenderState(newRenderState) {\n    if (this._renderState == newRenderState || !this.tileLayer.level0Nodes) {\n        return;\n    }\n\n    // build traverse function\n    var changeStateFunction = (function getChangeStateFunctionFn() {\n        return function changeStateFunction(object3D) {\n            if (object3D.changeState) {\n                object3D.changeState(newRenderState);\n            }\n        };\n    }());\n\n    for (const n of this.tileLayer.level0Nodes) {\n        n.traverseVisible(changeStateFunction);\n    }\n    this._renderState = newRenderState;\n};\n\nexport default PlanarView;\n"]}