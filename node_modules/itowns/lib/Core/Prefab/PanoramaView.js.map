{"version":3,"sources":["../../../src/Core/Prefab/PanoramaView.js"],"names":["createPanoramaLayer","THREE","id","coordinates","ratio","options","tileLayer","object3d","Group","xyz","position","quaternion","setFromUnitVectors","Vector3","geodesicNormal","updateMatrixWorld","extent","west","east","north","south","schemeTile","disableSkirt","_commonAncestorLookup","a","b","undefined","level","parent","preUpdate","context","layer","changeSources","has","size","level0Nodes","commonAncestor","values","source","isCamera","material","update","node","hasEnoughTexturesToSubdivide","maxSubdivisionLevel","Vector2","builder","onTileCreated","noTextureColor","uniforms","value","copy","depthWrite","type","protocol","visible","segments","quality","lighting","enable","x","y","z","PanoramaView","viewerDiv","Object3D","DefaultUp","set","call","crs","camera","camera3D","fov","near","far","up","updateProjectionMatrix","prototype","addLayer","baseLayer","constructor","Error"],"mappings":"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","file":"PanoramaView.js","sourcesContent":["import * as THREE from 'three';\n\nimport View from '../View';\n\nimport { GeometryLayer } from '../Layer/Layer';\nimport Extent from '../Geographic/Extent';\nimport { processTiledGeometryNode } from '../../Process/TiledNodeProcessing';\nimport { updateLayeredMaterialNodeImagery } from '../../Process/LayeredMaterialNodeProcessing';\nimport { panoramaCulling, panoramaSubdivisionControl } from '../../Process/PanoramaTileProcessing';\nimport PanoramaTileBuilder from './Panorama/PanoramaTileBuilder';\nimport SubdivisionControl from '../../Process/SubdivisionControl';\n\nexport function createPanoramaLayer(id, coordinates, ratio, options = {}) {\n    const tileLayer = new GeometryLayer(id, options.object3d || new THREE.Group());\n\n    coordinates.xyz(tileLayer.object3d.position);\n    tileLayer.object3d.quaternion.setFromUnitVectors(\n        new THREE.Vector3(0, 0, 1), coordinates.geodesicNormal);\n    tileLayer.object3d.updateMatrixWorld(true);\n\n    // FIXME: add CRS = '0' support\n    tileLayer.extent = new Extent('EPSG:4326', {\n        west: -180,\n        east: 180,\n        north: 90,\n        south: -90,\n    });\n\n    if (ratio == 2) {\n        // equirectangular -> spherical geometry\n        tileLayer.schemeTile = [\n            new Extent('EPSG:4326', {\n                west: -180,\n                east: 0,\n                north: 90,\n                south: -90,\n            }), new Extent('EPSG:4326', {\n                west: 0,\n                east: 180,\n                north: 90,\n                south: -90,\n            })];\n    } else {\n        // cylindrical geometry\n        tileLayer.schemeTile = [\n            new Extent('EPSG:4326', {\n                west: -180,\n                east: -90,\n                north: 90,\n                south: -90,\n            }), new Extent('EPSG:4326', {\n                west: -90,\n                east: 0,\n                north: 90,\n                south: -90,\n            }), new Extent('EPSG:4326', {\n                west: 0,\n                east: 90,\n                north: 90,\n                south: -90,\n            }), new Extent('EPSG:4326', {\n                west: 90,\n                east: 180,\n                north: 90,\n                south: -90,\n            })];\n    }\n    tileLayer.disableSkirt = true;\n\n    // Configure tiles\n    const nodeInitFn = function nodeInitFn(layer, parent, node) {\n        if (layer.noTextureColor) {\n            node.material.uniforms.noTextureColor.value.copy(layer.noTextureColor);\n        }\n        node.material.depthWrite = false;\n\n        if (__DEBUG__) {\n            node.material.uniforms.showOutline = { value: layer.showOutline || false };\n            node.material.wireframe = layer.wireframe || false;\n        }\n    };\n\n    function _commonAncestorLookup(a, b) {\n        if (!a || !b) {\n            return undefined;\n        }\n        if (a.level == b.level) {\n            if (a.id == b.id) {\n                return a;\n            } else if (a.level != 0) {\n                return _commonAncestorLookup(a.parent, b.parent);\n            } else {\n                return undefined;\n            }\n        } else if (a.level < b.level) {\n            return _commonAncestorLookup(a, b.parent);\n        } else {\n            return _commonAncestorLookup(a.parent, b);\n        }\n    }\n\n    tileLayer.preUpdate = (context, layer, changeSources) => {\n        SubdivisionControl.preUpdate(context, layer);\n\n        if (__DEBUG__) {\n            layer._latestUpdateStartingLevel = 0;\n        }\n\n        if (changeSources.has(undefined) || changeSources.size == 0) {\n            return layer.level0Nodes;\n        }\n\n        let commonAncestor;\n        for (const source of changeSources.values()) {\n            if (source.isCamera) {\n                // if the change is caused by a camera move, no need to bother\n                // to find common ancestor: we need to update the whole tree:\n                // some invisible tiles may now be visible\n                return layer.level0Nodes;\n            }\n            if (source.layer === layer.id) {\n                if (!commonAncestor) {\n                    commonAncestor = source;\n                } else {\n                    commonAncestor = _commonAncestorLookup(commonAncestor, source);\n                    if (!commonAncestor) {\n                        return layer.level0Nodes;\n                    }\n                }\n                if (commonAncestor.material == null) {\n                    commonAncestor = undefined;\n                }\n            }\n        }\n        if (commonAncestor) {\n            if (__DEBUG__) {\n                layer._latestUpdateStartingLevel = commonAncestor.level;\n            }\n            return [commonAncestor];\n        } else {\n            return layer.level0Nodes;\n        }\n    };\n\n\n    function subdivision(context, layer, node) {\n        if (SubdivisionControl.hasEnoughTexturesToSubdivide(context, layer, node)) {\n            return panoramaSubdivisionControl(\n                options.maxSubdivisionLevel || 10, new THREE.Vector2(512, 512 / ratio))(context, layer, node);\n        }\n        return false;\n    }\n\n    tileLayer.update = processTiledGeometryNode(panoramaCulling, subdivision);\n    tileLayer.builder = new PanoramaTileBuilder(ratio);\n    tileLayer.onTileCreated = nodeInitFn;\n    tileLayer.type = 'geometry';\n    tileLayer.protocol = 'tile';\n    tileLayer.visible = true;\n    tileLayer.segments = 8;\n    tileLayer.quality = 0.5;\n    tileLayer.lighting = {\n        enable: false,\n        position: { x: -0.5, y: 0.0, z: 1.0 },\n    };\n\n    return tileLayer;\n}\n\nfunction PanoramaView(viewerDiv, coordinates, ratio, options = {}) {\n    THREE.Object3D.DefaultUp.set(0, 0, 1);\n\n    // Setup View\n    View.call(this, coordinates.crs, viewerDiv, options);\n\n    // Configure camera\n    coordinates.xyz(this.camera.camera3D.position);\n    this.camera.camera3D.fov = 45;\n\n    this.camera.camera3D.near = 0.1;\n    this.camera.camera3D.far = 1000;\n    this.camera.camera3D.up = coordinates.geodesicNormal;\n    this.camera.camera3D.quaternion.setFromUnitVectors(\n        new THREE.Vector3(0, 1, 0), coordinates.geodesicNormal);\n    this.camera.camera3D.updateProjectionMatrix();\n    this.camera.camera3D.updateMatrixWorld();\n\n    const tileLayer = createPanoramaLayer('panorama', coordinates, ratio, options);\n\n    View.prototype.addLayer.call(this, tileLayer);\n\n    this.baseLayer = tileLayer;\n}\n\nPanoramaView.prototype = Object.create(View.prototype);\nPanoramaView.prototype.constructor = PanoramaView;\n\nPanoramaView.prototype.addLayer = function addLayer(layer) {\n    if (layer.type == 'color') {\n        layer.update = updateLayeredMaterialNodeImagery;\n    } else {\n        throw new Error(`Unsupported layer type ${layer.type} (PanoramaView only support 'color' layers)`);\n    }\n    return View.prototype.addLayer.call(this, layer, this.baseLayer);\n};\n\nexport default PanoramaView;\n"]}