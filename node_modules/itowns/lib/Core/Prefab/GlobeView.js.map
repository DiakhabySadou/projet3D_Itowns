{"version":3,"sources":["../../../src/Core/Prefab/GlobeView.js"],"names":["createGlobeLayer","THREE","GLOBE_VIEW_EVENTS","GLOBE_INITIALIZED","LAYER_ADDED","LAYER_REMOVED","COLOR_LAYERS_ORDER_CHANGED","id","options","_commonAncestorLookup","a","b","undefined","level","parent","wgs84TileLayer","object3d","Group","schemeTile","extent","clone","i","length","union","preUpdate","context","layer","changeSources","has","size","level0Nodes","commonAncestor","values","source","isCamera","material","update","node","hasEnoughTexturesToSubdivide","maxSubdivisionLevel","sseSubdivisionThreshold","builder","onTileCreated","setLightingOn","lighting","enable","uniforms","lightPosition","value","position","noTextureColor","copy","type","protocol","visible","x","y","z","GlobeView","viewerDiv","coordCarto","Object3D","DefaultUp","set","call","positionCamera","EPSG_4326","longitude","latitude","altitude","camera","setPosition","camera3D","lookAt","near","Math","max","far","updateProjectionMatrix","updateMatrixWorld","sun","DirectionalLight","add","addLayer","atmosphere","atmosphereLayer","mainLoop","gfxEngine","getUniqueThreejsLayer","traverse","obj","layers","positionTargetCamera","setAltitude","noControls","as","xyz","controls","handleCollision","_renderState","FINAL","_fullSizeDepthBuffer","renderer","preRender","v","Vector3","setFromMatrixPosition","matrixWorld","len","distanceTo","setFromMatrixScale","lim","fogDistance","pow","t","cos","PI","color","Color","setClearColor","multiplyScalar","getClearAlpha","fn","removeEventListener","dispatchEvent","addEventListener","notifyChange","prototype","constructor","colorLayerCount","getLayers","l","sequence","reprojection","tileMatrixSet","Error","layerId","layerPromise","removeLayer","detach","cO","object","removeColorLayer","root","imageryLayers","selectNodeAt","mouse","selectedId","screenCoordsToNodeId","n","setSelected","console","info","dim","getWindowSize","Vector2","floor","previousRenderState","changeRenderState","ID","prev","mask","threejsLayer","buffer","renderViewTobuffer","fullSizeRenderTarget","depthRGBA","Vector4","fromArray","divideScalar","unpack","round","readDepthBuffer","width","height","g","DEPTH","matrix","Matrix4","screen","pickWorldPosition","ray","Ray","direction","getPickingPositionFromDepth","viewPaused","scheduler","commandsWaitingExecutionCount","renderingState","slice","origin","multiplyMatrices","getInverse","projectionMatrix","applyMatrix4","sub","angle","angleTo","orthoZ","depthBufferRGBAValueToOrthoZ","addVectors","setLength","newRenderState","changeStateFunction","object3D","changeState","traverseVisible","setRealisticLightingOn","coSun","getSunPositionInScene","Date","getTime","normalize","lightingPos","setRealisticOn","updateLightingPos","updateMaterialUniform","setLightingPos","pos","ellipsoid","uniformName"],"mappings":";;;;;;;;;;;;;;;QA2EgBA,gB,GAAAA,gB;;AA3EhB;;IAAYC,K;;AAEZ;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AAEA;;AAEA;;;;AACA;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;AAEA;;;;;;AAMA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;AAQO,IAAMC,gDAAoB;AAC7BC,uBAAmB,aADU;AAE7BC,iBAAa,aAFgB;AAG7BC,mBAAe,eAHc;AAI7BC;AAJ6B,CAA1B;;AAQA,SAASN,gBAAT,CAA0BO,EAA1B,EAA8BC,OAA9B,EAAuC;;AAe1C,aAASC,qBAAT,CAA+BC,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,YAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;AACV,mBAAOC,SAAP;AACH;AACD,YAAIF,EAAEG,KAAF,IAAWF,EAAEE,KAAjB,EAAwB;AACpB,gBAAIH,EAAEH,EAAF,IAAQI,EAAEJ,EAAd,EAAkB;AACd,uBAAOG,CAAP;AACH,aAFD,MAEO,IAAIA,EAAEG,KAAF,IAAW,CAAf,EAAkB;AACrB,uBAAOJ,sBAAsBC,EAAEI,MAAxB,EAAgCH,EAAEG,MAAlC,CAAP;AACH,aAFM,MAEA;AACH,uBAAOF,SAAP;AACH;AACJ,SARD,MAQO,IAAIF,EAAEG,KAAF,GAAUF,EAAEE,KAAhB,EAAuB;AAC1B,mBAAOJ,sBAAsBC,CAAtB,EAAyBC,EAAEG,MAA3B,CAAP;AACH,SAFM,MAEA;AACH,mBAAOL,sBAAsBC,EAAEI,MAAxB,EAAgCH,CAAhC,CAAP;AACH;AACJ;AA/BD;;;AAiCA,QAAMI,iBAAiB,yBAAkBR,EAAlB,EAAsBC,QAAQQ,QAAR,IAAoB,IAAIf,MAAMgB,KAAV,EAA1C,CAAvB;AACAF,mBAAeG,UAAf,GAA4B,oFAA5B;AACAH,mBAAeI,MAAf,GAAwBJ,eAAeG,UAAf,CAA0B,CAA1B,EAA6BE,KAA7B,EAAxB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,eAAeG,UAAf,CAA0BI,MAA9C,EAAsDD,GAAtD,EAA2D;AACvDN,uBAAeI,MAAf,CAAsBI,KAAtB,CAA4BR,eAAeG,UAAf,CAA0BG,CAA1B,CAA5B;AACH;AACDN,mBAAeS,SAAf,GAA2B,UAACC,OAAD,EAAUC,KAAV,EAAiBC,aAAjB,EAAmC;AAC1D,qCAAmBH,SAAnB,CAA6BC,OAA7B,EAAsCC,KAAtC;;AAMA,iDAAeD,OAAf,EAAwBC,KAAxB;AACA,YAAIC,cAAcC,GAAd,CAAkBhB,SAAlB,KAAgCe,cAAcE,IAAd,IAAsB,CAA1D,EAA6D;AACzD,mBAAOH,MAAMI,WAAb;AACH;AACD,YAAIC,uBAAJ;AAX0D;AAAA;AAAA;;AAAA;AAY1D,4DAAqBJ,cAAcK,MAAd,EAArB,4GAA6C;AAAA,oBAAlCC,MAAkC;;AACzC,oBAAIA,OAAOC,QAAX,EAAqB;AACjB;AACA;AACA;AACA,2BAAOR,MAAMI,WAAb;AACH;AACD,oBAAIG,OAAOP,KAAP,KAAiBA,MAAMnB,EAA3B,EAA+B;AAC3B,wBAAI,CAACwB,cAAL,EAAqB;AACjBA,yCAAiBE,MAAjB;AACH,qBAFD,MAEO;AACHF,yCAAiBtB,sBAAsBsB,cAAtB,EAAsCE,MAAtC,CAAjB;AACA,4BAAI,CAACF,cAAL,EAAqB;AACjB,mCAAOL,MAAMI,WAAb;AACH;AACJ;AACD,wBAAIC,eAAeI,QAAf,IAA2B,IAA/B,EAAqC;AACjCJ,yCAAiBnB,SAAjB;AACH;AACJ;AACJ;AAhCyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiC1D,YAAImB,cAAJ,EAAoB;AAIhB,mBAAO,CAACA,cAAD,CAAP;AACH,SALD,MAKO;AACH,mBAAOL,MAAMI,WAAb;AACH;AACJ,KAzCD;;AAkDAf,mBAAeqB,MAAf,GAAwB,mDAAyB,uCAAa,CAAb,CAAzB,EAPxB,UAAqBX,OAArB,EAA8BC,KAA9B,EAAqCW,IAArC,EAA2C;AACvC,YAAI,6BAAmBC,4BAAnB,CAAgDb,OAAhD,EAAyDC,KAAzD,EAAgEW,IAAhE,CAAJ,EAA2E;AACvE,mBAAO,kDAAwB,CAAxB,EAA2B7B,QAAQ+B,mBAAR,IAA+B,EAA1D,EAA8D/B,QAAQgC,uBAAR,IAAmC,GAAjG,EAAsGf,OAAtG,EAA+GC,KAA/G,EAAsHW,IAAtH,CAAP;AACH;AACD,eAAO,KAAP;AACH,KAEuB,CAAxB;AACAtB,mBAAe0B,OAAf,GAAyB,oCAAzB;AACA1B,mBAAe2B,aAAf,GA1FmB,UAAoBhB,KAApB,EAA2BZ,MAA3B,EAAmCuB,IAAnC,EAAyC;AACxDA,aAAKF,QAAL,CAAcQ,aAAd,CAA4BjB,MAAMkB,QAAN,CAAeC,MAA3C;AACAR,aAAKF,QAAL,CAAcW,QAAd,CAAuBC,aAAvB,CAAqCC,KAArC,GAA6CtB,MAAMkB,QAAN,CAAeK,QAA5D;AACA,YAAIvB,MAAMwB,cAAV,EAA0B;AACtBb,iBAAKF,QAAL,CAAcW,QAAd,CAAuBI,cAAvB,CAAsCF,KAAtC,CAA4CG,IAA5C,CAAiDzB,MAAMwB,cAAvD;AACH;AAMJ,KA+ED;AACAnC,mBAAeqC,IAAf,GAAsB,UAAtB;AACArC,mBAAesC,QAAf,GAA0B,MAA1B;AACAtC,mBAAeuC,OAAf,GAAyB,IAAzB;AACAvC,mBAAe6B,QAAf,GAA0B;AACtBC,gBAAQ,KADc;AAEtBI,kBAAU,EAAEM,GAAG,CAAC,GAAN,EAAWC,GAAG,GAAd,EAAmBC,GAAG,GAAtB;AAFY,KAA1B;AAIA,WAAO1C,cAAP;AACH;;AAED;;;;;;;;;;;;AAYA,SAAS2C,SAAT,CAAmBC,SAAnB,EAA8BC,UAA9B,EAAwD;AAAA;;AAAA,QAAdpD,OAAc,uEAAJ,EAAI;;AACpDP,UAAM4D,QAAN,CAAeC,SAAf,CAAyBC,GAAzB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC;AACA,QAAMlC,OAAO,mCAAiB0B,CAA9B;AACA;AACA,mBAAKS,IAAL,CAAU,IAAV,EAAgB,WAAhB,EAA6BL,SAA7B,EAAwCnD,OAAxC;;AAEA;AACA,QAAMyD,iBAAiB,IAAI,eAAEC,SAAN,CACnBN,WAAWO,SADQ,EAEnBP,WAAWQ,QAFQ,EAGnBR,WAAWS,QAHQ,CAAvB;;AAKA,SAAKC,MAAL,CAAYC,WAAZ,CAAwBN,cAAxB;AACA,SAAKK,MAAL,CAAYE,QAAZ,CAAqBC,MAArB,CAA4B,EAAElB,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAcC,GAAG,CAAjB,EAA5B;AACA,SAAKa,MAAL,CAAYE,QAAZ,CAAqBE,IAArB,GAA4BC,KAAKC,GAAL,CAAS,IAAT,EAAe,cAAc/C,IAA7B,CAA5B;AACA,SAAKyC,MAAL,CAAYE,QAAZ,CAAqBK,GAArB,GAA2BhD,OAAO,EAAlC;AACA,SAAKyC,MAAL,CAAYE,QAAZ,CAAqBM,sBAArB;AACA,SAAKR,MAAL,CAAYE,QAAZ,CAAqBO,iBAArB,CAAuC,IAAvC;;AAEA,QAAMhE,iBAAiBf,iBAAiB,OAAjB,EAA0BQ,OAA1B,CAAvB;;AAEA,QAAMwE,MAAM,IAAI/E,MAAMgF,gBAAV,EAAZ;AACAD,QAAI/B,QAAJ,CAAac,GAAb,CAAiB,CAAC,GAAlB,EAAuB,CAAvB,EAA0B,CAA1B;AACAiB,QAAID,iBAAJ,CAAsB,IAAtB;AACAhE,mBAAeC,QAAf,CAAwBkE,GAAxB,CAA4BF,GAA5B;;AAEA,SAAKG,QAAL,CAAcpE,cAAd;;AAEA;AACA,SAAKqE,UAAL,GAAkB,0BAAlB;;AAEA,QAAMC,kBAAkB,KAAKC,QAAL,CAAcC,SAAd,CAAwBC,qBAAxB,EAAxB;AACA,SAAKJ,UAAL,CAAgBK,QAAhB,CAAyB,UAACC,GAAD,EAAS;AAAEA,YAAIC,MAAJ,CAAW5B,GAAX,CAAesB,eAAf;AAAkC,KAAtE;AACA,SAAKf,MAAL,CAAYE,QAAZ,CAAqBmB,MAArB,CAA4B9C,MAA5B,CAAmCwC,eAAnC;;AAEAtE,mBAAeC,QAAf,CAAwBkE,GAAxB,CAA4B,KAAKE,UAAjC;AACA,SAAKA,UAAL,CAAgBL,iBAAhB,CAAkC,IAAlC;;AAGA;AACA,QAAMa,uBAAuB3B,eAAe7C,KAAf,EAA7B;AACAwE,yBAAqBC,WAArB,CAAiC,CAAjC;;AAEA,QAAIrF,QAAQsF,UAAZ,EAAwB;AACpB,aAAKxB,MAAL,CAAYE,QAAZ,CAAqBC,MAArB,CAA4BmB,qBAAqBG,EAArB,CAAwB,WAAxB,EAAqCC,GAArC,EAA5B;AACH,KAFD,MAEO;AACH,aAAKC,QAAL,GAAgB,4BAAkB,IAAlB,EAAwBL,qBAAqBG,EAArB,CAAwB,WAAxB,EAAqCC,GAArC,EAAxB,EAAoEnE,IAApE,CAAhB;AACA,aAAKoE,QAAL,CAAcC,eAAd,GAAgC,OAAQ1F,QAAQ0F,eAAhB,KAAqC,WAArC,GAAmD1F,QAAQ0F,eAA3D,GAA6E,IAA7G;AACH;;AAGD,SAAKC,YAAL,GAAoB,2BAAiBC,KAArC;AACA,SAAKC,oBAAL,GAA4B,IAA5B;;AAEA,QAAMC,WAAW,KAAKhB,QAAL,CAAcC,SAAd,CAAwBe,QAAzC;AACA,SAAKC,SAAL,GAAiB,YAAM;AACnB;AACA;AACA;AACA,YAAI,MAAKF,oBAAL,IAA6B,IAAjC,EAAuC;AACnC;AACA,kBAAKA,oBAAL,GAA4B,IAA5B;AACH;AACD,YAAMG,IAAI,IAAIvG,MAAMwG,OAAV,EAAV;AACAD,UAAEE,qBAAF,CAAwB3F,eAAeC,QAAf,CAAwB2F,WAAhD;AACA,YAAIC,MAAMJ,EAAEK,UAAF,CAAa,MAAKvC,MAAL,CAAYE,QAAZ,CAAqBvB,QAAlC,CAAV;AACAuD,UAAEM,kBAAF,CAAqB/F,eAAeC,QAAf,CAAwB2F,WAA7C;AACA,YAAII,MAAMP,EAAEjD,CAAF,GAAM1B,IAAN,GAAa,GAAvB;;AAEA;AACA;AACA;AACA,cAAKmF,WAAL,GAtBiBnF,OAAO,KAsBL,GAAe8C,KAAKsC,GAAL,CAAS,CAACL,MAAM/E,OAAO,IAAd,IAAsB,IAAtB,GAA6BA,IAAtC,EAA4C,GAA5C,CAAlC;;AAEA,YAAI+E,MAAMG,GAAV,EAAe;AACX,gBAAIG,IAAIvC,KAAKsC,GAAL,CAAStC,KAAKwC,GAAL,CAAS,CAACJ,MAAMH,GAAP,KAAeG,MAAMP,EAAEjD,CAAF,GAAM1B,IAAN,GAAa,MAAlC,IAA4C8C,KAAKyC,EAAjD,GAAsD,GAA/D,CAAT,EAA8E,GAA9E,CAAR;AACA,gBAAIC,QAAQ,IAAIpH,MAAMqH,KAAV,CAAgB,QAAhB,CAAZ;AACAhB,qBAASiB,aAAT,CAAuBF,MAAMG,cAAN,CAAqB,MAAMN,CAA3B,CAAvB,EAAsDZ,SAASmB,aAAT,EAAtD;AACH,SAJD,MAIO,IAAIb,OAAOG,GAAX,EAAgB;AACnBT,qBAASiB,aAAT,CAAuB,QAAvB,EAAiCjB,SAASmB,aAAT,EAAjC;AACH;AACJ,KA1BD;;AA4BA,SAAK1G,cAAL,GAAsBA,cAAtB;;AAEA,QAAM2G,KAAK,YAAM;AACb,cAAKpC,QAAL,CAAcqC,mBAAd,CAAkC,qBAAlC,EAAyDD,EAAzD;AACA,cAAKE,aAAL,CAAmB,EAAExE,MAAMlD,kBAAkBC,iBAA1B,EAAnB;AACH,KAHD;;AAKA,SAAKmF,QAAL,CAAcuC,gBAAd,CAA+B,qBAA/B,EAAsDH,EAAtD;;AAEA,SAAKI,YAAL,CAAkB,IAAlB;AACH;;AAEDpE,UAAUqE,SAAV,GAAsB,sBAAc,eAAKA,SAAnB,CAAtB;AACArE,UAAUqE,SAAV,CAAoBC,WAApB,GAAkCtE,SAAlC;;AAEAA,UAAUqE,SAAV,CAAoB5C,QAApB,GAA+B,UAAkBzD,KAAlB,EAAyB;AACpD,QAAIA,MAAM0B,IAAN,IAAc,OAAlB,EAA2B;AACvB,YAAM6E,kBAAkB,KAAKC,SAAL,CAAe;AAAA,mBAAKC,EAAE/E,IAAF,KAAW,OAAhB;AAAA,SAAf,EAAwC9B,MAAhE;AACAI,cAAM0G,QAAN,GAAiBH,eAAjB;AACAvG,cAAMU,MAAN;AACA,YAAIV,MAAM2B,QAAN,KAAmB,YAAvB,EAAqC;AACjC3B,kBAAM2G,YAAN,GAAqB,WAArB;AACH;AACJ,KAPD,MAOO,IAAI3G,MAAM0B,IAAN,IAAc,WAAlB,EAA+B;AAClC,YAAI1B,MAAM2B,QAAN,KAAmB,MAAnB,IAA6B3B,MAAMlB,OAAN,CAAc8H,aAAd,KAAgC,QAAjE,EAA2E;AACvE,kBAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACH;AACD7G,cAAMU,MAAN;AACH;AACD,QAAMoG,UAAU9G,MAAMnB,EAAtB;AACA,QAAMkI,eAAe,eAAKV,SAAL,CAAe5C,QAAf,CAAwBnB,IAAxB,CAA6B,IAA7B,EAAmCtC,KAAnC,EAA0C,KAAKX,cAA/C,CAArB;;AAEA,SAAK6G,aAAL,CAAmB;AACfxE,cAAMlD,kBAAkBE,WADT;AAEfoI;AAFe,KAAnB;;AAKA,WAAOC,YAAP;AACH,CAvBD;;AAyBA;;;;;;;AAOA/E,UAAUqE,SAAV,CAAoBW,WAApB,GAAkC,UAA4BF,OAA5B,EAAqC;AACnE,QAAM9G,QAAQ,KAAKwG,SAAL,CAAe;AAAA,eAAKC,EAAE5H,EAAF,KAASiI,OAAd;AAAA,KAAf,EAAsC,CAAtC,CAAd;AACA,QAAI9G,SAASA,MAAM0B,IAAN,KAAe,OAAxB,IAAmC,KAAKrC,cAAL,CAAoB4H,MAApB,CAA2BjH,KAA3B,CAAvC,EAA0E;AACtE,YAAIkH,KAAK,UAAYC,MAAZ,EAAoB;AACzB,gBAAIA,OAAOC,gBAAX,EAA6B;AACzBD,uBAAOC,gBAAP,CAAwBN,OAAxB;AACH;AACJ,SAJD;;AADsE;AAAA;AAAA;;AAAA;AAOtE,6DAAmB,KAAKzH,cAAL,CAAoBe,WAAvC,iHAAoD;AAAA,oBAAzCiH,IAAyC;;AAChDA,qBAAKtD,QAAL,CAAcmD,EAAd;AACH;AATqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUtE,YAAMI,gBAAgB,KAAKd,SAAL,CAAe;AAAA,mBAAKC,EAAE/E,IAAF,KAAW,OAAhB;AAAA,SAAf,CAAtB;AAVsE;AAAA;AAAA;;AAAA;AAWtE,6DAAoB4F,aAApB,iHAAmC;AAAA,oBAAxB3B,KAAwB;;AAC/B,oBAAIA,MAAMe,QAAN,GAAiB1G,MAAM0G,QAA3B,EAAqC;AACjCf,0BAAMe,QAAN;AACH;AACJ;AAfqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBtE,aAAKN,YAAL,CAAkB,IAAlB;AACA,aAAKF,aAAL,CAAmB;AACfxE,kBAAMlD,kBAAkBG,aADT;AAEfmI;AAFe,SAAnB;;AAKA,eAAO,IAAP;AACH,KAxBD,MAwBO;AACH,cAAM,IAAID,KAAJ,CAAaC,OAAb,yBAAN;AACH;AACJ,CA7BD;;AA+BA9E,UAAUqE,SAAV,CAAoBkB,YAApB,GAAmC,UAAsBC,KAAtB,EAA6B;AAC5D;AACA,QAAMC,aAAa,KAAKC,oBAAL,CAA0BF,KAA1B,CAAnB;;AAF4D;AAAA;AAAA;;AAAA;AAI5D,yDAAgB,KAAKnI,cAAL,CAAoBe,WAApC,iHAAiD;AAAA,gBAAtCuH,CAAsC;;AAC7CA,cAAE5D,QAAF,CAAW,UAACpD,IAAD,EAAU;AACjB;AACA,oBAAIA,KAAKiH,WAAT,EAAsB;AAClBjH,yBAAKiH,WAAL,CAAiBjH,KAAK9B,EAAL,KAAY4I,UAA7B;;AAEA,wBAAI9G,KAAK9B,EAAL,KAAY4I,UAAhB,EAA4B;AACxB;AACAI,gCAAQC,IAAR,CAAanH,IAAb;AACH;AACJ;AACJ,aAVD;AAWH;AAhB2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkB5D,SAAKyF,YAAL,CAAkB,IAAlB;AACH,CAnBD;;AAqBApE,UAAUqE,SAAV,CAAoBqB,oBAApB,GAA2C,UAA8BF,KAA9B,EAAqC;AAC5E,QAAMO,MAAM,KAAKnE,QAAL,CAAcC,SAAd,CAAwBmE,aAAxB,EAAZ;;AAEAR,YAAQA,SAAS,IAAIjJ,MAAM0J,OAAV,CAAkBhF,KAAKiF,KAAL,CAAWH,IAAIlG,CAAJ,GAAQ,CAAnB,CAAlB,EAAyCoB,KAAKiF,KAAL,CAAWH,IAAIjG,CAAJ,GAAQ,CAAnB,CAAzC,CAAjB;;AAEA,QAAMqG,sBAAsB,KAAK1D,YAAjC;AACA,SAAK2D,iBAAL,CAAuB,2BAAiBC,EAAxC;;AAEA;AACA,QAAMC,OAAO,KAAK1F,MAAL,CAAYE,QAAZ,CAAqBmB,MAArB,CAA4BsE,IAAzC;AACA,SAAK3F,MAAL,CAAYE,QAAZ,CAAqBmB,MAArB,CAA4BsE,IAA5B,GAAmC,KAAK,KAAKlJ,cAAL,CAAoBmJ,YAA5D;;AAEA,QAAIC,SAAS,KAAK7E,QAAL,CAAcC,SAAd,CAAwB6E,kBAAxB,CACT,IADS,EAET,KAAK9E,QAAL,CAAcC,SAAd,CAAwB8E,oBAFf,EAGTnB,MAAM3F,CAHG,EAGAkG,IAAIjG,CAAJ,GAAQ0F,MAAM1F,CAHd,EAIT,CAJS,EAIN,CAJM,CAAb;;AAMA,SAAKsG,iBAAL,CAAuBD,mBAAvB;AACA,SAAKvF,MAAL,CAAYE,QAAZ,CAAqBmB,MAArB,CAA4BsE,IAA5B,GAAmCD,IAAnC;;AAEA,QAAIM,YAAY,IAAIrK,MAAMsK,OAAV,GAAoBC,SAApB,CAA8BL,MAA9B,EAAsCM,YAAtC,CAAmD,KAAnD,CAAhB;;AAEA;AACA,QAAIC,SAAS,+BAASJ,SAAT,EAAoB3F,KAAKsC,GAAL,CAAS,GAAT,EAAc,CAAd,CAApB,CAAb;;AAEA,WAAOtC,KAAKgG,KAAL,CAAWD,MAAX,CAAP;AACH,CA3BD;;AA6BAhH,UAAUqE,SAAV,CAAoB6C,eAApB,GAAsC,UAAyBrH,CAAzB,EAA4BC,CAA5B,EAA+BqH,KAA/B,EAAsCC,MAAtC,EAA8C;AAChF,QAAMC,IAAI,KAAKzF,QAAL,CAAcC,SAAxB;AACA,QAAMsE,sBAAsB,KAAK1D,YAAjC;AACA,SAAK2D,iBAAL,CAAuB,2BAAiBkB,KAAxC;AACA,QAAMb,SAASY,EAAEX,kBAAF,CAAqB,IAArB,EAA2BW,EAAEV,oBAA7B,EAAmD9G,CAAnD,EAAsDC,CAAtD,EAAyDqH,KAAzD,EAAgEC,MAAhE,CAAf;AACA,SAAKhB,iBAAL,CAAuBD,mBAAvB;AACA,WAAOM,MAAP;AACH,CAPD;;AASA,IAAMc,SAAS,IAAIhL,MAAMiL,OAAV,EAAf;AACA,IAAMC,SAAS,IAAIlL,MAAM0J,OAAV,EAAf;AACA,IAAMyB,oBAAoB,IAAInL,MAAMwG,OAAV,EAA1B;AACA,IAAM4E,MAAM,IAAIpL,MAAMqL,GAAV,EAAZ;AACA,IAAMC,YAAY,IAAItL,MAAMwG,OAAV,EAAlB;AACA/C,UAAUqE,SAAV,CAAoByD,2BAApB,GAAkD,UAAqCtC,KAArC,EAA4C;AAC1F,QAAMf,IAAI,KAAK7C,QAAf;AACA,QAAMmG,aAAatD,EAAEuD,SAAF,CAAYC,6BAAZ,MAA+C,CAA/C,IAAoDxD,EAAEyD,cAAF,8BAAvE;AACA,QAAMb,IAAI5C,EAAE5C,SAAZ;AACA,QAAMkE,MAAMsB,EAAErB,aAAF,EAAZ;AACA,QAAMpF,SAAS,KAAKA,MAAL,CAAYE,QAA3B;;AAEA0E,YAAQA,SAASO,IAAIrI,KAAJ,GAAYoG,cAAZ,CAA2B,GAA3B,CAAjB;AACA0B,UAAM3F,CAAN,GAAUoB,KAAKiF,KAAL,CAAWV,MAAM3F,CAAjB,CAAV;AACA2F,UAAM1F,CAAN,GAAUmB,KAAKiF,KAAL,CAAWV,MAAM1F,CAAjB,CAAV;;AAEA,QAAMwG,OAAO1F,OAAOqB,MAAP,CAAcsE,IAA3B;AACA3F,WAAOqB,MAAP,CAAcsE,IAAd,GAAqB,KAAK,KAAKlJ,cAAL,CAAoBmJ,YAA9C;;AAEA;AACA,QAAIC,eAAJ;AACA,QAAIsB,UAAJ,EAAgB;AACZ,aAAKpF,oBAAL,GAA4B,KAAKA,oBAAL,IAA6B,KAAKuE,eAAL,CAAqB,CAArB,EAAwB,CAAxB,EAA2BnB,IAAIlG,CAA/B,EAAkCkG,IAAIjG,CAAtC,CAAzD;AACA,YAAMjD,KAAK,CAAC,CAACkJ,IAAIjG,CAAJ,GAAQ0F,MAAM1F,CAAd,GAAkB,CAAnB,IAAwBiG,IAAIlG,CAA5B,GAAgC2F,MAAM3F,CAAvC,IAA4C,CAAvD;AACA4G,iBAAS,KAAK9D,oBAAL,CAA0BwF,KAA1B,CAAgCtL,EAAhC,EAAoCA,KAAK,CAAzC,CAAT;AACH,KAJD,MAIO;AACH4J,iBAAS,KAAKS,eAAL,CAAqB1B,MAAM3F,CAA3B,EAA8BkG,IAAIjG,CAAJ,GAAQ0F,MAAM1F,CAAd,GAAkB,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,CAAT;AACH;;AAED2H,WAAO5H,CAAP,GAAY2F,MAAM3F,CAAN,GAAUkG,IAAIlG,CAAf,GAAoB,CAApB,GAAwB,CAAnC;AACA4H,WAAO3H,CAAP,GAAW,EAAE0F,MAAM1F,CAAN,GAAUiG,IAAIjG,CAAhB,IAAqB,CAArB,GAAyB,CAApC;;AAEA;AACA6H,QAAIS,MAAJ,CAAW3I,IAAX,CAAgBmB,OAAOrB,QAAvB;;AAEA;AACAoI,QAAIE,SAAJ,CAAcxH,GAAd,CAAkBoH,OAAO5H,CAAzB,EAA4B4H,OAAO3H,CAAnC,EAAsC,GAAtC;AACA;AACAyH,WAAOc,gBAAP,CAAwBzH,OAAOqC,WAA/B,EAA4CsE,OAAOe,UAAP,CAAkB1H,OAAO2H,gBAAzB,CAA5C;AACAZ,QAAIE,SAAJ,CAAcW,YAAd,CAA2BjB,MAA3B;AACAI,QAAIE,SAAJ,CAAcY,GAAd,CAAkBd,IAAIS,MAAtB;;AAEAP,cAAUxH,GAAV,CAAc,CAAd,EAAiB,CAAjB,EAAoB,GAApB;AACAwH,cAAUW,YAAV,CAAuBjB,MAAvB;AACAM,cAAUY,GAAV,CAAcd,IAAIS,MAAlB;;AAEA,QAAMM,QAAQb,UAAUc,OAAV,CAAkBhB,IAAIE,SAAtB,CAAd;AACA,QAAMe,SAASvB,EAAEwB,4BAAF,CAA+BpC,MAA/B,EAAuC7F,MAAvC,CAAf;AACA,QAAMhD,SAASgL,SAAS3H,KAAKwC,GAAL,CAASiF,KAAT,CAAxB;;AAEAhB,sBAAkBoB,UAAlB,CAA6BlI,OAAOrB,QAApC,EAA8CoI,IAAIE,SAAJ,CAAckB,SAAd,CAAwBnL,MAAxB,CAA9C;;AAEAgD,WAAOqB,MAAP,CAAcsE,IAAd,GAAqBD,IAArB;;AAEA,QAAIoB,kBAAkB9J,MAAlB,KAA6B,QAAjC,EACI;AAAE,eAAOV,SAAP;AAAmB;;AAEzB,WAAOwK,iBAAP;AACH,CArDD;;AAuDA1H,UAAUqE,SAAV,CAAoB+B,iBAApB,GAAwC,UAA2B4C,cAA3B,EAA2C;AAC/E,QAAI,KAAKvG,YAAL,IAAqBuG,cAArB,IAAuC,CAAC,KAAK3L,cAAL,CAAoBe,WAAhE,EAA6E;AACzE;AACH;;AAED;AACA,QAAI6K,sBAAuB,YAAoC;AAC3D,eAAO,UAA6BC,QAA7B,EAAuC;AAC1C,gBAAIA,SAASC,WAAb,EAA0B;AACtBD,yBAASC,WAAT,CAAqBH,cAArB;AACH;AACJ,SAJD;AAKH,KAN0B,EAA3B;;AAN+E;AAAA;AAAA;;AAAA;AAc/E,yDAAgB,KAAK3L,cAAL,CAAoBe,WAApC,iHAAiD;AAAA,gBAAtCuH,CAAsC;;AAC7CA,cAAEyD,eAAF,CAAkBH,mBAAlB;AACH;AAhB8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiB/E,SAAKxG,YAAL,GAAoBuG,cAApB;AACH,CAlBD;;AAoBAhJ,UAAUqE,SAAV,CAAoBgF,sBAApB,GAA6C,UAAgC/J,KAAhC,EAAuC;AAChF,QAAMgK,QAAQ,qBAAWC,qBAAX,CAAiC,IAAIC,IAAJ,GAAWC,OAAX,EAAjC,EAAuD,KAAvD,EAA8D,IAA9D,EAAoEC,SAApE,EAAd;;AAEA,SAAKC,WAAL,GAAmBL,MAAMI,SAAN,EAAnB;;AAEA,QAAMxK,WAAW,KAAK7B,cAAL,CAAoB6B,QAArC;AACAA,aAASC,MAAT,GAAkBG,KAAlB;AACAJ,aAASK,QAAT,GAAoB+J,KAApB;;AAEA,SAAK5H,UAAL,CAAgBkI,cAAhB,CAA+BtK,KAA/B;AACA,SAAKoC,UAAL,CAAgBmI,iBAAhB,CAAkCP,KAAlC;;AAEA,SAAKQ,qBAAL,CAA2B,iBAA3B,EAA8CxK,KAA9C;AACA,SAAKwK,qBAAL,CAA2B,eAA3B,EAA4CR,KAA5C;AACA,SAAKlF,YAAL,CAAkB,IAAlB;AACH,CAfD;;AAiBApE,UAAUqE,SAAV,CAAoB0F,cAApB,GAAqC,UAAwBC,GAAxB,EAA6B;AAC9D,QAAML,cAAcK,OAAO,qBAAWT,qBAAX,CAAiC,KAAKU,SAAtC,EAAiD,IAAIT,IAAJ,GAAWC,OAAX,EAAjD,EAAuE,KAAvE,EAA8E,IAA9E,CAA3B;;AAEA,SAAKK,qBAAL,CAA2B,eAA3B,EAA4CH,YAAYjM,KAAZ,GAAoBgM,SAApB,EAA5C;AACA,SAAKtF,YAAL,CAAkB,IAAlB;AACH,CALD;;AAOApE,UAAUqE,SAAV,CAAoByF,qBAApB,GAA4C,UAA+BI,WAA/B,EAA4C5K,KAA5C,EAAmD;AAAA;AAAA;AAAA;;AAAA;AAC3F,yDAAgB,KAAKjC,cAAL,CAAoBe,WAApC,iHAAiD;AAAA,gBAAtCuH,CAAsC;;AAC7CA,cAAE5D,QAAF,CAAW,UAACC,GAAD,EAAS;AAChB,oBAAI,CAACA,IAAIvD,QAAL,IAAiB,CAACuD,IAAIvD,QAAJ,CAAaW,QAAnC,EAA6C;AACzC;AACH;AACD,oBAAI8K,eAAelI,IAAIvD,QAAJ,CAAaW,QAAhC,EAA0C;AACtC4C,wBAAIvD,QAAJ,CAAaW,QAAb,CAAsB8K,WAAtB,EAAmC5K,KAAnC,GAA2CA,KAA3C;AACH;AACJ,aAPD;AAQH;AAV0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW9F,CAXD;;kBAaeU,S","file":"GlobeView.js","sourcesContent":["import * as THREE from 'three';\n\nimport View from '../View';\nimport { RENDERING_PAUSED } from '../MainLoop';\nimport { COLOR_LAYERS_ORDER_CHANGED } from '../../Renderer/ColorLayersOrdering';\nimport RendererConstant from '../../Renderer/RendererConstant';\nimport GlobeControls from '../../Renderer/ThreeExtended/GlobeControls';\nimport { unpack1K } from '../../Renderer/LayeredMaterial';\n\nimport { GeometryLayer } from '../Layer/Layer';\n\nimport Atmosphere from './Globe/Atmosphere';\nimport CoordStars from '../Geographic/CoordStars';\n\nimport { C, ellipsoidSizes } from '../Geographic/Coordinates';\nimport { processTiledGeometryNode } from '../../Process/TiledNodeProcessing';\nimport { updateLayeredMaterialNodeImagery, updateLayeredMaterialNodeElevation } from '../../Process/LayeredMaterialNodeProcessing';\nimport { globeCulling, preGlobeUpdate, globeSubdivisionControl, globeSchemeTileWMTS, globeSchemeTile1 } from '../../Process/GlobeTileProcessing';\nimport BuilderEllipsoidTile from './Globe/BuilderEllipsoidTile';\nimport SubdivisionControl from '../../Process/SubdivisionControl';\n\n/**\n * Fires when the view is completely loaded. Controls and view's functions can be called then.\n * @event GlobeView#initialized\n * @property target {view} dispatched on view\n * @property type {string} initialized\n */\n/**\n * Fires when a layer is added\n * @event GlobeView#layer-added\n * @property layerId {string} the id of the layer\n * @property target {view} dispatched on view\n * @property type {string} layers-added\n */\n/**\n * Fires when a layer is removed\n * @event GlobeView#layer-removed\n * @property layerId {string} the id of the layer\n * @property target {view} dispatched on view\n * @property type {string} layers-added\n */\n/**\n * Fires when the layers oder has changed\n * @event GlobeView#layers-order-changed\n * @property new {object}\n * @property new.sequence {array}\n * @property new.sequence.0 {number} the new layer at position 0\n * @property new.sequence.1 {number} the new layer at position 1\n * @property new.sequence.2 {number} the new layer at position 2\n * @property previous {object}\n * @property previous.sequence {array}\n * @property previous.sequence.0 {number} the previous layer at position 0\n * @property previous.sequence.1 {number} the previous layer at position 1\n * @property previous.sequence.2 {number} the previous layer at position 2\n * @property target {view} dispatched on view\n * @property type {string} layers-order-changed\n */\n\n\n/**\n * Globe's EVENT\n * @property GLOBE_INITIALIZED {string} emit one time when globe is initialized\n * @property LAYER_ADDED {string} emit when layer id added in viewer\n * @property LAYER_REMOVED {string} emit when layer id removed in viewer\n * @property COLOR_LAYERS_ORDER_CHANGED {string} emit when  color layers order change\n */\n\nexport const GLOBE_VIEW_EVENTS = {\n    GLOBE_INITIALIZED: 'initialized',\n    LAYER_ADDED: 'layer-added',\n    LAYER_REMOVED: 'layer-removed',\n    COLOR_LAYERS_ORDER_CHANGED,\n};\n\n\nexport function createGlobeLayer(id, options) {\n    // Configure tiles\n    const nodeInitFn = function nodeInitFn(layer, parent, node) {\n        node.material.setLightingOn(layer.lighting.enable);\n        node.material.uniforms.lightPosition.value = layer.lighting.position;\n        if (layer.noTextureColor) {\n            node.material.uniforms.noTextureColor.value.copy(layer.noTextureColor);\n        }\n\n        if (__DEBUG__) {\n            node.material.uniforms.showOutline = { value: layer.showOutline || false };\n            node.material.wireframe = layer.wireframe || false;\n        }\n    };\n\n    function _commonAncestorLookup(a, b) {\n        if (!a || !b) {\n            return undefined;\n        }\n        if (a.level == b.level) {\n            if (a.id == b.id) {\n                return a;\n            } else if (a.level != 0) {\n                return _commonAncestorLookup(a.parent, b.parent);\n            } else {\n                return undefined;\n            }\n        } else if (a.level < b.level) {\n            return _commonAncestorLookup(a, b.parent);\n        } else {\n            return _commonAncestorLookup(a.parent, b);\n        }\n    }\n\n    const wgs84TileLayer = new GeometryLayer(id, options.object3d || new THREE.Group());\n    wgs84TileLayer.schemeTile = globeSchemeTileWMTS(globeSchemeTile1);\n    wgs84TileLayer.extent = wgs84TileLayer.schemeTile[0].clone();\n    for (let i = 1; i < wgs84TileLayer.schemeTile.length; i++) {\n        wgs84TileLayer.extent.union(wgs84TileLayer.schemeTile[i]);\n    }\n    wgs84TileLayer.preUpdate = (context, layer, changeSources) => {\n        SubdivisionControl.preUpdate(context, layer);\n\n        if (__DEBUG__) {\n            layer._latestUpdateStartingLevel = 0;\n        }\n\n        preGlobeUpdate(context, layer);\n        if (changeSources.has(undefined) || changeSources.size == 0) {\n            return layer.level0Nodes;\n        }\n        let commonAncestor;\n        for (const source of changeSources.values()) {\n            if (source.isCamera) {\n                // if the change is caused by a camera move, no need to bother\n                // to find common ancestor: we need to update the whole tree:\n                // some invisible tiles may now be visible\n                return layer.level0Nodes;\n            }\n            if (source.layer === layer.id) {\n                if (!commonAncestor) {\n                    commonAncestor = source;\n                } else {\n                    commonAncestor = _commonAncestorLookup(commonAncestor, source);\n                    if (!commonAncestor) {\n                        return layer.level0Nodes;\n                    }\n                }\n                if (commonAncestor.material == null) {\n                    commonAncestor = undefined;\n                }\n            }\n        }\n        if (commonAncestor) {\n            if (__DEBUG__) {\n                layer._latestUpdateStartingLevel = commonAncestor.level;\n            }\n            return [commonAncestor];\n        } else {\n            return layer.level0Nodes;\n        }\n    };\n\n    function subdivision(context, layer, node) {\n        if (SubdivisionControl.hasEnoughTexturesToSubdivide(context, layer, node)) {\n            return globeSubdivisionControl(2, options.maxSubdivisionLevel || 17, options.sseSubdivisionThreshold || 1.0)(context, layer, node);\n        }\n        return false;\n    }\n\n    wgs84TileLayer.update = processTiledGeometryNode(globeCulling(2), subdivision);\n    wgs84TileLayer.builder = new BuilderEllipsoidTile();\n    wgs84TileLayer.onTileCreated = nodeInitFn;\n    wgs84TileLayer.type = 'geometry';\n    wgs84TileLayer.protocol = 'tile';\n    wgs84TileLayer.visible = true;\n    wgs84TileLayer.lighting = {\n        enable: false,\n        position: { x: -0.5, y: 0.0, z: 1.0 },\n    };\n    return wgs84TileLayer;\n}\n\n/**\n * Creates the viewer Globe (the globe of iTowns).\n * The first parameter is the coordinates on wich the globe will be centered at the initialization.\n * The second one is the HTML div in wich the scene will be created.\n * @constructor\n * @example view = new GlobeView(viewer, positionOnGlobe);\n * // positionOnGlobe in latitude, longitude and altitude\n * @augments View\n * @param {HTMLDivElement} viewerDiv - Where to instanciate the Three.js scene in the DOM\n * @param {object} coordCarto\n * @param {object=} options - see {@link View}\n */\nfunction GlobeView(viewerDiv, coordCarto, options = {}) {\n    THREE.Object3D.DefaultUp.set(0, 0, 1);\n    const size = ellipsoidSizes().x;\n    // Setup View\n    View.call(this, 'EPSG:4978', viewerDiv, options);\n\n    // Configure camera\n    const positionCamera = new C.EPSG_4326(\n        coordCarto.longitude,\n        coordCarto.latitude,\n        coordCarto.altitude);\n\n    this.camera.setPosition(positionCamera);\n    this.camera.camera3D.lookAt({ x: 0, y: 0, z: 0 });\n    this.camera.camera3D.near = Math.max(15.0, 0.000002352 * size);\n    this.camera.camera3D.far = size * 10;\n    this.camera.camera3D.updateProjectionMatrix();\n    this.camera.camera3D.updateMatrixWorld(true);\n\n    const wgs84TileLayer = createGlobeLayer('globe', options);\n\n    const sun = new THREE.DirectionalLight();\n    sun.position.set(-0.5, 0, 1);\n    sun.updateMatrixWorld(true);\n    wgs84TileLayer.object3d.add(sun);\n\n    this.addLayer(wgs84TileLayer);\n\n    // Atmosphere\n    this.atmosphere = new Atmosphere();\n\n    const atmosphereLayer = this.mainLoop.gfxEngine.getUniqueThreejsLayer();\n    this.atmosphere.traverse((obj) => { obj.layers.set(atmosphereLayer); });\n    this.camera.camera3D.layers.enable(atmosphereLayer);\n\n    wgs84TileLayer.object3d.add(this.atmosphere);\n    this.atmosphere.updateMatrixWorld(true);\n\n\n    // Configure controls\n    const positionTargetCamera = positionCamera.clone();\n    positionTargetCamera.setAltitude(0);\n\n    if (options.noControls) {\n        this.camera.camera3D.lookAt(positionTargetCamera.as('EPSG:4978').xyz());\n    } else {\n        this.controls = new GlobeControls(this, positionTargetCamera.as('EPSG:4978').xyz(), size);\n        this.controls.handleCollision = typeof (options.handleCollision) !== 'undefined' ? options.handleCollision : true;\n    }\n\n    const mfogDistance = size * 160.0;\n    this._renderState = RendererConstant.FINAL;\n    this._fullSizeDepthBuffer = null;\n\n    const renderer = this.mainLoop.gfxEngine.renderer;\n    this.preRender = () => {\n        // WARNING, if the prerender is re-defined by the user,\n        // These mechanisms no longer work\n        // TODO: need to fix it\n        if (this._fullSizeDepthBuffer != null) {\n            // clean depth buffer\n            this._fullSizeDepthBuffer = null;\n        }\n        const v = new THREE.Vector3();\n        v.setFromMatrixPosition(wgs84TileLayer.object3d.matrixWorld);\n        var len = v.distanceTo(this.camera.camera3D.position);\n        v.setFromMatrixScale(wgs84TileLayer.object3d.matrixWorld);\n        var lim = v.x * size * 1.1;\n\n        // TODO: may be move in camera update\n        // Compute fog distance, this function makes it possible to have a shorter distance\n        // when the camera approaches the ground\n        this.fogDistance = mfogDistance * Math.pow((len - size * 0.99) * 0.25 / size, 1.5);\n\n        if (len < lim) {\n            var t = Math.pow(Math.cos((lim - len) / (lim - v.x * size * 0.9981) * Math.PI * 0.5), 1.5);\n            var color = new THREE.Color(0x93d5f8);\n            renderer.setClearColor(color.multiplyScalar(1.0 - t), renderer.getClearAlpha());\n        } else if (len >= lim) {\n            renderer.setClearColor(0x030508, renderer.getClearAlpha());\n        }\n    };\n\n    this.wgs84TileLayer = wgs84TileLayer;\n\n    const fn = () => {\n        this.mainLoop.removeEventListener('command-queue-empty', fn);\n        this.dispatchEvent({ type: GLOBE_VIEW_EVENTS.GLOBE_INITIALIZED });\n    };\n\n    this.mainLoop.addEventListener('command-queue-empty', fn);\n\n    this.notifyChange(true);\n}\n\nGlobeView.prototype = Object.create(View.prototype);\nGlobeView.prototype.constructor = GlobeView;\n\nGlobeView.prototype.addLayer = function addLayer(layer) {\n    if (layer.type == 'color') {\n        const colorLayerCount = this.getLayers(l => l.type === 'color').length;\n        layer.sequence = colorLayerCount;\n        layer.update = updateLayeredMaterialNodeImagery;\n        if (layer.protocol === 'rasterizer') {\n            layer.reprojection = 'EPSG:4326';\n        }\n    } else if (layer.type == 'elevation') {\n        if (layer.protocol === 'wmts' && layer.options.tileMatrixSet !== 'WGS84G') {\n            throw new Error('Only WGS84G tileMatrixSet is currently supported for WMTS elevation layers');\n        }\n        layer.update = updateLayeredMaterialNodeElevation;\n    }\n    const layerId = layer.id;\n    const layerPromise = View.prototype.addLayer.call(this, layer, this.wgs84TileLayer);\n\n    this.dispatchEvent({\n        type: GLOBE_VIEW_EVENTS.LAYER_ADDED,\n        layerId,\n    });\n\n    return layerPromise;\n};\n\n/**\n * Removes a specific imagery layer from the current layer list. This removes layers inserted with attach().\n * @example\n * view.removeLayer('layerId');\n * @param      {string}   layerId      The identifier\n * @return     {boolean}\n */\nGlobeView.prototype.removeLayer = function removeImageryLayer(layerId) {\n    const layer = this.getLayers(l => l.id === layerId)[0];\n    if (layer && layer.type === 'color' && this.wgs84TileLayer.detach(layer)) {\n        var cO = function cO(object) {\n            if (object.removeColorLayer) {\n                object.removeColorLayer(layerId);\n            }\n        };\n\n        for (const root of this.wgs84TileLayer.level0Nodes) {\n            root.traverse(cO);\n        }\n        const imageryLayers = this.getLayers(l => l.type === 'color');\n        for (const color of imageryLayers) {\n            if (color.sequence > layer.sequence) {\n                color.sequence--;\n            }\n        }\n\n        this.notifyChange(true);\n        this.dispatchEvent({\n            type: GLOBE_VIEW_EVENTS.LAYER_REMOVED,\n            layerId,\n        });\n\n        return true;\n    } else {\n        throw new Error(`${layerId} isn't color layer`);\n    }\n};\n\nGlobeView.prototype.selectNodeAt = function selectNodeAt(mouse) {\n    // update the picking ray with the camera and mouse position\n    const selectedId = this.screenCoordsToNodeId(mouse);\n\n    for (const n of this.wgs84TileLayer.level0Nodes) {\n        n.traverse((node) => {\n            // only take of selectable nodes\n            if (node.setSelected) {\n                node.setSelected(node.id === selectedId);\n\n                if (node.id === selectedId) {\n                    // eslint-disable-next-line no-console\n                    console.info(node);\n                }\n            }\n        });\n    }\n\n    this.notifyChange(true);\n};\n\nGlobeView.prototype.screenCoordsToNodeId = function screenCoordsToNodeId(mouse) {\n    const dim = this.mainLoop.gfxEngine.getWindowSize();\n\n    mouse = mouse || new THREE.Vector2(Math.floor(dim.x / 2), Math.floor(dim.y / 2));\n\n    const previousRenderState = this._renderState;\n    this.changeRenderState(RendererConstant.ID);\n\n    // Prepare state\n    const prev = this.camera.camera3D.layers.mask;\n    this.camera.camera3D.layers.mask = 1 << this.wgs84TileLayer.threejsLayer;\n\n    var buffer = this.mainLoop.gfxEngine.renderViewTobuffer(\n        this,\n        this.mainLoop.gfxEngine.fullSizeRenderTarget,\n        mouse.x, dim.y - mouse.y,\n        1, 1);\n\n    this.changeRenderState(previousRenderState);\n    this.camera.camera3D.layers.mask = prev;\n\n    var depthRGBA = new THREE.Vector4().fromArray(buffer).divideScalar(255.0);\n\n    // unpack RGBA to float\n    var unpack = unpack1K(depthRGBA, Math.pow(256, 3));\n\n    return Math.round(unpack);\n};\n\nGlobeView.prototype.readDepthBuffer = function readDepthBuffer(x, y, width, height) {\n    const g = this.mainLoop.gfxEngine;\n    const previousRenderState = this._renderState;\n    this.changeRenderState(RendererConstant.DEPTH);\n    const buffer = g.renderViewTobuffer(this, g.fullSizeRenderTarget, x, y, width, height);\n    this.changeRenderState(previousRenderState);\n    return buffer;\n};\n\nconst matrix = new THREE.Matrix4();\nconst screen = new THREE.Vector2();\nconst pickWorldPosition = new THREE.Vector3();\nconst ray = new THREE.Ray();\nconst direction = new THREE.Vector3();\nGlobeView.prototype.getPickingPositionFromDepth = function getPickingPositionFromDepth(mouse) {\n    const l = this.mainLoop;\n    const viewPaused = l.scheduler.commandsWaitingExecutionCount() == 0 && l.renderingState == RENDERING_PAUSED;\n    const g = l.gfxEngine;\n    const dim = g.getWindowSize();\n    const camera = this.camera.camera3D;\n\n    mouse = mouse || dim.clone().multiplyScalar(0.5);\n    mouse.x = Math.floor(mouse.x);\n    mouse.y = Math.floor(mouse.y);\n\n    const prev = camera.layers.mask;\n    camera.layers.mask = 1 << this.wgs84TileLayer.threejsLayer;\n\n    // Render/Read to buffer\n    let buffer;\n    if (viewPaused) {\n        this._fullSizeDepthBuffer = this._fullSizeDepthBuffer || this.readDepthBuffer(0, 0, dim.x, dim.y);\n        const id = ((dim.y - mouse.y - 1) * dim.x + mouse.x) * 4;\n        buffer = this._fullSizeDepthBuffer.slice(id, id + 4);\n    } else {\n        buffer = this.readDepthBuffer(mouse.x, dim.y - mouse.y - 1, 1, 1);\n    }\n\n    screen.x = (mouse.x / dim.x) * 2 - 1;\n    screen.y = -(mouse.y / dim.y) * 2 + 1;\n\n    // Origin\n    ray.origin.copy(camera.position);\n\n    // Direction\n    ray.direction.set(screen.x, screen.y, 0.5);\n    // Unproject\n    matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));\n    ray.direction.applyMatrix4(matrix);\n    ray.direction.sub(ray.origin);\n\n    direction.set(0, 0, 1.0);\n    direction.applyMatrix4(matrix);\n    direction.sub(ray.origin);\n\n    const angle = direction.angleTo(ray.direction);\n    const orthoZ = g.depthBufferRGBAValueToOrthoZ(buffer, camera);\n    const length = orthoZ / Math.cos(angle);\n\n    pickWorldPosition.addVectors(camera.position, ray.direction.setLength(length));\n\n    camera.layers.mask = prev;\n\n    if (pickWorldPosition.length() > 10000000)\n        { return undefined; }\n\n    return pickWorldPosition;\n};\n\nGlobeView.prototype.changeRenderState = function changeRenderState(newRenderState) {\n    if (this._renderState == newRenderState || !this.wgs84TileLayer.level0Nodes) {\n        return;\n    }\n\n    // build traverse function\n    var changeStateFunction = (function getChangeStateFunctionFn() {\n        return function changeStateFunction(object3D) {\n            if (object3D.changeState) {\n                object3D.changeState(newRenderState);\n            }\n        };\n    }());\n\n    for (const n of this.wgs84TileLayer.level0Nodes) {\n        n.traverseVisible(changeStateFunction);\n    }\n    this._renderState = newRenderState;\n};\n\nGlobeView.prototype.setRealisticLightingOn = function setRealisticLightingOn(value) {\n    const coSun = CoordStars.getSunPositionInScene(new Date().getTime(), 48.85, 2.35).normalize();\n\n    this.lightingPos = coSun.normalize();\n\n    const lighting = this.wgs84TileLayer.lighting;\n    lighting.enable = value;\n    lighting.position = coSun;\n\n    this.atmosphere.setRealisticOn(value);\n    this.atmosphere.updateLightingPos(coSun);\n\n    this.updateMaterialUniform('lightingEnabled', value);\n    this.updateMaterialUniform('lightPosition', coSun);\n    this.notifyChange(true);\n};\n\nGlobeView.prototype.setLightingPos = function setLightingPos(pos) {\n    const lightingPos = pos || CoordStars.getSunPositionInScene(this.ellipsoid, new Date().getTime(), 48.85, 2.35);\n\n    this.updateMaterialUniform('lightPosition', lightingPos.clone().normalize());\n    this.notifyChange(true);\n};\n\nGlobeView.prototype.updateMaterialUniform = function updateMaterialUniform(uniformName, value) {\n    for (const n of this.wgs84TileLayer.level0Nodes) {\n        n.traverse((obj) => {\n            if (!obj.material || !obj.material.uniforms) {\n                return;\n            }\n            if (uniformName in obj.material.uniforms) {\n                obj.material.uniforms[uniformName].value = value;\n            }\n        });\n    }\n};\n\nexport default GlobeView;\n"]}