{"version":3,"sources":["../../../../src/Core/Prefab/Planar/PlanarTileBuilder.js"],"names":["THREE","PlanarTileBuilder","tmp","coords","position","Vector3","normal","prototype","constructor","Prepare","params","nbRow","Math","pow","zoom","projected","Center","extent","center","x","y","VertexPosition","set","VertexNormal","uProjecte","u","west","east","vProjecte","v","south","north","OBB","halfHeight","max","sub","min","translate","undefined"],"mappings":"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","file":"PlanarTileBuilder.js","sourcesContent":["import * as THREE from 'three';\nimport OBB from '../../../Renderer/ThreeExtended/OBB';\nimport Coordinates from '../../Geographic/Coordinates';\n\nfunction PlanarTileBuilder() {\n    this.tmp = {\n        coords: new Coordinates('EPSG:4326', 0, 0),\n        position: new THREE.Vector3(),\n        normal: new THREE.Vector3(0, 0, 1),\n    };\n}\n\nPlanarTileBuilder.prototype.constructor = PlanarTileBuilder;\n\n// prepare params\n// init projected object -> params.projected\nPlanarTileBuilder.prototype.Prepare = function Prepare(params) {\n    params.nbRow = Math.pow(2.0, params.zoom + 1.0);\n    params.projected = new THREE.Vector3();\n};\n\n\n// get center tile in cartesian 3D\nPlanarTileBuilder.prototype.Center = function Center(params) {\n    params.extent.center(this.tmp.coords);\n    params.center = new THREE.Vector3(this.tmp.coords.x(), this.tmp.coords.y(), 0);\n    return params.center;\n};\n\n// get position 3D cartesian\nPlanarTileBuilder.prototype.VertexPosition = function VertexPosition(params) {\n    this.tmp.position.set(params.projected.x, params.projected.y, 0);\n    return this.tmp.position;\n};\n\n// get normal for last vertex\nPlanarTileBuilder.prototype.VertexNormal = function VertexNormal() {\n    return this.tmp.normal;\n};\n\n// coord u tile to projected\nPlanarTileBuilder.prototype.uProjecte = function uProjecte(u, params) {\n    params.projected.x = params.extent.west() + u * (params.extent.east() - params.extent.west());\n};\n\n// coord v tile to projected\nPlanarTileBuilder.prototype.vProjecte = function vProjecte(v, params)\n{\n    params.projected.y = params.extent.south() + v * (params.extent.north() - params.extent.south());\n};\n\n// get oriented bounding box of tile\nPlanarTileBuilder.prototype.OBB = function _OBB(params) {\n    const center = params.center;\n    const halfHeight = params.halfHeight ? params.halfHeight : 0;\n    const max = new THREE.Vector3(\n        params.extent.east(),\n        params.extent.north(),\n        halfHeight).sub(center);\n    const min = new THREE.Vector3(\n        params.extent.west(),\n        params.extent.south(),\n        -halfHeight).sub(center);\n    const translate = new THREE.Vector3(0, 0, 0);\n    // normal is up vector\n    return new OBB(min, max, undefined, translate);\n};\n\nexport default PlanarTileBuilder;\n"]}