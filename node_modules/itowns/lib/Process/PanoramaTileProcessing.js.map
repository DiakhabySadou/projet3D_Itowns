{"version":3,"sources":["../../src/Process/PanoramaTileProcessing.js"],"names":["panoramaCulling","panoramaSubdivisionControl","frustumCullingOBB","node","camera","isBox3Visible","OBB","box3D","matrixWorld","_isTileBiggerThanTexture","textureSize","quality","onScreen","box3SizeOnScreen","geometry","min","z","max","boost","Math","getCenter","length","dim","x","width","y","height","maxLevel","context","layer","level"],"mappings":";;;;;QAIgBA,e,GAAAA,e;QAsBAC,0B,GAAAA,0B;AA1BhB,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,MAAjC,EAAyC;AACrC,WAAOA,OAAOC,aAAP,CAAqBF,KAAKG,GAAL,GAAWC,KAAhC,EAAuCJ,KAAKG,GAAL,GAAWE,WAAlD,CAAP;AACH;;AAEM,SAASR,eAAT,CAAyBG,IAAzB,EAA+BC,MAA/B,EAAuC;AAC1C,WAAO,CAACF,kBAAkBC,IAAlB,EAAwBC,MAAxB,CAAR;AACH;;AAED,SAASK,wBAAT,CAAkCL,MAAlC,EAA0CM,WAA1C,EAAuDC,OAAvD,EAAgER,IAAhE,EAAsE;AAClE,QAAMS,WAAWR,OAAOS,gBAAP,CACbV,KAAKW,QAAL,CAAcR,GAAd,CAAkBC,KADL,EAEbJ,KAAKW,QAAL,CAAcR,GAAd,CAAkBE,WAFL,CAAjB;AAGAI,aAASG,GAAT,CAAaC,CAAb,GAAiB,CAAjB;AACAJ,aAASK,GAAT,CAAaD,CAAb,GAAiB,CAAjB;;AAEA;AACA,QAAME,QAAQ,IAAIC,KAAKF,GAAL,CAAS,CAAT,EAAY,IAAIL,SAASQ,SAAT,GAAqBC,MAArB,EAAhB,CAAlB;;AAEA,QAAMC,MAAM;AACRC,WAAG,OAAOX,SAASK,GAAT,CAAaM,CAAb,GAAiBX,SAASG,GAAT,CAAaQ,CAArC,IAA0CnB,OAAOoB,KAD5C;AAERC,WAAG,OAAOb,SAASK,GAAT,CAAaQ,CAAb,GAAiBb,SAASG,GAAT,CAAaU,CAArC,IAA0CrB,OAAOsB;AAF5C,KAAZ;;AAKA,WAAQR,QAAQI,IAAIC,CAAZ,GAAgBZ,OAAhB,IAA2BD,YAAYa,CAAvC,IAA4CL,QAAQI,IAAIG,CAAZ,GAAgBd,OAAhB,IAA2BD,YAAYe,CAA3F;AACH;;AAEM,SAASxB,0BAAT,CAAoC0B,QAApC,EAA8CjB,WAA9C,EAA2D;AAC9D,WAAO,UAAqCkB,OAArC,EAA8CC,KAA9C,EAAqD1B,IAArD,EAA2D;AAC9D,YAAIwB,YAAYxB,KAAK2B,KAArB,EAA4B;AACxB,mBAAO,KAAP;AACH;;AAED,eAAOrB,yBAAyBmB,QAAQxB,MAAjC,EAAyCM,WAAzC,EAAsDmB,MAAMlB,OAAN,IAAiB,GAAvE,EAA4ER,IAA5E,CAAP;AACH,KAND;AAOH","file":"PanoramaTileProcessing.js","sourcesContent":["function frustumCullingOBB(node, camera) {\n    return camera.isBox3Visible(node.OBB().box3D, node.OBB().matrixWorld);\n}\n\nexport function panoramaCulling(node, camera) {\n    return !frustumCullingOBB(node, camera);\n}\n\nfunction _isTileBiggerThanTexture(camera, textureSize, quality, node) {\n    const onScreen = camera.box3SizeOnScreen(\n        node.geometry.OBB.box3D,\n        node.geometry.OBB.matrixWorld);\n    onScreen.min.z = 0;\n    onScreen.max.z = 0;\n\n    // give a small boost to central tiles\n    const boost = 1 + Math.max(0, 1 - onScreen.getCenter().length());\n\n    const dim = {\n        x: 0.5 * (onScreen.max.x - onScreen.min.x) * camera.width,\n        y: 0.5 * (onScreen.max.y - onScreen.min.y) * camera.height,\n    };\n\n    return (boost * dim.x * quality >= textureSize.x && boost * dim.y * quality >= textureSize.y);\n}\n\nexport function panoramaSubdivisionControl(maxLevel, textureSize) {\n    return function _panoramaSubdivisionControl(context, layer, node) {\n        if (maxLevel <= node.level) {\n            return false;\n        }\n\n        return _isTileBiggerThanTexture(context.camera, textureSize, layer.quality || 1.0, node);\n    };\n}\n"]}