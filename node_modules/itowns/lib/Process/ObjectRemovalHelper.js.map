{"version":3,"sources":["../../src/Process/ObjectRemovalHelper.js"],"names":["cleanup","obj","dispose","geometry","material","removeChildren","layerId","toRemove","children","filter","c","layer","remove","removeChildrenAndCleanup","removeChildrenAndCleanupRecursively"],"mappings":";;;;;;;;;;;;;;;;kBAAe;AACX;;;;AAIAA,WALW,mBAKHC,GALG,EAKE;AACT,YAAI,OAAOA,IAAIC,OAAX,KAAuB,UAA3B,EAAuC;AACnCD,gBAAIC,OAAJ;AACH,SAFD,MAEO;AACH,gBAAID,IAAIE,QAAR,EAAkB;AACdF,oBAAIE,QAAJ,CAAaD,OAAb;AACAD,oBAAIE,QAAJ,GAAe,IAAf;AACH;AACD,gBAAIF,IAAIG,QAAR,EAAkB;AACdH,oBAAIG,QAAJ,CAAaF,OAAb;AACAD,oBAAIG,QAAJ,GAAe,IAAf;AACH;AACJ;AACJ,KAlBU;;;AAoBX;;;;;;;AAOAC,kBA3BW,0BA2BIC,OA3BJ,EA2BaL,GA3Bb,EA2BkB;AACzB,YAAMM,WAAWN,IAAIO,QAAJ,CAAaC,MAAb,CAAoB;AAAA,mBAAKC,EAAEC,KAAF,KAAYL,OAAjB;AAAA,SAApB,CAAjB;AACAL,YAAIW,MAAJ,6CAAcL,QAAd;AACA,eAAOA,QAAP;AACH,KA/BU;;;AAiCX;;;;;;;AAOAM,4BAxCW,oCAwCcP,OAxCd,EAwCuBL,GAxCvB,EAwC4B;AACnC,YAAMM,WAAWN,IAAIO,QAAJ,CAAaC,MAAb,CAAoB;AAAA,mBAAKC,EAAEC,KAAF,KAAYL,OAAjB;AAAA,SAApB,CAAjB;;AAEA,YAAIL,IAAIU,KAAJ,KAAcL,OAAlB,EAA2B;AACvB,iBAAKN,OAAL,CAAaC,GAAb;AACH;;AAEDA,YAAIW,MAAJ,6CAAcL,QAAd;AACA,eAAOA,QAAP;AACH,KAjDU;;;AAmDX;;;;;;;AAOAO,uCA1DW,+CA0DyBR,OA1DzB,EA0DkCL,GA1DlC,EA0DuC;AAC9C,YAAMM,WAAWN,IAAIO,QAAJ,CAAaC,MAAb,CAAoB;AAAA,mBAAKC,EAAEC,KAAF,KAAYL,OAAjB;AAAA,SAApB,CAAjB;AAD8C;AAAA;AAAA;;AAAA;AAE9C,4DAAgBC,QAAhB,4GAA0B;AAAA,oBAAfG,CAAe;;AACtB,qBAAKI,mCAAL,CAAyCR,OAAzC,EAAkDI,CAAlD;AACH;AAJ6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK9C,YAAIT,IAAIU,KAAJ,KAAcL,OAAlB,EAA2B;AACvB,iBAAKN,OAAL,CAAaC,GAAb;AACH;AACDA,YAAIW,MAAJ,6CAAcL,QAAd;AACA,eAAOA,QAAP;AACH;AApEU,C","file":"ObjectRemovalHelper.js","sourcesContent":["export default {\n    /**\n     * Cleanup obj to release three.js allocated resources\n     * @param {Object3D} obj object to release\n     */\n    cleanup(obj) {\n        if (typeof obj.dispose === 'function') {\n            obj.dispose();\n        } else {\n            if (obj.geometry) {\n                obj.geometry.dispose();\n                obj.geometry = null;\n            }\n            if (obj.material) {\n                obj.material.dispose();\n                obj.material = null;\n            }\n        }\n    },\n\n    /**\n     * Remove obj's children belonging to layerId layer.\n     * Neither obj nor its children will be disposed!\n     * @param {String} layerId The id of the layer that objects must belong to. Other object are ignored\n     * @param {Object3D} obj The Object3D we want to clean\n     * @return {Array} an array of removed Object3D from obj (not including the recursive removals)\n     */\n    removeChildren(layerId, obj) {\n        const toRemove = obj.children.filter(c => c.layer === layerId);\n        obj.remove(...toRemove);\n        return toRemove;\n    },\n\n    /**\n     * Remove obj's children belonging to layerId layer and cleanup objexts.\n     * obj will be disposed but its children **won't**!\n     * @param {String} layerId The id of the layer that objects must belong to. Other object are ignored\n     * @param {Object3D} obj The Object3D we want to clean\n     * @return {Array} an array of removed Object3D from obj (not including the recursive removals)\n     */\n    removeChildrenAndCleanup(layerId, obj) {\n        const toRemove = obj.children.filter(c => c.layer === layerId);\n\n        if (obj.layer === layerId) {\n            this.cleanup(obj);\n        }\n\n        obj.remove(...toRemove);\n        return toRemove;\n    },\n\n    /**\n     * Recursively remove obj's children belonging to layerId layer.\n     * All removed obj will have their geometry/material disposed.\n     * @param {String} layerId The id of the layer that objects must belong to. Other object are ignored\n     * @param {Object3D} obj The Object3D we want to clean\n     * @return {Array} an array of removed Object3D from obj (not including the recursive removals)\n     */\n    removeChildrenAndCleanupRecursively(layerId, obj) {\n        const toRemove = obj.children.filter(c => c.layer === layerId);\n        for (const c of toRemove) {\n            this.removeChildrenAndCleanupRecursively(layerId, c);\n        }\n        if (obj.layer === layerId) {\n            this.cleanup(obj);\n        }\n        obj.remove(...toRemove);\n        return toRemove;\n    },\n};\n"]}