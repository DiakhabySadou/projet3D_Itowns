{"version":3,"sources":["../../src/Process/3dTilesProcessing.js"],"names":["$3dTilesCulling","pre3dTilesUpdate","init3dTilesLayer","process3dTilesNode","$3dTilesSubdivisionControl","THREE","requestNewTile","view","scheduler","geometryLayer","metadata","parent","redraw","command","requester","layer","priority","distance","execute","subdivideNode","context","node","cullingTest","additiveRefinement","_subdivideNodeAdditive","_subdivideNodeSubstractive","tmpMatrix","Matrix4","child","promise","loaded","overrideMatrixWorld","matrixWorld","transform","multiplyMatrices","isVisible","camera","then","tile","add","updateMatrixWorld","notifyChange","tileIndex","index","tileId","children","pendingSubdivision","filter","n","id","length","childrenTiles","undefined","promises","i","push","all","tileMatrixWorld","viewerRequestVolume","nodeViewer","region","box","sphere","worldCoordinateCenter","center","clone","applyMatrix4","camera3D","position","distanceTo","radius","boundingVolume","isBox3Visible","box3D","multiply","matrix","isSphereVisible","cleanup3dTileset","depth","canCleanCompletely","content","traverse","_cleanupObject3D","dispose","remove","tiles","material","geometry","visible","radAngle","Math","degToRad","fov","halfHorizontalFOV","atan","tan","aspect","preSSE","width","random","root","cleanableSince","now","Date","_cleanableTiles","elt","cleanupDelay","computeNodeSSE","cameraLocalPosition","x","elements","y","z","distanceToPoint","geometricError","error","delta","clamp","min","max","sub","abs","Infinity","tileset","object3d","setDisplayed","display","markForDeletion","subdivisionTest","returnValue","sse","sseThreshold"],"mappings":"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","file":"3dTilesProcessing.js","sourcesContent":["import * as THREE from 'three';\n\nfunction requestNewTile(view, scheduler, geometryLayer, metadata, parent, redraw) {\n    const command = {\n        /* mandatory */\n        view,\n        requester: parent,\n        layer: geometryLayer,\n        priority: parent ? 1.0 / (parent.distance + 1) : 100,\n        /* specific params */\n        metadata,\n        redraw,\n    };\n\n    return scheduler.execute(command);\n}\n\nfunction subdivideNode(context, layer, node, cullingTest) {\n    if (node.additiveRefinement) {\n        // Additive refinement can only fetch visible children.\n        _subdivideNodeAdditive(context, layer, node, cullingTest);\n    } else {\n        // Substractive refinement on the other hand requires to replace\n        // node with all of its children\n        _subdivideNodeSubstractive(context, layer, node);\n    }\n}\n\nconst tmpMatrix = new THREE.Matrix4();\nfunction _subdivideNodeAdditive(context, layer, node, cullingTest) {\n    for (const child of layer.tileIndex.index[node.tileId].children) {\n        // child being downloaded => skip\n        if (child.promise || child.loaded) {\n            continue;\n        }\n\n        // 'child' is only metadata (it's *not* a THREE.Object3D). 'cullingTest' needs\n        // a matrixWorld, so we compute it: it's node's matrixWorld x child's transform\n        let overrideMatrixWorld = node.matrixWorld;\n        if (child.transform) {\n            overrideMatrixWorld = tmpMatrix.multiplyMatrices(node.matrixWorld, child.transform);\n        }\n\n        const isVisible = cullingTest ? !cullingTest(context.camera, child, overrideMatrixWorld) : true;\n\n        // child is not visible => skip\n        if (!isVisible) {\n            continue;\n        }\n        child.promise = requestNewTile(context.view, context.scheduler, layer, child, node, true).then((tile) => {\n            node.add(tile);\n            tile.updateMatrixWorld();\n            context.view.notifyChange(true);\n            child.loaded = true;\n            delete child.promise;\n        });\n    }\n}\n\nfunction _subdivideNodeSubstractive(context, layer, node) {\n    if (!node.pendingSubdivision && node.children.filter(n => n.layer == layer.id).length == 0) {\n        const childrenTiles = layer.tileIndex.index[node.tileId].children;\n        if (childrenTiles === undefined || childrenTiles.length === 0) {\n            return;\n        }\n        node.pendingSubdivision = true;\n\n        const promises = [];\n        for (let i = 0; i < childrenTiles.length; i++) {\n            promises.push(\n                requestNewTile(context.view, context.scheduler, layer, childrenTiles[i], node, false).then((tile) => {\n                    childrenTiles[i].loaded = true;\n                    node.add(tile);\n                    tile.updateMatrixWorld();\n                    if (node.additiveRefinement) {\n                        context.view.notifyChange(true);\n                    }\n                    layer.tileIndex.index[tile.tileId].loaded = true;\n                }));\n        }\n        Promise.all(promises).then(() => {\n            node.pendingSubdivision = false;\n            context.view.notifyChange(true);\n        });\n    }\n}\n\nexport function $3dTilesCulling(camera, node, tileMatrixWorld) {\n    // For viewer Request Volume https://github.com/AnalyticalGraphicsInc/3d-tiles-samples/tree/master/tilesets/TilesetWithRequestVolume\n    if (node.viewerRequestVolume) {\n        const nodeViewer = node.viewerRequestVolume;\n        if (nodeViewer.region) {\n            // TODO\n            return true;\n        }\n        if (nodeViewer.box) {\n            // TODO\n            return true;\n        }\n        if (nodeViewer.sphere) {\n            const worldCoordinateCenter = nodeViewer.sphere.center.clone();\n            worldCoordinateCenter.applyMatrix4(tileMatrixWorld);\n            // To check the distance between the center sphere and the camera\n            if (!(camera.camera3D.position.distanceTo(worldCoordinateCenter) <= nodeViewer.sphere.radius)) {\n                return true;\n            }\n        }\n    }\n\n    // For bounding volume\n    if (node.boundingVolume) {\n        const boundingVolume = node.boundingVolume;\n        if (boundingVolume.region) {\n            return !camera.isBox3Visible(boundingVolume.region.box3D,\n                tileMatrixWorld.clone().multiply(boundingVolume.region.matrix));\n        }\n        if (boundingVolume.box) {\n            return !camera.isBox3Visible(boundingVolume.box, tileMatrixWorld);\n        }\n        if (boundingVolume.sphere) {\n            return !camera.isSphereVisible(boundingVolume.sphere, tileMatrixWorld);\n        }\n    }\n    return false;\n}\n\n// Cleanup all 3dtiles|three.js starting from a given node n.\n// n's children can be of 2 types:\n//   - have a 'content' attribute -> it's a tileset and must\n//     be cleaned with cleanup3dTileset()\n//   - doesn't have 'content' -> it's a raw Object3D object,\n//     and must be cleaned with _cleanupObject3D()\nfunction cleanup3dTileset(layer, n, depth = 0) {\n    // If this layer is not using additive refinement, we can only\n    // clean a tile if all its neighbours are cleaned as well because\n    // a tile can only be in 2 states:\n    //   - displayed and no children displayed\n    //   - hidden and all of its children displayed\n    // So here we implement a conservative measure: if T is cleanable\n    // we actually only clean its children tiles.\n    const canCleanCompletely = n.additiveRefinement || depth > 0;\n\n    for (let i = 0; i < n.children.length; i++) {\n        // skip non-tiles elements\n        if (!n.children[i].content) {\n            if (canCleanCompletely) {\n                n.children[i].traverse(_cleanupObject3D);\n            }\n        } else {\n            cleanup3dTileset(layer, n.children[i], depth + 1);\n        }\n    }\n\n\n    if (canCleanCompletely) {\n        if (n.dispose) {\n            n.dispose();\n        }\n        delete n.content;\n        layer.tileIndex.index[n.tileId].loaded = false;\n        n.remove(...n.children);\n\n        // and finally remove from parent\n        if (depth == 0 && n.parent) {\n            n.parent.remove(n);\n        }\n    } else {\n        const tiles = n.children.filter(n => n.tileId != undefined);\n        n.remove(...tiles);\n    }\n}\n\n// This function is used to cleanup a Object3D hierarchy.\n// (no 3dtiles spectific code here because this is managed by cleanup3dTileset)\nfunction _cleanupObject3D(n) {\n    // all children of 'n' are raw Object3D\n    for (const child of n.children) {\n        _cleanupObject3D(child);\n    }\n    // free resources\n    if (n.material) {\n        n.material.dispose();\n    }\n    if (n.geometry) {\n        n.geometry.dispose();\n    }\n    n.remove(...n.children);\n}\n\nexport function pre3dTilesUpdate(context, layer) {\n    if (!layer.visible) {\n        return [];\n    }\n\n    const radAngle = THREE.Math.degToRad(context.camera.camera3D.fov);\n    const halfHorizontalFOV = (2.0 * Math.atan(Math.tan(radAngle * 0.5) * context.camera.camera3D.aspect)) / 2.0;\n    context.camera.preSSE = context.camera.width / (2.0 * Math.tan(halfHorizontalFOV));\n\n    // once in a while, garbage collect\n    if (Math.random() > 0.98) {\n        // Make sure we don't clean root tile\n        layer.root.cleanableSince = undefined;\n\n        // Browse\n        const now = Date.now();\n\n        for (const elt of layer._cleanableTiles) {\n            if ((now - elt.cleanableSince) > layer.cleanupDelay) {\n                cleanup3dTileset(layer, elt);\n            }\n        }\n        layer._cleanableTiles = layer._cleanableTiles.filter(n => (layer.tileIndex.index[n.tileId].loaded && n.cleanableSince));\n    }\n\n    return [layer.root];\n}\n\n// Improved zoom geometry\nfunction computeNodeSSE(camera, node) {\n    if (node.boundingVolume.region) {\n        const cameraLocalPosition = camera.camera3D.position.clone();\n        cameraLocalPosition.x -= node.boundingVolume.region.matrixWorld.elements[12];\n        cameraLocalPosition.y -= node.boundingVolume.region.matrixWorld.elements[13];\n        cameraLocalPosition.z -= node.boundingVolume.region.matrixWorld.elements[14];\n        const distance = node.boundingVolume.region.box3D.distanceToPoint(cameraLocalPosition);\n        node.distance = distance;\n        return camera.preSSE * (node.geometricError / distance);\n    }\n    if (node.boundingVolume.box) {\n        const cameraLocalPosition = camera.camera3D.position.clone();\n        cameraLocalPosition.x -= node.matrixWorld.elements[12];\n        cameraLocalPosition.y -= node.matrixWorld.elements[13];\n        cameraLocalPosition.z -= node.matrixWorld.elements[14];\n        const distance = node.boundingVolume.box.distanceToPoint(cameraLocalPosition);\n        node.distance = distance;\n\n        // const total = camera.box3SizeOnScreen(node.boundingVolume.box, node.matrixWorld);\n        // total.min.z = total.max.z = 0;\n        // const totalArea = total.getSize().length();\n        // const screen = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1));\n        // const onScreen = total.clone().intersect(screen).getSize().length();\n        // const roughVisibleProportion = Math.min(1.0, onScreen / totalArea);\n\n\n        let error = node.geometricError / 100; // * roughVisibleProportion; // (node.geometricError / 500) * (node.boundingVolume.box.getSize().length() / 1000);\n        if (distance > 0) {\n            const delta = cameraLocalPosition.clone().clamp(node.boundingVolume.box.min, node.boundingVolume.box.max).sub(cameraLocalPosition);\n\n            // const delta = node.boundingVolume.box.getCenter();\n            // delta.sub(camera.camera3D.position);\n            // delta.normalize();\n            // delta.multiplyScalar(distance);\n            // const surfaceNormal = new THREE.Vector3(0, 0, 1);\n            // const angle = Math.asin(delta.z / distance);\n            // error *= Math.abs(Math.sin(angle));\n            error *= Math.abs(delta.z / distance);\n        }\n\n        return camera.preSSE * (error / distance);\n    }\n    if (node.boundingVolume.sphere) {\n        const cameraLocalPosition = camera.camera3D.position.clone();\n        cameraLocalPosition.x -= node.matrixWorld.elements[12];\n        cameraLocalPosition.y -= node.matrixWorld.elements[13];\n        cameraLocalPosition.z -= node.matrixWorld.elements[14];\n        const distance = node.boundingVolume.sphere.distanceToPoint(cameraLocalPosition);\n        node.distance = distance;\n        return camera.preSSE * (node.geometricError / distance);\n    }\n    return Infinity;\n}\n\nexport function init3dTilesLayer(view, scheduler, layer) {\n    return requestNewTile(view, scheduler, layer, layer.tileset.root, undefined, true).then(\n            (tile) => {\n                delete layer.tileset;\n                layer.object3d.add(tile);\n                tile.updateMatrixWorld();\n                layer.tileIndex.index[tile.tileId].loaded = true;\n                layer.root = tile;\n            });\n}\n\nfunction setDisplayed(node, display) {\n    // The geometry of the tile is not in node, but in node.content\n    // To change the display state, we change node.content.visible instead of\n    // node.material.visible\n    if (node.content) {\n        node.content.visible = display;\n    }\n}\n\nfunction markForDeletion(layer, elt) {\n    if (!elt.cleanableSince) {\n        elt.cleanableSince = Date.now();\n        layer._cleanableTiles.push(elt);\n    }\n}\n\nexport function process3dTilesNode(cullingTest, subdivisionTest) {\n    return function _process3dTilesNodes(context, layer, node) {\n        // early exit if parent's subdivision is in progress\n        if (node.parent.pendingSubdivision && !node.parent.additiveRefinement) {\n            node.visible = false;\n            return undefined;\n        }\n\n        // do proper culling\n        const isVisible = cullingTest ? (!cullingTest(context.camera, node, node.matrixWorld)) : true;\n        node.visible = isVisible;\n\n\n        if (isVisible) {\n            node.cleanableSince = undefined;\n\n            let returnValue;\n            if (node.pendingSubdivision || subdivisionTest(context, layer, node)) {\n                subdivideNode(context, layer, node, cullingTest);\n                // display iff children aren't ready\n                setDisplayed(node, node.pendingSubdivision || node.additiveRefinement);\n                returnValue = node.children.filter(n => n.layer == layer.id);\n            } else {\n                setDisplayed(node, true);\n\n                for (const n of node.children.filter(n => n.layer == layer.id)) {\n                    n.visible = false;\n                    markForDeletion(layer, n);\n                }\n            }\n            return returnValue;\n        }\n\n        markForDeletion(layer, node);\n\n        return undefined;\n    };\n}\n\nexport function $3dTilesSubdivisionControl(context, layer, node) {\n    if (layer.tileIndex.index[node.tileId].children === undefined) {\n        return false;\n    }\n    const sse = computeNodeSSE(context.camera, node);\n    return sse > layer.sseThreshold;\n}\n"]}