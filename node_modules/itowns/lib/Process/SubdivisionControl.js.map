{"version":3,"sources":["../../src/Process/SubdivisionControl.js"],"names":["preUpdate","context","layer","colorLayers","view","getLayers","l","a","id","type","elevationLayers","hasEnoughTexturesToSubdivide","node","e","frozen","ready","tileInsideLimit","isElevationLayerLoaded","layerUpdateState","inError","c","visible","isColorLayerLoaded"],"mappings":";;;;;;;;;;;;kBAAe;AACXA,eAAW,mBAACC,OAAD,EAAUC,KAAV,EAAoB;AAC3BD,gBAAQE,WAAR,GAAsBF,QAAQG,IAAR,CAAaC,SAAb,CAClB,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUA,KAAKA,EAAEC,EAAF,IAAQN,MAAMM,EAAnB,IAAyBF,EAAEG,IAAF,IAAU,OAA7C;AAAA,SADkB,CAAtB;AAEAR,gBAAQS,eAAR,GAA0BT,QAAQG,IAAR,CAAaC,SAAb,CACtB,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUA,KAAKA,EAAEC,EAAF,IAAQN,MAAMM,EAAnB,IAAyBF,EAAEG,IAAF,IAAU,WAA7C;AAAA,SADsB,CAA1B;AAEH,KANU;;AAQXE,kCAA8B,sCAACV,OAAD,EAAUC,KAAV,EAAiBU,IAAjB,EAA0B;AACpD;AACA;AAFoD;AAAA;AAAA;;AAAA;AAGpD,4DAAgBX,QAAQS,eAAxB,4GAAyC;AAAA,oBAA9BG,CAA8B;;AACrC,oBAAI,CAACA,EAAEC,MAAH,IAAaD,EAAEE,KAAf,IAAwBF,EAAEG,eAAF,CAAkBJ,IAAlB,EAAwBC,CAAxB,CAAxB,IAAsD,CAACD,KAAKK,sBAAL,EAA3D,EAA0F;AACtF;AACA,wBAAIL,KAAKM,gBAAL,CAAsBL,EAAEL,EAAxB,KAA+BI,KAAKM,gBAAL,CAAsBL,EAAEL,EAAxB,EAA4BW,OAA5B,EAAnC,EAA0E;AACtE;AACH;AACD,2BAAO,KAAP;AACH;AACJ;;AAED;AAboD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAcpD,6DAAgBlB,QAAQE,WAAxB,iHAAqC;AAAA,oBAA1BiB,CAA0B;;AACjC,oBAAIA,EAAEN,MAAF,IAAY,CAACM,EAAEC,OAAf,IAA0B,CAACD,EAAEL,KAAjC,EAAwC;AACpC;AACH;AACD;AACA,oBAAIH,KAAKM,gBAAL,CAAsBE,EAAEZ,EAAxB,KAA+BI,KAAKM,gBAAL,CAAsBE,EAAEZ,EAAxB,EAA4BW,OAA5B,EAAnC,EAA0E;AACtE;AACH;AACD,oBAAIC,EAAEJ,eAAF,CAAkBJ,IAAlB,EAAwBQ,CAAxB,KAA8B,CAACR,KAAKU,kBAAL,CAAwBF,EAAEZ,EAA1B,CAAnC,EAAkE;AAC9D,2BAAO,KAAP;AACH;AACJ;AAzBmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BpD,eAAO,IAAP;AACH;AAnCU,C","file":"SubdivisionControl.js","sourcesContent":["export default {\n    preUpdate: (context, layer) => {\n        context.colorLayers = context.view.getLayers(\n            (l, a) => a && a.id == layer.id && l.type == 'color');\n        context.elevationLayers = context.view.getLayers(\n            (l, a) => a && a.id == layer.id && l.type == 'elevation');\n    },\n\n    hasEnoughTexturesToSubdivide: (context, layer, node) => {\n        // Prevent subdivision if node is covered by at least one elevation layer\n        // and if node doesn't have a elevation texture yet.\n        for (const e of context.elevationLayers) {\n            if (!e.frozen && e.ready && e.tileInsideLimit(node, e) && !node.isElevationLayerLoaded()) {\n                // no stop subdivision in the case of a loading error\n                if (node.layerUpdateState[e.id] && node.layerUpdateState[e.id].inError()) {\n                    continue;\n                }\n                return false;\n            }\n        }\n\n        // Prevent subdivision if missing color texture\n        for (const c of context.colorLayers) {\n            if (c.frozen || !c.visible || !c.ready) {\n                continue;\n            }\n            // no stop subdivision in the case of a loading error\n            if (node.layerUpdateState[c.id] && node.layerUpdateState[c.id].inError()) {\n                continue;\n            }\n            if (c.tileInsideLimit(node, c) && !node.isColorLayerLoaded(c.id)) {\n                return false;\n            }\n        }\n        return true;\n    },\n};\n"]}