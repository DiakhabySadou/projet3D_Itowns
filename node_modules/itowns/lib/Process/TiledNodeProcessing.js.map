{"version":3,"sources":["../../src/Process/TiledNodeProcessing.js"],"names":["requestNewTile","processTiledGeometryNode","subdivisionExtents","bbox","center","northWest","crs","west","_values","north","northEast","east","southWest","south","southEast","result","r","_internalStorageUnit","view","scheduler","geometryLayer","extent","parent","level","command","requester","layer","priority","redraw","threejsLayer","tileParams","execute","then","node","add","OBB","onTileCreated","subdivideNode","context","pendingSubdivision","children","some","n","id","extents","promises","push","child","all","updateMatrixWorld","update","material","uniforms","lightPosition","value","lightingEnabled","notifyChange","err","Error","cullingTest","subdivisionTest","removeChildrenAndCleanup","visible","setDisplayed","undefined","isVisible","camera","requestChildrenUpdate","fogDistance","setFog","removeChildren","filter"],"mappings":"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","file":"TiledNodeProcessing.js","sourcesContent":["import Extent from '../Core/Geographic/Extent';\nimport CancelledCommandException from '../Core/Scheduler/CancelledCommandException';\nimport ObjectRemovalHelper from './ObjectRemovalHelper';\n\nfunction subdivisionExtents(bbox) {\n    const center = bbox.center();\n\n    const northWest = new Extent(bbox.crs(),\n        bbox.west(), center._values[0],\n        center._values[1], bbox.north());\n    const northEast = new Extent(bbox.crs(),\n        center._values[0], bbox.east(),\n        center._values[1], bbox.north());\n    const southWest = new Extent(bbox.crs(),\n        bbox.west(), center._values[0],\n        bbox.south(), center._values[1]);\n    const southEast = new Extent(bbox.crs(),\n        center._values[0], bbox.east(),\n        bbox.south(), center._values[1]);\n\n    // scheme tiles store their coordinates in radians internally,\n    // so we need to fix the new bboxes as well\n    const result = [northWest, northEast, southWest, southEast];\n\n    for (const r of result) {\n        r._internalStorageUnit = bbox._internalStorageUnit;\n    }\n    return result;\n}\n\nexport function requestNewTile(view, scheduler, geometryLayer, extent, parent, level) {\n    const command = {\n        /* mandatory */\n        view,\n        requester: parent,\n        layer: geometryLayer,\n        priority: 10000,\n        /* specific params */\n        extent,\n        level,\n        redraw: false,\n        threejsLayer: geometryLayer.threejsLayer,\n        tileParams: geometryLayer.tileParams,\n    };\n\n    return scheduler.execute(command).then((node) => {\n        node.add(node.OBB());\n        geometryLayer.onTileCreated(geometryLayer, parent, node);\n        return node;\n    });\n}\n\nfunction subdivideNode(context, layer, node) {\n    if (!node.pendingSubdivision && !node.children.some(n => n.layer == layer.id)) {\n        const extents = subdivisionExtents(node.extent);\n        // TODO: pendingSubdivision mechanism is fragile, get rid of it\n        node.pendingSubdivision = true;\n\n        const promises = [];\n        const children = [];\n        for (const extent of extents) {\n            promises.push(\n                requestNewTile(context.view, context.scheduler, layer, extent, node).then((child) => {\n                    children.push(child);\n                    return node;\n                }));\n        }\n\n        Promise.all(promises).then(() => {\n            for (const child of children) {\n                node.add(child);\n                child.updateMatrixWorld(true);\n                child.OBB().update();\n\n                child.material.uniforms.lightPosition.value =\n                    node.material.uniforms.lightPosition.value;\n                child.material.uniforms.lightingEnabled.value =\n                    node.material.uniforms.lightingEnabled.value;\n            }\n            // TODO\n            /*\n              if (child.material.elevationLayersId.length) {\n                // need to force update elevation when delta is important\n                if (child.level - child.material.getElevationLayerLevel() > 6) {\n                    updateNodeElevation(_this.scene, params.tree, child, params.layersConfig, true);\n                }\n            }\n            */\n            node.pendingSubdivision = false;\n            context.view.notifyChange(false, node);\n        }, (err) => {\n            node.pendingSubdivision = false;\n            if (!(err instanceof CancelledCommandException)) {\n                throw new Error(err);\n            }\n        });\n    }\n}\n\nexport function processTiledGeometryNode(cullingTest, subdivisionTest) {\n    return function _processTiledGeometryNode(context, layer, node) {\n        if (!node.parent) {\n            return ObjectRemovalHelper.removeChildrenAndCleanup(layer.id, node);\n        }\n        // early exit if parent' subdivision is in progress\n        if (node.parent.pendingSubdivision) {\n            node.visible = false;\n            node.setDisplayed(false);\n            return undefined;\n        }\n\n        // do proper culling\n        const isVisible = cullingTest ? (!cullingTest(node, context.camera)) : true;\n        node.visible = isVisible;\n\n        if (isVisible) {\n            let requestChildrenUpdate = false;\n\n            if (node.pendingSubdivision || subdivisionTest(context, layer, node)) {\n                subdivideNode(context, layer, node);\n                // display iff children aren't ready\n                node.setDisplayed(node.pendingSubdivision);\n                requestChildrenUpdate = true;\n            } else {\n                node.setDisplayed(true);\n            }\n\n            if (node.material.visible) {\n                // update uniforms\n                if (context.view.fogDistance != undefined) {\n                    node.setFog(context.view.fogDistance);\n                }\n\n                if (!requestChildrenUpdate) {\n                    return ObjectRemovalHelper.removeChildren(layer.id, node);\n                }\n            }\n\n            // TODO: use Array.slice()\n            return requestChildrenUpdate ? node.children.filter(n => n.layer == layer.id) : undefined;\n        }\n\n        node.setDisplayed(false);\n        return ObjectRemovalHelper.removeChildren(layer.id, node);\n    };\n}\n"]}